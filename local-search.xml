<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>test</title>
    <link href="/2022/05/02/test/"/>
    <url>/2022/05/02/test/</url>
    
    <content type="html"><![CDATA[<table><thead><tr><th>模板</th><th>用途</th><th>回退</th></tr></thead><tbody><tr><td>index</td><td>首页</td><td></td></tr><tr><td>post</td><td>文章</td><td>index</td></tr><tr><td>page</td><td>分页</td><td>index</td></tr><tr><td>archive</td><td>归档</td><td>index</td></tr><tr><td>category</td><td>分类归档</td><td>archive</td></tr><tr><td>tag</td><td>标签归档</td><td>archive</td></tr></tbody></table>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo的基本使用</title>
    <link href="/2022/05/02/Hexo%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/05/02/Hexo%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://hexo.io/zh-cn/docs/commands">https://hexo.io/zh-cn/docs/commands</a></p></blockquote><h2 id="1-初始化项目"><a href="#1-初始化项目" class="headerlink" title="1. 初始化项目"></a>1. 初始化项目</h2><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo init [folder]<br></code></pre></td></tr></table></figure><h2 id="2-新建文件"><a href="#2-新建文件" class="headerlink" title="2. 新建文件"></a>2. 新建文件</h2><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">$ hexo <span class="hljs-keyword">new</span> [layout] &lt;<span class="hljs-built_in">title</span>&gt;<br></code></pre></td></tr></table></figure><blockquote><p><a href="https://hexo.io/zh-cn/docs/templates">https://hexo.io/zh-cn/docs/templates</a></p></blockquote><p>可选参数（layout）如下：</p><table><thead><tr><th>模板</th><th>用途</th><th>回退</th></tr></thead><tbody><tr><td>index</td><td>首页</td><td></td></tr><tr><td>post</td><td>文章</td><td>index</td></tr><tr><td>page</td><td>分页</td><td>index</td></tr><tr><td>archive</td><td>归档</td><td>index</td></tr><tr><td>category</td><td>分类归档</td><td>archive</td></tr><tr><td>tag</td><td>标签归档</td><td>archive</td></tr></tbody></table><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">$ hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;post title with whitespace&quot;</span><br></code></pre></td></tr></table></figure><h2 id="3-文章内容详解"><a href="#3-文章内容详解" class="headerlink" title="3. 文章内容详解"></a>3. 文章内容详解</h2><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">title:</span> Hexo的基本使用  <span class="hljs-meta"># 文章标题</span><br><span class="hljs-symbol">index_img:</span> <span class="hljs-keyword">/img/</span><span class="hljs-number">3.</span>jpg  <span class="hljs-meta"># 首页图片</span><br><span class="hljs-symbol">banner_img:</span> <span class="hljs-keyword">/img/</span><span class="hljs-number">3.</span>jpg  <span class="hljs-meta"># 文章页面图片</span><br><span class="hljs-symbol">date:</span> <span class="hljs-number">2022</span><span class="hljs-number">-05</span><span class="hljs-number">-02</span> <span class="hljs-number">07</span>:<span class="hljs-number">40</span>:<span class="hljs-number">25</span>  <span class="hljs-meta"># 文章发布时间</span><br><span class="hljs-symbol">tags:</span>  <span class="hljs-meta"># 文章标签</span><br></code></pre></td></tr></table></figure><h2 id="4-项目提交发布"><a href="#4-项目提交发布" class="headerlink" title="4. 项目提交发布"></a>4. 项目提交发布</h2><blockquote><p>参考：<a href="https://hexo.io/zh-cn/docs/github-pages">https://hexo.io/zh-cn/docs/github-pages</a><br><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029">https://blog.csdn.net/sinat_37781304/article/details/82729029</a></p></blockquote><h3 id="1-hexo-clean清除了你之前生成的东西，也可以不加。"><a href="#1-hexo-clean清除了你之前生成的东西，也可以不加。" class="headerlink" title="1) hexo clean清除了你之前生成的东西，也可以不加。"></a>1) hexo clean清除了你之前生成的东西，也可以不加。</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo clean</span><br></code></pre></td></tr></table></figure><h3 id="2-hexo-generate-顾名思义，生成静态文章，可以用-hexo-g缩写"><a href="#2-hexo-generate-顾名思义，生成静态文章，可以用-hexo-g缩写" class="headerlink" title="2) hexo generate 顾名思义，生成静态文章，可以用 hexo g缩写"></a>2) hexo generate 顾名思义，生成静态文章，可以用 hexo g缩写</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">hexo <span class="hljs-keyword">generate</span><br></code></pre></td></tr></table></figure><h3 id="3-hexo-deploy-部署文章，可以用hexo-d缩写"><a href="#3-hexo-deploy-部署文章，可以用hexo-d缩写" class="headerlink" title="3) hexo deploy 部署文章，可以用hexo d缩写"></a>3) hexo deploy 部署文章，可以用hexo d缩写</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo deploy</span><br></code></pre></td></tr></table></figure><h2 id="5-Hexo-fluid主题更新"><a href="#5-Hexo-fluid主题更新" class="headerlink" title="5. Hexo fluid主题更新"></a>5. Hexo fluid主题更新</h2><blockquote><p><a href="https://hexo.fluid-dev.com/docs/start/#%E6%9B%B4%E6%96%B0%E4%B8%BB%E9%A2%98">https://hexo.fluid-dev.com/docs/start/#%E6%9B%B4%E6%96%B0%E4%B8%BB%E9%A2%98</a></p></blockquote><h2 id="99-其他"><a href="#99-其他" class="headerlink" title="99. 其他"></a>99. 其他</h2><h3 id="①-hexo-d命令报错：ERROR-Deployer-not-found-git"><a href="#①-hexo-d命令报错：ERROR-Deployer-not-found-git" class="headerlink" title="① hexo d命令报错：ERROR Deployer not found: git"></a>① hexo d命令报错：ERROR Deployer not found: git</h3><p>参考：</p><blockquote><p><a href="https://developer.aliyun.com/article/764974">https://developer.aliyun.com/article/764974</a><br>解决<br>安装hexo-deployer-git：</p></blockquote><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install <span class="hljs-comment">--save hexo-deployer-git</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Minecraft CarpetMod常用命令</title>
    <link href="/2022/04/30/Minecraft%20CarpetMod%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/04/30/Minecraft%20CarpetMod%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="1-显示tps"><a href="#1-显示tps" class="headerlink" title="1. 显示tps"></a>1. 显示tps</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">/log tps<br><span class="hljs-meta prompt_"># </span><span class="language-bash">详见  6. <span class="hljs-built_in">log</span> 指令与玩家单独数据</span><br></code></pre></td></tr></table></figure><h2 id="2-召唤硅胶人："><a href="#2-召唤硅胶人：" class="headerlink" title="2. 召唤硅胶人："></a>2. 召唤硅胶人：</h2><p>开启命令（重启服务器后失效）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/carpet &lt;特性名&gt; &lt;设定值&gt;<br></code></pre></td></tr></table></figure><h3 id="1-开启召唤假人的功能："><a href="#1-开启召唤假人的功能：" class="headerlink" title="1) 开启召唤假人的功能："></a>1) 开启召唤假人的功能：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/carpet commandPlayer true<br></code></pre></td></tr></table></figure><h3 id="2-召唤名为Steve（名字可以自己设置）的假人："><a href="#2-召唤名为Steve（名字可以自己设置）的假人：" class="headerlink" title="2) 召唤名为Steve（名字可以自己设置）的假人："></a>2) 召唤名为Steve（名字可以自己设置）的假人：</h3><p>（假人的跟玩家的朝向一致，位置一致，游戏模式一致）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/player Steve spawn<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">守卫者农场挂机：<br>/player Steve spawn at 1232 184 1023<br></code></pre></td></tr></table></figure><h3 id="3-让名为Steve的假人持续使用一项物品，例如持续右键"><a href="#3-让名为Steve的假人持续使用一项物品，例如持续右键" class="headerlink" title="3) 让名为Steve的假人持续使用一项物品，例如持续右键"></a>3) 让名为Steve的假人持续使用一项物品，例如持续右键</h3><p>（需要玩家先将物品扔给假人，让假人手持物品）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/player Steve use continuous<br></code></pre></td></tr></table></figure><h3 id="4-让名为Steve的假人持续使用左键"><a href="#4-让名为Steve的假人持续使用左键" class="headerlink" title="4) 让名为Steve的假人持续使用左键"></a>4) 让名为Steve的假人持续使用左键</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/player Steve attack continuous<br></code></pre></td></tr></table></figure><h3 id="5-让名为Steve的假人使用一项物品，仅使用一次"><a href="#5-让名为Steve的假人使用一项物品，仅使用一次" class="headerlink" title="5) 让名为Steve的假人使用一项物品，仅使用一次"></a>5) 让名为Steve的假人使用一项物品，仅使用一次</h3><p>（需要玩家先将物品扔给假人，让假人手持物品）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/player Steve use<br></code></pre></td></tr></table></figure><h3 id="6-让名为Steve的假人停止一切动作"><a href="#6-让名为Steve的假人停止一切动作" class="headerlink" title="6) 让名为Steve的假人停止一切动作"></a>6) 让名为Steve的假人停止一切动作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/player Steve stop<br></code></pre></td></tr></table></figure><h3 id="7-将名为Steve的假人左右手上的物品交换"><a href="#7-将名为Steve的假人左右手上的物品交换" class="headerlink" title="7) 将名为Steve的假人左右手上的物品交换"></a>7) 将名为Steve的假人左右手上的物品交换</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/player Steve swapHands<br></code></pre></td></tr></table></figure><h3 id="8-移除名为Steve的假人："><a href="#8-移除名为Steve的假人：" class="headerlink" title="8) 移除名为Steve的假人："></a>8) 移除名为Steve的假人：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/player Steve kill<br></code></pre></td></tr></table></figure><h3 id="9-说明"><a href="#9-说明" class="headerlink" title="9) 说明"></a>9) 说明</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs shell">控制玩家<br>可以对玩家进行相应的操控,无论是真玩家还是&quot;硅胶小人&quot;(假玩家),又或者是你自己,这些行为是在服务器运行,在操控自己时,自己可能看不到相应的UI,但别的玩家可以看到<br><br>player &lt;name&gt; &lt;option&gt;<br><br>name  指定玩家名<br>option  选项<br>once #一次<br>continuous #持续<br>interval #间隔<br>forward #前方<br>east #东方<br>spawn<br>在玩家所在位置生成一个&quot;硅胶小人&quot;且游戏模式相同,若该玩家名存在,则该玩家上线时会顶替掉硅胶小人<br>drop<br>让硅胶小人把手持的物品丢出来<br>mount<br>让硅胶小人坐在附近的实体上<br>dismount<br>让硅胶小人从实体上下来<br>look &lt;方向&gt;<br>让硅胶小人朝向相应方向<br>move &lt;方向&gt;<br>stop<br>停止硅胶小人所有动作<br>swapHands<br>交换主手和副手上的物品<br>use &lt;选项&gt;<br>使用,相当于右键<br>attack &lt;选项&gt;<br>攻击相当于左键, 选项同use<br>shadow<br>会让同名硅胶小人顶替真实玩家的位置(真实玩家下线),并完成你之前给他们的任务,只能在服务器使用,单机下线内置服务端会关闭 <br>作者：worldy丶jj https://www.bilibili.com/read/cv5948362/ 出处：bilibili<br></code></pre></td></tr></table></figure><h2 id="3-切换模式命令"><a href="#3-切换模式命令" class="headerlink" title="3. 切换模式命令"></a>3. 切换模式命令</h2><p>观察者模式带”夜视”和”海豚的恩惠”效果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">carper commandCameramode true<br>/c /s 快速切换 观察者/生存 模式<br>给普通玩家使用/c, /s权限,可以快速切换观察者/生存模式<br></code></pre></td></tr></table></figure><blockquote><p>作者：worldy丶jj <a href="https://www.bilibili.com/read/cv5948362/">https://www.bilibili.com/read/cv5948362/</a> 出处：bilibili</p></blockquote><h2 id="4-单个玩家睡觉跳过夜晚"><a href="#4-单个玩家睡觉跳过夜晚" class="headerlink" title="4. 单个玩家睡觉跳过夜晚"></a>4. 单个玩家睡觉跳过夜晚</h2><p>字面意思</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">carpet onePlayerSleeping true<br></code></pre></td></tr></table></figure><blockquote><p>作者：worldy丶jj <a href="https://www.bilibili.com/read/cv5948362/">https://www.bilibili.com/read/cv5948362/</a> 出处：bilibili</p></blockquote><p>1.17版本以后的单人睡觉是gamerule里面的playersleepingprecentage value（value表示百分之多少玩家睡觉跳过晚上，数值范围是0-100）</p><p>1.17为什么没有onePlayerSleeping指令呢</p><p>2021-09-25 23:24回复</p><p><a href="https://space.bilibili.com/38562793"><img src="https://i1.hdslb.com/bfs/face/7e2f6e0d8aabdb749313435344fc13df6ed2b2cd.jpg@96w_96h_1c_1s.webp" alt="img"></a></p><p><a href="https://space.bilibili.com/38562793">凿壁蹭_WIFI</a><a href="https://www.bilibili.com/blackboard/help.html#%E4%BC%9A%E5%91%98%E7%AD%89%E7%BA%A7%E7%9B%B8%E5%85%B3"><img src="https://s1.hdslb.com/bfs/seed/jinkela/commentpc/static/img/ic_user%20level_6.64b9440.svg" alt="img"></a>改了，在gamerule里面</p><p><a href="https://www.sohu.com/a/165552096_114885">https://www.sohu.com/a/165552096_114885</a></p><p>很简单，只要使用F3+P,F3+P是一个可以取消切出游戏换面时弹出的ESC游戏选项的功能，也就是说切出游戏不需要打开背包或者打开对话窗即可直接切出，单机玩家不会进入暂停界面。</p><h2 id="5-追踪实体信息-村民-track"><a href="#5-追踪实体信息-村民-track" class="headerlink" title="5. 追踪实体信息(村民) track"></a>5. 追踪实体信息(村民) track</h2><ol><li>开启命令：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">/carpet commandTrackAI true<br>[11:04:29] [Server thread/INFO]: commandTrackAI: true, [change permanently?]<br></code></pre></td></tr></table></figure><ol start="2"><li>使用</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">显示</span><br>/track villager breeding<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">清除</span><br>/track villager clear<br></code></pre></td></tr></table></figure><h2 id="6-log-指令与玩家单独数据"><a href="#6-log-指令与玩家单独数据" class="headerlink" title="6. log 指令与玩家单独数据"></a>6. log 指令与玩家单独数据</h2><p>更加直接,连续,给每个玩家提供信息,log是根据玩家登陆信息,基于每个玩家的,基于carpet精神,不侵犯原版玩家数据,在服务器重启或重进世界后,玩家log信息会销毁</p><p>log &lt;选项&gt;</p><p>​选项</p><p>​tps</p><p>​在tab界面显示服务器卡顿情况TPS,MSPT</p><p>​counter [颜色]</p><p>​能够简洁,连续的显示计数器物品的速度的实时效率</p><p>​mobcaps</p><p>​会持续显示刷怪上限信息</p><p>​pathfinding &lt;值&gt;</p><p>​能用粒子效果显示生物需要&lt;值&gt;毫秒以上完成的所有寻路尝试</p><p>​packets</p><p>​显示服务器端进出数据包的总数量</p><p>​tnt</p><p>​追踪世界中任何tnt实体,初始位置和爆炸位置</p><p>​projectiles</p><p>​追踪抛射物的每一刻的位置</p><p>​fallingBlock</p><p>​追踪实体方块的每一刻的位置 </p><blockquote><p>作者：worldy丶jj <a href="https://www.bilibili.com/read/cv5948362/">https://www.bilibili.com/read/cv5948362/</a> 出处：bilibili</p></blockquote><h2 id="7-carpet配置文件"><a href="#7-carpet配置文件" class="headerlink" title="7. carpet配置文件"></a>7. carpet配置文件</h2><p>对于服务器管理员 - 手动地配置carpet mod并让地毯指令在游戏中无法调用</p><p>carpet.conf</p><p>#关闭所有carpet指令,可以在后面启用你需要的特性,玩家进入游戏后,看不到任何carpet指令和特性,除非你在下面开启 </p><p>locked</p><p>#例如下面的特性开启 </p><p>scriptsAutoload true </p><p>renewableCoral true </p><blockquote><p>作者：worldy丶jj <a href="https://www.bilibili.com/read/cv5948362/">https://www.bilibili.com/read/cv5948362/</a> 出处：bilibili</p></blockquote><h2 id="8-查看所有命令："><a href="#8-查看所有命令：" class="headerlink" title="8. 查看所有命令："></a>8. 查看所有命令：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">/carpet list default<br>[09:48:05] [Server thread/INFO]: Carpet Mod Settings matching &quot;default&quot;:<br>[09:48:05] [Server thread/INFO]: - defaultLoggers [none] [tps] [mobcaps,tps]<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs shell">/carpet list<br>[09:51:31] [Server thread/INFO]: All Carpet Mod Settings:<br>[09:51:31] [Server thread/INFO]: - allowSpawningOfflinePlayers [true] [false]<br>[09:51:31] [Server thread/INFO]: - antiCheatDisabled [true] [false]<br>[09:51:31] [Server thread/INFO]: - carpetCommandPermissionLevel [ops] [2] [4]<br>[09:51:31] [Server thread/INFO]: - carpets [true] [false]<br>[09:51:31] [Server thread/INFO]: - chainStone [true] [false] [stick_to_all]<br>[09:51:31] [Server thread/INFO]: - cleanLogs [true] [false]<br>[09:51:31] [Server thread/INFO]: - commandDistance [true] [false] [ops]<br>[09:51:31] [Server thread/INFO]: - commandDraw [true] [false] [ops]<br>[09:51:31] [Server thread/INFO]: - commandInfo [true] [false] [ops]<br>[09:51:31] [Server thread/INFO]: - commandLog [true] [false] [ops]<br>[09:51:31] [Server thread/INFO]: - commandPerimeterInfo [true] [false] [ops]<br>[09:51:31] [Server thread/INFO]: - commandPlayer [true] [false] [ops]<br>[09:51:31] [Server thread/INFO]: - commandProfile [true] [false] [ops]<br>[09:51:31] [Server thread/INFO]: - commandScript [true] [false] [ops]<br>[09:51:31] [Server thread/INFO]: - commandScriptACE [ops] [0] [1] [2] [3] [4]<br>[09:51:31] [Server thread/INFO]: - commandSpawn [true] [false] [ops]<br>[09:51:31] [Server thread/INFO]: - commandTick [true] [false] [ops]<br>[09:51:31] [Server thread/INFO]: - commandTrackAI [true] [false] [ops]<br>[09:51:31] [Server thread/INFO]: - creativeFlyDrag [0.09]<br>[09:51:31] [Server thread/INFO]: - creativeFlySpeed [1.0]<br>[09:51:31] [Server thread/INFO]: - creativeNoClip [true] [false]<br>[09:51:31] [Server thread/INFO]: - creativePlayersLoadChunks [true] [false]<br>[09:51:31] [Server thread/INFO]: - ctrlQCraftingFix [true] [false]<br>[09:51:31] [Server thread/INFO]: - customMOTD [_]<br>[09:51:31] [Server thread/INFO]: - defaultLoggers [none] [tps] [mobcaps,tps]<br>[09:51:31] [Server thread/INFO]: - desertShrubs [true] [false]<br>[09:51:31] [Server thread/INFO]: - explosionNoBlockDamage [true] [false]<br>[09:51:31] [Server thread/INFO]: - extremeBehaviours [true] [false]<br>[09:51:31] [Server thread/INFO]: - fastRedstoneDust [true] [false]<br>[09:51:31] [Server thread/INFO]: - fillLimit [32768] [250000] [1000000]<br>[09:51:31] [Server thread/INFO]: - fillUpdates [true] [false]<br>[09:51:31] [Server thread/INFO]: - flatWorldStructureSpawning [true] [false]<br>[09:51:31] [Server thread/INFO]: - flippinCactus [true] [false]<br>[09:51:31] [Server thread/INFO]: - fogOff [true] [false]<br>[09:51:31] [Server thread/INFO]: - forceloadLimit [256]<br>[09:51:31] [Server thread/INFO]: - hardcodeTNTangle [-1] [-1.0]<br>[09:51:31] [Server thread/INFO]: - hopperCounters [true] [false]<br>[09:51:31] [Server thread/INFO]: - huskSpawningInTemples [true] [false]<br>[09:51:31] [Server thread/INFO]: - interactionUpdates [true] [false]<br>[09:51:31] [Server thread/INFO]: - lagFreeSpawning [true] [false]<br>[09:51:31] [Server thread/INFO]: - language [none] [zh_cn] [zh_tw]<br>[09:51:31] [Server thread/INFO]: - leadFix [true] [false]<br>[09:51:31] [Server thread/INFO]: - lightEngineMaxBatchSize [5] [50] [100] [200]<br>[09:51:31] [Server thread/INFO]: - lightningKillsDropsFix [true] [false]<br>[09:51:31] [Server thread/INFO]: - liquidDamageDisabled [true] [false]<br>[09:51:31] [Server thread/INFO]: - maxEntityCollisions [0] [1] [20]<br>[09:51:31] [Server thread/INFO]: - mergeTNT [true] [false]<br>[09:51:31] [Server thread/INFO]: - missingTools [true] [false]<br>[09:51:31] [Server thread/INFO]: - movableAmethyst [true] [false]<br>[09:51:31] [Server thread/INFO]: - movableBlockEntities [true] [false]<br>[09:51:31] [Server thread/INFO]: - optimizedTNT [true] [false]<br>[09:51:31] [Server thread/INFO]: - perfPermissionLevel [2] [4]<br>[09:51:31] [Server thread/INFO]: - persistentParrots [true] [false]<br>[09:51:31] [Server thread/INFO]: - piglinsSpawningInBastions [true] [false]<br>[09:51:31] [Server thread/INFO]: - pingPlayerListLimit [0] [12] [20] [40]<br>[09:51:31] [Server thread/INFO]: - placementRotationFix [true] [false]<br>[09:51:31] [Server thread/INFO]: - portalCreativeDelay [1] [40] [80] [72000]<br>[09:51:31] [Server thread/INFO]: - portalSurvivalDelay [1] [40] [80] [72000]<br>[09:51:31] [Server thread/INFO]: - pushLimit [10] [12] [14] [100]<br>[09:51:31] [Server thread/INFO]: - quasiConnectivity [true] [false]<br>[09:51:31] [Server thread/INFO]: - railPowerLimit [9] [15] [30]<br>[09:51:31] [Server thread/INFO]: - renewableBlackstone [true] [false]<br>[09:51:31] [Server thread/INFO]: - renewableCoral [false] [expanded] [true]<br>[09:51:31] [Server thread/INFO]: - renewableDeepslate [true] [false]<br>[09:51:31] [Server thread/INFO]: - renewableSponges [true] [false]<br>[09:51:31] [Server thread/INFO]: - rotatorBlock [true] [false]<br>[09:51:31] [Server thread/INFO]: - scriptsAppStore [gnembon/scarpet/contents/programs]<br>[09:51:31] [Server thread/INFO]: - scriptsAutoload [true] [false]<br>[09:51:31] [Server thread/INFO]: - scriptsDebugging [true] [false]<br>[09:51:31] [Server thread/INFO]: - scriptsOptimization [true] [false]<br>[09:51:31] [Server thread/INFO]: - shulkerSpawningInEndCities [true] [false]<br>[09:51:31] [Server thread/INFO]: - silverFishDropGravel [true] [false]<br>[09:51:31] [Server thread/INFO]: - simulationDistance [0] [12] [16] [32]<br>[09:51:31] [Server thread/INFO]: - smoothClientAnimations [true] [false]<br>[09:51:31] [Server thread/INFO]: - spawnChunksSize [0] [11]<br>[09:51:31] [Server thread/INFO]: - stackableShulkerBoxes [false] [true] [16]<br>[09:51:31] [Server thread/INFO]: - structureBlockIgnored [minecraft:structure_void] [minecraft:air]<br>[09:51:31] [Server thread/INFO]: - structureBlockLimit [48] [96] [192] [256]<br>[09:51:31] [Server thread/INFO]: - structureBlockOutlineDistance [96] [192] [2048]<br>[09:51:31] [Server thread/INFO]: - summonNaturalLightning [true] [false]<br>[09:51:31] [Server thread/INFO]: - superSecretSetting [true] [false]<br>[09:51:31] [Server thread/INFO]: - tntDoNotUpdate [true] [false]<br>[09:51:31] [Server thread/INFO]: - tntPrimerMomentumRemoved [true] [false]<br>[09:51:31] [Server thread/INFO]: - tntRandomRange [-1] [-1.0]<br>[09:51:31] [Server thread/INFO]: - updateSuppressionBlock [false] [true] [1] [6]<br>[09:51:31] [Server thread/INFO]: - updateSuppressionCrashFix [true] [false]<br>[09:51:31] [Server thread/INFO]: - viewDistance [0] [12] [16] [32]<br>[09:51:31] [Server thread/INFO]: - xpNoCooldown [true] [false]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java基础知识点总结归纳，超级全面！（2021版）</title>
    <link href="/2022/04/24/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93%E5%BD%92%E7%BA%B3%EF%BC%8C%E8%B6%85%E7%BA%A7%E5%85%A8%E9%9D%A2%EF%BC%81%EF%BC%882021%E7%89%88%EF%BC%89/"/>
    <url>/2022/04/24/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93%E5%BD%92%E7%BA%B3%EF%BC%8C%E8%B6%85%E7%BA%A7%E5%85%A8%E9%9D%A2%EF%BC%81%EF%BC%882021%E7%89%88%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>Java基础知识点总结归纳，超级全面！（2021版）</p><p>Java程序员-张凯</p><p>于 2021-05-03 12:28:26 发布</p><p>15449<br> 已收藏 315<br>文章标签： Java基础知识点 java Java基础知识点整理 Java基础知识点总结归纳<br>版权<br>凯哥今天看了网上好多关于Java基础知识点汇总的博客，but，感觉都不尽如人意，要么不全面，要么不准确，要么排版太乱了！</p><p>所以今天花了一天时间整理了一份Java基础知识点总结归纳，超级全面！希望对大家有帮助哈~</p><p>由于本文篇幅过长，博主为了方便大家阅读和收藏，特意将本文转成了一份PDF版的文档。</p><p>需要PDF版的朋友可以关注微信公众号：Java团长，发送“ 基础知识 ”即可获取哈~</p><p>一、Java概述<br>1、何为编程<br>编程就是让计算机为解决某个问题而使用某种程序设计语言编写程序代码，并最终得到结果的过程。</p><p>为了使计算机能够理解人的意图，人类就必须要将需解决的问题的思路、方法、和手段通过计算机能够理解的形式告诉计算机，使得计算机能够根据人的指令一步一步去工作，完成某种特定的任务。这种人和计算机之间交流的过程就是编程。</p><p>2、什么是Java<br>Java是一门面向对象编程语言，不仅吸收了C++语言的各种优点，还摒弃了C++里难以理解的多继承、指针等概念，因此Java语言具有功能强大和简单易用两个特征。Java语言作为静态面向对象编程语言的代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程 。</p><p>3、jdk1.5之后的三大版本<br>Java SE（J2SE，Java 2 Platform Standard Edition，标准版）<br>Java SE 以前称为 J2SE。它允许开发和部署在桌面、服务器、嵌入式环境和实时环境中使用的 Java 应用程序。Java SE 包含了支持 Java Web 服务开发的类，并为Java EE和Java ME提供基础。</p><p>Java EE（J2EE，Java 2 Platform Enterprise Edition，企业版）<br>Java EE 以前称为 J2EE。企业版本帮助开发和部署可移植、健壮、可伸缩且安全的服务器端Java 应用程序。Java EE 是在 Java SE 的基础上构建的，它提供 Web 服务、组件模型、管理和通信 API，可以用来实现企业级的面向服务体系结构（service-oriented architecture，SOA）和 Web2.0应用程序。2018年2月，Eclipse 宣布正式将 JavaEE 更名为 JakartaEE</p><p>Java ME（J2ME，Java 2 Platform Micro Edition，微型版）<br>Java ME 以前称为 J2ME。Java ME 为在移动设备和嵌入式设备（比如手机、PDA、电视机顶盒和打印机）上运行的应用程序提供一个健壮且灵活的环境。Java ME 包括灵活的用户界面、健壮的安全模型、许多内置的网络协议以及对可以动态下载的连网和离线应用程序的丰富支持。基于 Java ME 规范的应用程序只需编写一次，就可以用于许多设备，而且可以利用每个设备的本机功能。</p><p>4、JVM、JRE和JDK的关系<br>JVM<br>Java Virtual Machine是Java虚拟机，Java程序需要运行在虚拟机上，不同的平台有自己的虚拟机，因此Java语言可以实现跨平台。</p><p>JRE<br>Java Runtime Environment包括Java虚拟机和Java程序所需的核心类库等。核心类库主要是java.lang包：包含了运行Java程序必不可少的系统类，如基本数据类型、基本数学函数、字符串处理、线程、异常处理类等，系统缺省加载这个包</p><p>如果想要运行一个开发好的Java程序，计算机中只需要安装JRE即可。</p><p>JDK<br>Java Development Kit是提供给Java开发人员使用的，其中包含了Java的开发工具，也包括了JRE。所以安装了JDK，就无需再单独安装JRE了。其中的开发工具：编译工具(javac.exe)，打包工具(jar.exe)等</p><p>JVM&amp;JRE&amp;JDK关系图：</p><p>5、什么是跨平台性？原理是什么<br>所谓跨平台性，是指java语言编写的程序，一次编译后，可以在多个系统平台上运行。</p><p>实现原理：Java程序是通过java虚拟机在系统平台上运行的，只要该系统可以安装相应的java虚拟机，该系统就可以运行java程序。</p><p>6、Java语言有哪些特点<br>简单易学（Java语言的语法与C语言和C++语言很接近）</p><p>面向对象（封装，继承，多态）</p><p>平台无关性（Java虚拟机实现平台无关性）</p><p>支持网络编程并且很方便（Java语言诞生本身就是为简化网络编程设计的）</p><p>支持多线程（多线程机制使应用程序在同一时间并行执行多项任）</p><p>健壮性（Java语言的强类型机制、异常处理、垃圾的自动收集等）</p><p>安全性</p><p>7、什么是字节码？采用字节码的最大好处是什么<br>字节码：Java源代码经过虚拟机编译器编译后产生的文件（即扩展为.class的文件），它不面向任何特定的处理器，只面向虚拟机。</p><p>采用字节码的好处：</p><p>Java语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。所以Java程序运行时比较高效，而且，由于字节码并不专对一种特定的机器，因此，Java程序无须重新编译便可在多种不同的计算机上运行。</p><p>先看下java中的编译器和解释器：</p><p>Java中引入了虚拟机的概念，即在机器和编译程序之间加入了一层抽象的虚拟机器。这台虚拟的机器在任何平台上都提供给编译程序一个的共同的接口。编译程序只需要面向虚拟机，生成虚拟机能够理解的代码，然后由解释器来将虚拟机代码转换为特定系统的机器码执行。在Java中，这种供虚拟机理解的代码叫做字节码（即扩展为.class的文件），它不面向任何特定的处理器，只面向虚拟机。每一种平台的解释器是不同的，但是实现的虚拟机是相同的。Java源程序经过编译器编译后变成字节码，字节码由虚拟机解释执行，虚拟机将每一条要执行的字节码送给解释器，解释器将其翻译成特定机器上的机器码，然后在特定的机器上运行，这就是上面提到的Java的特点的编译与解释并存的解释。</p><p>Java源代码—-&gt;编译器—-&gt;jvm可执行的Java字节码(即虚拟指令)—-&gt;jvm—-&gt;jvm中解释器—–&gt;机器可执行的二进制机器码—-&gt;程序运行。</p><p>8、什么是Java程序的主类？应用程序和小程序的主类有何不同？<br>一个程序中可以有多个类，但只能有一个类是主类。在Java应用程序中，这个主类是指包含main()方法的类。而在Java小程序中，这个主类是一个继承自系统类JApplet或Applet的子类。应用程序的主类不一定要求是public类，但小程序的主类要求必须是public类。主类是Java程序执行的入口点。</p><p>9、Java应用程序与小程序之间有那些差别？<br>简单说应用程序是从主线程启动(也就是main()方法)。applet小程序没有main方法，主要是嵌在浏览器页面上运行(调用init()线程或者run()来启动)，嵌入浏览器这点跟flash的小游戏类似。</p><p>10、Java和C++的区别<br>我知道很多人没学过C++，但是面试官就是没事喜欢拿咱们Java和C++比呀！没办法！！！就算没学过C++，也要记下来！</p><p>都是面向对象的语言，都支持封装、继承和多态<br>Java不提供指针来直接访问内存，程序内存更加安全<br>Java的类是单继承的，C++支持多重继承；虽然Java的类不可以多继承，但是接口可以多继承。<br>Java有自动内存管理机制，不需要程序员手动释放无用内存<br>11、Oracle JDK 和 OpenJDK 的对比<br>Oracle JDK版本将每三年发布一次，而OpenJDK版本每三个月发布一次；<br>OpenJDK 是一个参考模型并且是完全开源的，而Oracle JDK是OpenJDK的一个实现，并不是完全开源的；<br>Oracle JDK 比 OpenJDK 更稳定。OpenJDK和Oracle JDK的代码几乎相同，但Oracle JDK有更多的类和一些错误修复。因此，如果您想开发企业&#x2F;商业软件，我建议您选择Oracle JDK，因为它经过了彻底的测试和稳定。某些情况下，有些人提到在使用OpenJDK 可能会遇到了许多应用程序崩溃的问题，但是，只需切换到Oracle JDK就可以解决问题；<br>在响应性和JVM性能方面，Oracle JDK与OpenJDK相比提供了更好的性能；<br>Oracle JDK不会为即将发布的版本提供长期支持，用户每次都必须通过更新到最新版本获得支持来获取最新版本；<br>Oracle JDK根据二进制代码许可协议获得许可，而OpenJDK根据GPL v2许可获得许可。<br>二、基础语法<br>1、数据类型</p><ol><li>Java有哪些数据类型<br>定义：Java语言是强类型语言，对于每一种数据都定义了明确的具体的数据类型，在内存中分配了不同大小的内存空间。</li></ol><p>分类</p><p>基本数据类型<br>数值型<br>整数类型(byte,short,int,long)<br>浮点类型(float,double)<br>字符型(char)<br>布尔型(boolean)<br>引用数据类型<br>类(class)<br>接口(interface)<br>数组([])<br>Java基本数据类型图</p><ol start="2"><li><p>switch 是否能作用在 byte 上，是否能作用在 long 上，是否能作用在 String 上<br>在 Java 5 以前，switch(expr)中，expr 只能是 byte、short、char、int。从 Java5 开始，Java 中引入了枚举类型，expr 也可以是 enum 类型，从 Java 7 开始，expr 还可以是字符串（String），但是长整型（long）在目前所有的版本中都是不可以的。</p></li><li><p>用最有效率的方法计算 2 乘以 8<br>2 &lt;&lt; 3（左移 3 位相当于乘以 2 的 3 次方，右移 3 位相当于除以 2 的 3 次方）。</p></li><li><p>Math.round(11.5) 等于多少？Math.round(-11.5)等于多少<br>Math.round(11.5)的返回值是 12，Math.round(-11.5)的返回值是-11。四舍五入的原理是在参数上加 0.5 然后进行下取整。</p></li><li><p>float f&#x3D;3.4;是否正确<br>不正确。3.4 是双精度数，将双精度型（double）赋值给浮点型（float）属于下转型（down-casting，也称为窄化）会造成精度损失，因此需要强制类型转换float f &#x3D;(float)3.4; 或者写成 float f &#x3D;3.4F;。</p></li><li><p>short s1 &#x3D; 1; s1 &#x3D; s1 + 1;有错吗?short s1 &#x3D; 1; s1 +&#x3D; 1;有错吗<br>对于 short s1 &#x3D; 1; s1 &#x3D; s1 + 1;由于 1 是 int 类型，因此 s1+1 运算结果也是 int型，需要强制转换类型才能赋值给 short 型。</p></li></ol><p>而 short s1 &#x3D; 1; s1 +&#x3D; 1;可以正确编译，因为 s1+&#x3D; 1;相当于 s1 &#x3D; (short(s1 + 1);其中有隐含的强制类型转换。</p><p>2、编码<br>Java语言采用何种编码方案？有何特点？<br>Java语言采用Unicode编码标准，Unicode（标准码），它为每个字符制订了一个唯一的数值，因此在任何的语言，平台，程序都可以放心的使用。</p><p>3、注释</p><ol><li>什么Java注释<br>定义：用于解释说明程序的文字</li></ol><p>分类</p><p>单行注释<br>格式： &#x2F;&#x2F; 注释文字<br>多行注释<br>格式： &#x2F;* 注释文字 <em>&#x2F;<br>文档注释<br>格式：&#x2F;</em>* 注释文字 *&#x2F;<br>作用</p><p>在程序中，尤其是复杂的程序中，适当地加入注释可以增加程序的可读性，有利于程序的修改、调试和交流。注释的内容在程序编译的时候会被忽视，不会产生目标代码，注释的部分不会对程序的执行结果产生任何影响。</p><p>注意事项：多行和文档注释都不能嵌套使用。</p><p>4、访问修饰符</p><ol><li>访问修饰符 public,private,protected,以及不写（默认）时的区别<br>定义：Java中，可以使用访问修饰符来保护对类、变量、方法和构造方法的访问。Java 支持 4 种不同的访问权限。</li></ol><p>分类</p><p>private : 在同一类内可见。使用对象：变量、方法。 注意：不能修饰类（外部类）<br>default (即缺省，什么也不写，不使用任何关键字）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。<br>protected : 对同一包内的类和所有子类可见。使用对象：变量、方法。 注意：不能修饰类（外部类）。<br>public : 对所有类可见。使用对象：类、接口、变量、方法</p><p>访问修饰符图</p><p>5、运算符<br>&amp;和&amp;&amp;的区别<br>&amp;运算符有两种用法：(1)按位与；(2)逻辑与。</p><p>&amp;&amp;运算符是短路与运算。逻辑与跟短路与的差别是非常巨大的，虽然二者都要求运算符左右两端的布尔值都是true 整个表达式的值才是 true。&amp;&amp;之所以称为短路运算，是因为如果&amp;&amp;左边的表达式的值是 false，右边的表达式会被直接短路掉，不会进行运算。</p><p>注意：逻辑或运算符（|）和短路或运算符（||）的差别也是如此。</p><p>6、关键字</p><ol><li><p>Java 有没有 goto<br>goto 是 Java 中的保留字，在目前版本的 Java 中没有使用。</p></li><li><p>final 有什么用？<br>用于修饰类、属性和方法；</p></li></ol><p>被final修饰的类不可以被继承<br>被final修饰的方法不可以被重写<br>被final修饰的变量不可以被改变，被final修饰不可变的是变量的引用，而不是引用指向的内容，引用指向的内容是可以改变的<br>3. final finally finalize区别<br>final可以修饰类、变量、方法，修饰类表示该类不能被继承、修饰方法表示该方法不能被重写、修饰变量表示该变量是一个常量不能被重新赋值。<br>finally一般作用在try-catch代码块中，在处理异常的时候，通常我们将一定要执行的代码方法finally代码块中，表示不管是否出现异常，该代码块都会执行，一般用来存放一些关闭资源的代码。<br>finalize是一个方法，属于Object类的一个方法，而Object类是所有类的父类，该方法一般由垃圾回收器来调用，当我们调用System.gc() 方法的时候，由垃圾回收器调用finalize()，回收垃圾，一个对象是否可回收的最后判断。<br>4. this关键字的用法<br>this是自身的一个对象，代表对象本身，可以理解为：指向对象本身的一个指针。</p><p>this的用法在java中大体可以分为3种：</p><p>①. 普通的直接引用，this相当于是指向当前对象本身。</p><p>②. 形参与成员名字重名，用this来区分：</p><p>public Person(String name, int age) {<br>    this.name &#x3D; name;<br>    this.age &#x3D; age;<br>}<br>③. 引用本类的构造函数</p><p>class Person{<br>    private String name;<br>    private int age;</p><pre><code class="hljs">public Person() &#123;&#125; public Person(String name) &#123;    this.name = name;&#125;public Person(String name, int age) &#123;    this(name);    this.age = age;&#125;</code></pre><p>}</p><ol start="5"><li>super关键字的用法<br>super可以理解为是指向自己超（父）类对象的一个指针，而这个超类指的是离自己最近的一个父类。</li></ol><p>super也有三种用法：</p><p>①. 普通的直接引用</p><p>与this类似，super相当于是指向当前对象的父类的引用，这样就可以用super.xxx来引用父类的成员。</p><p>②. 子类中的成员变量或方法与父类中的成员变量或方法同名时，用super进行区分</p><p>class Person{<br>    protected String name;</p><pre><code class="hljs">public Person(String name) &#123;    this.name = name;&#125;</code></pre><p>}</p><p>class Student extends Person{<br>    private String name;</p><pre><code class="hljs">public Student(String name, String name1) &#123;    super(name);    this.name = name1;&#125; public void getInfo()&#123;    System.out.println(this.name);      //Child    System.out.println(super.name);     //Father&#125;</code></pre><p>}</p><p>public class Test {<br>    public static void main(String[] args) {<br>       Student s1 &#x3D; new Student(“Father”,”Child”);<br>       s1.getInfo();</p><pre><code class="hljs">&#125;</code></pre><p>}<br>③. 引用父类构造函数</p><p>super（参数）：调用父类中的某一个构造函数（应该为构造函数中的第一条语句）。<br>this（参数）：调用本类中另一种形式的构造函数（应该为构造函数中的第一条语句）。<br>6. this与super的区别<br>super:　它引用当前对象的直接父类中的成员（用来访问直接父类中被隐藏的父类中成员数据或函数，基类与派生类中有相同成员定义时如：super.变量名 super.成员函数据名（实参）<br>this：它代表当前对象名（在程序中易产生二义性之处，应使用this来指明当前对象；如果函数的形参与类中的成员数据同名，这时需用this来指明成员变量名）<br>super()和this()类似,区别是，super()在子类中调用父类的构造方法，this()在本类内调用本类的其它构造方法。<br>super()和this()均需放在构造方法内第一行。<br>尽管可以用this调用一个构造器，但却不能调用两个。<br>this和super不能同时出现在一个构造函数里面，因为this必然会调用其它的构造函数，其它的构造函数必然也会有super语句的存在，所以在同一个构造函数里面有相同的语句，就失去了语句的意义，编译器也不会通过。<br>this()和super()都指的是对象，所以，均不可以在static环境中使用。包括：static变量,static方法，static语句块。<br>从本质上讲，this是一个指向本对象的指针, 然而super是一个Java关键字。<br>7. static存在的主要意义<br>static的主要意义是在于创建独立于具体对象的域变量或者方法。以致于即使没有创建对象，也能使用属性和调用方法！</p><p>static关键字还有一个比较关键的作用就是 用来形成静态代码块以优化程序性能。static块可以置于类中的任何地方，类中可以有多个static块。在类初次被加载的时候，会按照static块的顺序来执行每个static块，并且只会执行一次。</p><p>为什么说static块可以用来优化程序性能，是因为它的特性:只会在类加载的时候执行一次。因此，很多时候会将一些只需要进行一次的初始化操作都放在static代码块中进行。</p><ol start="8"><li>static的独特之处<br>被static修饰的变量或者方法是独立于该类的任何对象，也就是说，这些变量和方法不属于任何一个实例对象，而是被类的实例对象所共享。<br>怎么理解 “被类的实例对象所共享” 这句话呢？就是说，一个类的静态成员，它是属于大伙的【大伙指的是这个类的多个对象实例，我们都知道一个类可以创建多个实例！】，所有的类对象共享的，不像成员变量是自个的【自个指的是这个类的单个实例对象】…我觉得我已经讲的很通俗了，你明白了咩？</li></ol><p>在该类被第一次加载的时候，就会去加载被static修饰的部分，而且只在类第一次使用时加载并进行初始化，注意这是第一次用就要初始化，后面根据需要是可以再次赋值的。<br>static变量值在类加载的时候分配空间，以后创建类对象的时候不会重新分配。赋值的话，是可以任意赋值的！<br>被static修饰的变量或者方法是优先于对象存在的，也就是说当一个类加载完毕之后，即便没有创建对象，也可以去访问。<br>9. static应用场景<br>因为static是被类的实例对象所共享，因此如果某个成员变量是被所有对象所共享的，那么这个成员变量就应该定义为静态变量。</p><p>因此比较常见的static应用场景有：</p><p>修饰成员变量<br>修饰成员方法<br>静态代码块<br>修饰类【只能修饰内部类也就是静态内部类】<br>静态导包<br>10. static注意事项<br>静态只能访问静态。<br>非静态既可以访问非静态的，也可以访问静态的。<br>7、流程控制语句</p><ol><li>break ,continue ,return 的区别及作用<br>break 跳出总上一层循环，不再执行循环(结束当前的循环体)</li></ol><p>continue 跳出本次循环，继续执行下次循环(结束正在执行的循环 进入下一个循环条件)</p><p>return 程序返回，不再执行下面的代码(结束当前的方法 直接返回)</p><ol start="2"><li>在 Java 中，如何跳出当前的多重嵌套循环<br>在Java中，要想跳出多重循环，可以在外面的循环语句前定义一个标号，然后在里层循环体的代码中使用带有标号的break 语句，即可跳出外层循环。例如：</li></ol><p>public static void main(String[] args) {<br>    ok:<br>    for (int i &#x3D; 0; i &lt; 10; i++) {<br>        for (int j &#x3D; 0; j &lt; 10; j++) {<br>            System.out.println(“i&#x3D;” + i + “,j&#x3D;” + j);<br>            if (j &#x3D;&#x3D; 5) {<br>                break ok;<br>            }</p><pre><code class="hljs">    &#125;&#125;</code></pre><p>}<br>三、面向对象<br>1、面向对象概述<br>面向对象和面向过程的区别<br>面向过程：</p><p>优点：性能比面向对象高，因为类调用时需要实例化，开销比较大，比较消耗资源;比如单片机、嵌入式开发、Linux&#x2F;Unix等一般采用面向过程开发，性能是最重要的因素。</p><p>缺点：没有面向对象易维护、易复用、易扩展</p><p>面向对象：</p><p>优点：易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统更加灵活、更加易于维护</p><p>缺点：性能比面向过程低</p><p>面向过程是具体化的，流程化的，解决一个问题，你需要一步一步的分析，一步一步的实现。</p><p>面向对象是模型化的，你只需抽象出一个类，这是一个封闭的盒子，在这里你拥有数据也拥有解决问题的方法。需要什么功能直接使用就可以了，不必去一步一步的实现，至于这个功能是如何实现的，管我们什么事？我们会用就可以了。</p><p>面向对象的底层其实还是面向过程，把面向过程抽象成类，然后封装，方便我们使用的就是面向对象了。</p><p>2、面向对象三大特性</p><ol><li>面向对象的特征有哪些方面<br>面向对象的特征主要有以下几个方面：</li></ol><p>抽象：抽象是将一类对象的共同特征总结出来构造类的过程，包括数据抽象和行为抽象两方面。抽象只关注对象有哪些属性和行为，并不关注这些行为的细节是什么。</p><p>封装</p><p>封装把一个对象的属性私有化，同时提供一些可以被外界访问的属性的方法，如果属性不想被外界访问，我们大可不必提供方法给外界访问。但是如果一个类没有提供给外界访问的方法，那么这个类也没有什么意义了。</p><p>继承</p><p>继承是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。通过使用继承我们能够非常方便地复用以前的代码。</p><p>关于继承如下 3 点请记住：</p><p>子类拥有父类非 private 的属性和方法。<br>子类可以拥有自己属性和方法，即子类可以对父类进行扩展。<br>子类可以用自己的方式实现父类的方法。（以后介绍）。<br>多态</p><p>所谓多态就是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，即一个引用变量到底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。</p><p>在Java中有两种形式可以实现多态：继承（多个子类对同一方法的重写）和接口（实现接口并覆盖接口中同一方法）。</p><p>其中Java 面向对象编程三大特性：封装 继承 多态</p><p>封装：隐藏对象的属性和实现细节，仅对外提供公共访问方式，将变化隔离，便于使用，提高复用性和安全性。</p><p>继承：继承是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。通过使用继承可以提高代码复用性。继承是多态的前提。</p><p>关于继承如下 3 点请记住：</p><p>子类拥有父类非 private 的属性和方法。</p><p>子类可以拥有自己属性和方法，即子类可以对父类进行扩展。</p><p>子类可以用自己的方式实现父类的方法。</p><p>多态性：父类或接口定义的引用变量可以指向子类或具体实现类的实例对象。提高了程序的拓展性。</p><p>在Java中有两种形式可以实现多态：继承（多个子类对同一方法的重写）和接口（实现接口并覆盖接口中同一方法）。</p><p>方法重载（overload）实现的是编译时的多态性（也称为前绑定），而方法重写（override）实现的是运行时的多态性（也称为后绑定）。</p><p>一个引用变量到底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。运行时的多态是面向对象最精髓的东西，要实现多态需要做两件事：</p><p>方法重写（子类继承父类并重写父类中已有的或抽象的方法）；<br>对象造型（用父类型引用子类型对象，这样同样的引用调用同样的方法就会根据子类对象的不同而表现出不同的行为）。<br>2. 什么是多态机制？Java语言是如何实现多态的？<br>所谓多态就是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，即一个引用变量倒底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。因为在程序运行时才确定具体的类，这样，不用修改源程序代码，就可以让引用变量绑定到各种不同的类实现上，从而导致该引用调用的具体方法随之改变，即不修改程序代码就可以改变程序运行时所绑定的具体代码，让程序可以选择多个运行状态，这就是多态性。</p><p>多态分为编译时多态和运行时多态。其中编辑时多态是静态的，主要是指方法的重载，它是根据参数列表的不同来区分不同的函数，通过编辑之后会变成两个不同的函数，在运行时谈不上多态。而运行时多态是动态的，它是通过动态绑定来实现的，也就是我们所说的多态性。</p><p>多态的实现</p><p>Java实现多态有三个必要条件：继承、重写、向上转型。</p><p>继承：在多态中必须存在有继承关系的子类和父类。</p><p>重写：子类对父类中某些方法进行重新定义，在调用这些方法时就会调用子类的方法。</p><p>向上转型：在多态中需要将子类的引用赋给父类对象，只有这样该引用才能够具备技能调用父类的方法和子类的方法。</p><p>只有满足了上述三个条件，我们才能够在同一个继承结构中使用统一的逻辑实现代码处理不同的对象，从而达到执行不同的行为。</p><p>对于Java而言，它多态的实现机制遵循一个原则：当超类对象引用变量引用子类对象时，被引用对象的类型而不是引用变量的类型决定了调用谁的成员方法，但是这个被调用的方法必须是在超类中定义过的，也就是说被子类覆盖的方法。</p><ol start="3"><li>面向对象五大基本原则是什么（可选）<br>单一职责原则SRP(Single Responsibility Principle)<br>类的功能要单一，不能包罗万象，跟杂货铺似的。</li></ol><p>开放封闭原则OCP(Open－Close Principle)<br>一个模块对于拓展是开放的，对于修改是封闭的，想要增加功能热烈欢迎，想要修改，哼，一万个不乐意。</p><p>里式替换原则LSP(the Liskov Substitution Principle LSP)<br>子类可以替换父类出现在父类能够出现的任何地方。比如你能代表你爸去你姥姥家干活。哈哈~~</p><p>依赖倒置原则DIP(the Dependency Inversion Principle DIP)<br>高层次的模块不应该依赖于低层次的模块，他们都应该依赖于抽象。抽象不应该依赖于具体实现，具体实现应该依赖于抽象。就是你出国要说你是中国人，而不能说你是哪个村子的。比如说中国人是抽象的，下面有具体的xx省，xx市，xx县。你要依赖的抽象是中国人，而不是你是xx村的。</p><p>接口分离原则ISP(the Interface Segregation Principle ISP)<br>设计时采用多个与特定客户类有关的接口比采用一个通用的接口要好。就比如一个手机拥有打电话，看视频，玩游戏等功能，把这几个功能拆分成不同的接口，比在一个接口里要好的多。</p><p>3、类与接口</p><ol><li>抽象类和接口的对比<br>抽象类是用来捕捉子类的通用特性的。接口是抽象方法的集合。</li></ol><p>从设计层面来说，抽象类是对类的抽象，是一种模板设计，接口是行为的抽象，是一种行为的规范。</p><p>相同点</p><p>接口和抽象类都不能实例化<br>都位于继承的顶端，用于被其他实现或继承<br>都包含抽象方法，其子类都必须覆写这些抽象方法</p><p>不同点</p><p>备注：Java8中接口中引入默认方法和静态方法，以此来减少抽象类和接口之间的差异。</p><p>现在，我们可以为接口提供默认实现的方法了，并且不用强制子类来实现它。</p><p>接口和抽象类各有优缺点，在接口和抽象类的选择上，必须遵守这样一个原则：</p><p>行为模型应该总是通过接口而不是抽象类定义，所以通常是优先选用接口，尽量少用抽象类。<br>选择抽象类的时候通常是如下情况：需要定义子类的行为，又要为子类提供通用的功能。<br>2. 普通类和抽象类有哪些区别？<br>普通类不能包含抽象方法，抽象类可以包含抽象方法。<br>抽象类不能直接实例化，普通类可以直接实例化。<br>3. 抽象类能使用 final 修饰吗？<br>不能，定义抽象类就是让其他类继承的，如果定义为 final 该类就不能被继承，这样彼此就会产生矛盾，所以 final 不能修饰抽象类</p><ol start="4"><li>创建一个对象用什么关键字？对象实例与对象引用有何不同？<br>new关键字，new创建对象实例（对象实例在堆内存中），对象引用指向对象实例（对象引用存放在栈内存中）。一个对象引用可以指向0个或1个对象（一根绳子可以不系气球，也可以系一个气球）;一个对象可以有n个引用指向它（可以用n条绳子系住一个气球）</li></ol><p>4、变量与方法</p><ol><li>成员变量与局部变量的区别有哪些<br>变量：在程序执行的过程中，在某个范围内其值可以发生改变的量。从本质上讲，变量其实是内存中的一小块区域</li></ol><p>成员变量：方法外部，类内部定义的变量</p><p>局部变量：类的方法中的变量。</p><p>成员变量和局部变量的区别</p><p>作用域</p><p>成员变量：针对整个类有效。<br>局部变量：只在某个范围内有效。(一般指的就是方法,语句体内)</p><p>存储位置</p><p>成员变量：随着对象的创建而存在，随着对象的消失而消失，存储在堆内存中。<br>局部变量：在方法被调用，或者语句被执行的时候存在，存储在栈内存中。当方法调用完，或者语句结束后，就自动释放。</p><p>生命周期</p><p>成员变量：随着对象的创建而存在，随着对象的消失而消失<br>局部变量：当方法调用完，或者语句结束后，就自动释放。</p><p>初始值</p><p>成员变量：有默认初始值。</p><p>局部变量：没有默认初始值，使用前必须赋值。</p><p>使用原则</p><p>在使用变量时需要遵循的原则为：就近原则<br>首先在局部范围找，有就使用；接着在成员位置找。</p><ol start="2"><li><p>在Java中定义一个不做事且没有参数的构造方法的作用<br>Java程序在执行子类的构造方法之前，如果没有用super()来调用父类特定的构造方法，则会调用父类中“没有参数的构造方法”。因此，如果父类中只定义了有参数的构造方法，而在子类的构造方法中又没有用super()来调用父类中特定的构造方法，则编译时将发生错误，因为Java程序在父类中找不到没有参数的构造方法可供执行。解决办法是在父类里加上一个不做事且没有参数的构造方法。</p></li><li><p>在调用子类构造方法之前会先调用父类没有参数的构造方法，其目的是？<br>帮助子类做初始化工作。</p></li><li><p>一个类的构造方法的作用是什么？若一个类没有声明构造方法，改程序能正确执行吗？为什么？<br>主要作用是完成对类对象的初始化工作。可以执行。因为一个类即使没有声明构造方法也会有默认的不带参数的构造方法。</p></li><li><p>构造方法有哪些特性？<br>名字与类名相同；</p></li></ol><p>没有返回值，但不能用void声明构造函数；</p><p>生成类的对象时自动执行，无需调用。</p><ol start="6"><li>静态变量和实例变量区别<br>静态变量： 静态变量由于不属于任何实例对象，属于类的，所以在内存中只会有一份，在类的加载过程中，JVM只为静态变量分配一次内存空间。</li></ol><p>实例变量： 每次创建对象，都会为每个对象分配成员变量内存空间，实例变量是属于实例对象的，在内存中，创建几次对象，就有几份成员变量。</p><ol start="7"><li>静态变量与普通变量区别<br>static变量也称作静态变量，静态变量和非静态变量的区别是：静态变量被所有的对象所共享，在内存中只有一个副本，它当且仅当在类初次加载时会被初始化。而非静态变量是对象所拥有的，在创建对象的时候被初始化，存在多个副本，各个对象拥有的副本互不影响。</li></ol><p>还有一点就是static成员变量的初始化顺序按照定义的顺序进行初始化。</p><ol start="8"><li>静态方法和实例方法有何不同？<br>静态方法和实例方法的区别主要体现在两个方面：</li></ol><p>在外部调用静态方法时，可以使用”类名.方法名”的方式，也可以使用”对象名.方法名”的方式。而实例方法只有后面这种方式。也就是说，调用静态方法可以无需创建对象。<br>静态方法在访问本类的成员时，只允许访问静态成员（即静态成员变量和静态方法），而不允许访问实例成员变量和实例方法；实例方法则无此限制<br>9. 在一个静态方法内调用一个非静态成员为什么是非法的？<br>由于静态方法可以不通过对象进行调用，因此在静态方法里，不能调用其他非静态变量，也不可以访问非静态变量成员。</p><ol start="10"><li>什么是方法的返回值？返回值的作用是什么？<br>方法的返回值是指我们获取到的某个方法体中的代码执行后产生的结果！（前提是该方法可能产生结果）。返回值的作用:接收出结果，使得它可以用于其他的操作！</li></ol><p>5、内部类</p><ol><li><p>什么是内部类？<br>在Java中，可以将一个类的定义放在另外一个类的定义内部，这就是内部类。内部类本身就是类的一个属性，与其他属性定义方式一致。</p></li><li><p>内部类的分类有哪些<br>内部类可以分为四种：成员内部类、局部内部类、匿名内部类和静态内部类。</p></li></ol><p>静态内部类</p><p>定义在类内部的静态类，就是静态内部类。</p><p>public class Outer {</p><pre><code class="hljs">private static int radius = 1; static class StaticInner &#123;    public void visit() &#123;        System.out.println(&quot;visit outer static  variable:&quot; + radius);    &#125;&#125;</code></pre><p>}</p><p>静态内部类可以访问外部类所有的静态变量，而不可访问外部类的非静态变量；静态内部类的创建方式，new 外部类.静态内部类()，如下：</p><p>Outer.StaticInner inner &#x3D; new Outer.StaticInner();<br>inner.visit();<br>成员内部类</p><p>定义在类内部，成员位置上的非静态类，就是成员内部类。</p><p>public class Outer {</p><pre><code class="hljs">private static  int radius = 1;private int count =2; class Inner &#123;    public void visit() &#123;        System.out.println(&quot;visit outer static  variable:&quot; + radius);        System.out.println(&quot;visit outer   variable:&quot; + count);    &#125;&#125;</code></pre><p>}</p><p>成员内部类可以访问外部类所有的变量和方法，包括静态和非静态，私有和公有。成员内部类依赖于外部类的实例，它的创建方式外部类实例.new 内部类()，如下：</p><p>Outer outer &#x3D; new Outer();<br>Outer.Inner inner &#x3D; outer.new Inner();<br>inner.visit();<br>局部内部类</p><p>定义在方法中的内部类，就是局部内部类。</p><p>public class Outer {</p><pre><code class="hljs">private  int out_a = 1;private static int STATIC_b = 2; public void testFunctionClass()&#123;    int inner_c =3;    class Inner &#123;        private void fun()&#123;            System.out.println(out_a);            System.out.println(STATIC_b);            System.out.println(inner_c);        &#125;    &#125;    Inner  inner = new Inner();    inner.fun();&#125;public static void testStaticFunctionClass()&#123;    int d =3;    class Inner &#123;        private void fun()&#123;            // System.out.println(out_a); 编译错误，定义在静态方法中的局部类不可以访问外部类的实例变量            System.out.println(STATIC_b);            System.out.println(d);        &#125;    &#125;    Inner  inner = new Inner();    inner.fun();&#125;</code></pre><p>}<br>定义在实例方法中的局部类可以访问外部类的所有变量和方法，定义在静态方法中的局部类只能访问外部类的静态变量和方法。局部内部类的创建方式，在对应方法内，new 内部类()，如下：</p><p> public static void testStaticFunctionClass(){<br>    class Inner {<br>    }<br>    Inner  inner &#x3D; new Inner();<br> }<br>匿名内部类</p><p>匿名内部类就是没有名字的内部类，日常开发中使用的比较多。</p><p>public class Outer {</p><pre><code class="hljs">private void test(final int i) &#123;    new Service() &#123;        public void method() &#123;            for (int j = 0; j &lt; i; j++) &#123;                System.out.println(&quot;匿名内部类&quot; );            &#125;        &#125;    &#125;.method();&#125;</code></pre><p> }<br> &#x2F;&#x2F;匿名内部类必须继承或实现一个已有的接口<br> interface Service{<br>    void method();<br>}<br>除了没有名字，匿名内部类还有以下特点：</p><p>匿名内部类必须继承一个抽象类或者实现一个接口。<br>匿名内部类不能定义任何静态成员和静态方法。<br>当所在的方法的形参需要被匿名内部类使用时，必须声明为 final。<br>匿名内部类不能是抽象的，它必须要实现继承的类或者实现的接口的所有抽象方法。<br>匿名内部类创建方式：</p><p>new 类&#x2F;接口{<br>  &#x2F;&#x2F;匿名内部类实现部分<br>}<br>3. 内部类的优点<br>我们为什么要使用内部类呢？因为它有以下优点：</p><p>一个内部类对象可以访问创建它的外部类对象的内容，包括私有数据！<br>内部类不为同一包的其他类所见，具有很好的封装性；<br>内部类有效实现了“多重继承”，优化 java 单继承的缺陷。<br>匿名内部类可以很方便的定义回调。<br>4. 内部类有哪些应用场景<br>一些多算法场合<br>解决一些非面向对象的语句块。<br>适当使用内部类，使得代码更加灵活和富有扩展性。<br>当某个类除了它的外部类，不再被其他的类使用时。<br>5. 局部内部类和匿名内部类访问局部变量的时候，为什么变量必须要加上final？<br>局部内部类和匿名内部类访问局部变量的时候，为什么变量必须要加上final呢？它内部原理是什么呢？</p><p>先看这段代码：</p><p>public class Outer {</p><pre><code class="hljs">void outMethod()&#123;    final int a =10;    class Inner &#123;        void innerMethod()&#123;            System.out.println(a);        &#125;     &#125;&#125;</code></pre><p>}<br>以上例子，为什么要加final呢？是因为生命周期不一致， 局部变量直接存储在栈中，当方法执行结束后，非final的局部变量就被销毁。而局部内部类对局部变量的引用依然存在，如果局部内部类要调用局部变量时，就会出错。加了final，可以确保局部内部类使用的变量与外层的局部变量区分开，解决了这个问题。</p><ol start="6"><li><p>内部类相关，看程序说出运行结果<br>public class Outer {<br> private int age &#x3D; 12;</p><p> class Inner {<br> private int age &#x3D; 13;<br> public void print() {<br>     int age &#x3D; 14;<br>     System.out.println(“局部变量：” + age);<br>     System.out.println(“内部类变量：” + this.age);<br>     System.out.println(“外部类变量：” + Outer.this.age);<br> }<br> }</p><p> public static void main(String[] args) {<br> Outer.Inner in &#x3D; new Outer().new Inner();<br> in.print();<br> }</p></li></ol><p>}<br>运行结果：</p><p>局部变量：14<br>内部类变量：13<br>外部类变量：12<br>6、重写与重载</p><ol><li><p>构造器（constructor）是否可被重写（override）<br>构造器不能被继承，因此不能被重写，但可以被重载。</p></li><li><p>重载（Overload）和重写（Override）的区别。重载的方法能否根据返回类型进行区分？<br>方法的重载和重写都是实现多态的方式，区别在于前者实现的是编译时的多态性，而后者实现的是运行时的多态性。</p></li></ol><p>重载：发生在同一个类中，方法名相同参数列表不同（参数类型不同、个数不同、顺序不同），与方法返回值和访问修饰符无关，即重载的方法不能根据返回类型进行区分</p><p>重写：发生在父子类中，方法名、参数列表必须相同，返回值小于等于父类，抛出的异常小于等于父类，访问修饰符大于等于父类（里氏代换原则）；如果父类方法访问修饰符为private则子类中就不是重写。</p><p>7、对象相等判断</p><ol><li>&#x3D;&#x3D; 和 equals 的区别是什么<br>&#x3D;&#x3D; : 它的作用是判断两个对象的地址是不是相等。即，判断两个对象是不是同一个对象。(基本数据类型 &#x3D;&#x3D; 比较的是值，引用数据类型 &#x3D;&#x3D; 比较的是内存地址)</li></ol><p>equals() : 它的作用也是判断两个对象是否相等。但它一般有两种使用情况：</p><p>情况1：类没有覆盖 equals() 方法。则通过 equals() 比较该类的两个对象时，等价于通过“&#x3D;&#x3D;”比较这两个对象。</p><p>情况2：类覆盖了 equals() 方法。一般，我们都覆盖 equals() 方法来两个对象的内容相等；若它们的内容相等，则返回 true (即，认为这两个对象相等)。</p><p>举个例子：</p><p>public class test1 {<br>    public static void main(String[] args) {<br>        String a &#x3D; new String(“ab”); &#x2F;&#x2F; a 为一个引用<br>        String b &#x3D; new String(“ab”); &#x2F;&#x2F; b为另一个引用,对象的内容一样<br>        String aa &#x3D; “ab”; &#x2F;&#x2F; 放在常量池中<br>        String bb &#x3D; “ab”; &#x2F;&#x2F; 从常量池中查找<br>        if (aa &#x3D;&#x3D; bb) &#x2F;&#x2F; true<br>            System.out.println(“aa&#x3D;&#x3D;bb”);<br>        if (a &#x3D;&#x3D; b) &#x2F;&#x2F; false，非同一对象<br>            System.out.println(“a&#x3D;&#x3D;b”);<br>        if (a.equals(b)) &#x2F;&#x2F; true<br>            System.out.println(“aEQb”);<br>        if (42 &#x3D;&#x3D; 42.0) { &#x2F;&#x2F; true<br>            System.out.println(“true”);<br>        }<br>    }<br>}<br>说明：</p><p>String中的equals方法是被重写过的，因为object的equals方法是比较的对象的内存地址，而String的equals方法比较的是对象的值。<br>当创建String类型的对象时，虚拟机会在常量池中查找有没有已经存在的值和要创建的值相同的对象，如果有就把它赋给当前引用。如果没有就在常量池中重新创建一个String对象。</p><ol start="2"><li>hashCode 与 equals (重要)<br>HashSet如何检查重复</li></ol><p>两个对象的 hashCode() 相同，则 equals() 也一定为 true，对吗？</p><p>hashCode和equals方法的关系</p><p>面试官可能会问你：“你重写过 hashcode 和 equals 么，为什么重写equals时必须重写hashCode方法？”</p><p>hashCode()介绍</p><p>hashCode() 的作用是获取哈希码，也称为散列码；它实际上是返回一个int整数。这个哈希码的作用是确定该对象在哈希表中的索引位置。hashCode() 定义在JDK的Object.java中，这就意味着Java中的任何类都包含有hashCode()函数。</p><p>散列表存储的是键值对(key-value)，它的特点是：能根据“键”快速的检索出对应的“值”。这其中就利用到了散列码！（可以快速找到所需要的对象）</p><p>为什么要有 hashCode</p><p>我们以“HashSet 如何检查重复”为例子来说明为什么要有 hashCode：</p><p>当你把对象加入 HashSet 时，HashSet 会先计算对象的 hashcode 值来判断对象加入的位置，同时也会与其他已经加入的对象的 hashcode 值作比较，如果没有相符的hashcode，HashSet会假设对象没有重复出现。但是如果发现有相同 hashcode 值的对象，这时会调用 equals()方法来检查 hashcode 相等的对象是否真的相同。如果两者相同，HashSet 就不会让其加入操作成功。如果不同的话，就会重新散列到其他位置。（摘自我的Java启蒙书《Head first java》第二版）。这样我们就大大减少了 equals 的次数，相应就大大提高了执行速度。</p><p>hashCode()与equals()的相关规定</p><p>如果两个对象相等，则hashcode一定也是相同的</p><p>两个对象相等，对两个对象分别调用equals方法都返回true</p><p>两个对象有相同的hashcode值，它们也不一定是相等的</p><p>因此，equals 方法被覆盖过，则 hashCode 方法也必须被覆盖</p><p>hashCode() 的默认行为是对堆上的对象产生独特值。如果没有重写 hashCode()，则该 class 的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）</p><p>8、值传递</p><ol><li><p>当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递<br>是值传递。Java 语言的方法调用只支持参数的值传递。当一个对象实例作为一个参数被传递到方法中时，参数的值就是对该对象的引用。对象的属性可以在被调用过程中被改变，但对对象引用的改变是不会影响到调用者的</p></li><li><p>为什么 Java 中只有值传递<br>首先回顾一下在程序设计语言中有关将参数传递给方法（或函数）的一些专业术语。按值调用(call by value)表示方法接收的是调用者提供的值，而按引用调用（call by reference)表示方法接收的是调用者提供的变量地址。一个方法可以修改传递引用所对应的变量值，而不能修改传递值调用所对应的变量值。 它用来描述各种程序设计语言（不只是Java)中方法参数传递方式。</p></li></ol><p>Java程序设计语言总是采用按值调用。也就是说，方法得到的是所有参数值的一个拷贝，也就是说，方法不能修改传递给它的任何参数变量的内容。</p><p>下面通过 3 个例子来给大家说明</p><p>example 1</p><p>public static void main(String[] args) {<br>    int num1 &#x3D; 10;<br>    int num2 &#x3D; 20;</p><pre><code class="hljs">swap(num1, num2); System.out.println(&quot;num1 = &quot; + num1);System.out.println(&quot;num2 = &quot; + num2);</code></pre><p>}</p><p>public static void swap(int a, int b) {<br>    int temp &#x3D; a;<br>    a &#x3D; b;<br>    b &#x3D; temp;</p><pre><code class="hljs">System.out.println(&quot;a = &quot; + a);System.out.println(&quot;b = &quot; + b);</code></pre><p>}<br>结果：</p><p>a &#x3D; 20<br>b &#x3D; 10<br>num1 &#x3D; 10<br>num2 &#x3D; 20<br>解析：</p><p>在swap方法中，a、b的值进行交换，并不会影响到 num1、num2。因为，a、b中的值，只是从 num1、num2 的复制过来的。也就是说，a、b相当于num1、num2 的副本，副本的内容无论怎么修改，都不会影响到原件本身。</p><p>通过上面例子，我们已经知道了一个方法不能修改一个基本数据类型的参数，而对象引用作为参数就不一样，请看 example2.</p><p>example 2</p><pre><code class="hljs">public static void main(String[] args) &#123;    int[] arr = &#123; 1, 2, 3, 4, 5 &#125;;    System.out.println(arr[0]);    change(arr);    System.out.println(arr[0]);&#125; public static void change(int[] array) &#123;    // 将数组的第一个元素变为0    array[0] = 0;&#125;</code></pre><p>结果：</p><p>1<br>0<br>解析：</p><p>array 被初始化 arr 的拷贝也就是一个对象的引用，也就是说 array 和 arr 指向的时同一个数组对象。 因此，外部对引用对象的改变会反映到所对应的对象上。</p><p>通过 example2 我们已经看到，实现一个改变对象参数状态的方法并不是一件难事。理由很简单，方法得到的是对象引用的拷贝，对象引用及其他的拷贝同时引用同一个对象。</p><p>很多程序设计语言（特别是，C++和Pascal)提供了两种参数传递的方式：值调用和引用调用。有些程序员（甚至本书的作者）认为Java程序设计语言对对象采用的是引用调用，实际上，这种理解是不对的。由于这种误解具有一定的普遍性，所以下面给出一个反例来详细地阐述一下这个问题。</p><p>example 3</p><p>public class Test {</p><pre><code class="hljs">public static void main(String[] args) &#123;    // TODO Auto-generated method stub    Student s1 = new Student(&quot;小张&quot;);    Student s2 = new Student(&quot;小李&quot;);    Test.swap(s1, s2);    System.out.println(&quot;s1:&quot; + s1.getName());    System.out.println(&quot;s2:&quot; + s2.getName());&#125; public static void swap(Student x, Student y) &#123;    Student temp = x;    x = y;    y = temp;    System.out.println(&quot;x:&quot; + x.getName());    System.out.println(&quot;y:&quot; + y.getName());&#125;</code></pre><p>}</p><p>结果：</p><p>x:小李<br>y:小张<br>s1:小张<br>s2:小李<br>解析：</p><p>交换之前：</p><p>交换之后：</p><p>通过上面两张图可以很清晰的看出： 方法并没有改变存储在变量 s1 和 s2 中的对象引用。swap方法的参数x和y被初始化为两个对象引用的拷贝，这个方法交换的是这两个拷贝</p><p>总结</p><p>Java程序设计语言对对象采用的不是引用调用，实际上，对象引用是按值传递的。</p><p>下面再总结一下Java中方法参数的使用情况：</p><p>一个方法不能修改一个基本数据类型的参数（即数值型或布尔型》<br>一个方法可以改变一个对象参数的状态。<br>一个方法不能让对象参数引用一个新的对象。<br>3. 值传递和引用传递有什么区别<br>值传递：指的是在方法调用时，传递的参数是按值的拷贝传递，传递的是值的拷贝，也就是说传递后就互不相关了。</p><p>引用传递：指的是在方法调用时，传递的参数是按引用进行传递，其实传递的引用的地址，也就是变量所对应的内存空间的地址。传递的是值的引用，也就是说传递前和传递后都指向同一个引用（也就是同一个内存空间）。</p><p>9、Java包</p><ol><li>JDK 中常用的包有哪些<br>java.lang：这个是系统的基础类；<br>java.io：这里面是所有输入输出有关的类，比如文件操作等；<br>java.nio：为了完善 io 包中的功能，提高 io 包中性能而写的一个新包；<br>java.net：这里面是与网络有关的类；<br>java.util：这个是系统辅助类，特别是集合类；<br>java.sql：这个是数据库操作的类。</li><li>import java和javax有什么区别<br>刚开始的时候 JavaAPI 所必需的包是 java 开头的包，javax 当时只是扩展 API 包来说使用。然而随着时间的推移，javax 逐渐的扩展成为 Java API 的组成部分。但是，将扩展从 javax 包移动到 java 包将是太麻烦了，最终会破坏一堆现有的代码。因此，最终决定 javax 包将成为标准API的一部分。</li></ol><p>所以，实际上java和javax没有区别。这都是一个名字。</p><p>四、IO流<br>1、java 中 IO 流分为几种?<br>按照流的流向分，可以分为输入流和输出流；<br>按照操作单元划分，可以划分为字节流和字符流；<br>按照流的角色划分为节点流和处理流。<br>Java Io流共涉及40多个类，这些类看上去很杂乱，但实际上很有规则，而且彼此之间存在非常紧密的联系， Java I0流的40多个类都是从如下4个抽象类基类中派生出来的。</p><p>InputStream&#x2F;Reader: 所有的输入流的基类，前者是字节输入流，后者是字符输入流。<br>OutputStream&#x2F;Writer: 所有输出流的基类，前者是字节输出流，后者是字符输出流。<br>按操作方式分类结构图：</p><p>按操作对象分类结构图：</p><p>2、BIO,NIO,AIO 有什么区别?<br>简答<br>BIO：Block IO 同步阻塞式 IO，就是我们平常使用的传统 IO，它的特点是模式简单使用方便，并发处理能力低。<br>NIO：Non IO 同步非阻塞 IO，是传统 IO 的升级，客户端和服务器端通过 Channel（通道）通讯，实现了多路复用。<br>AIO：Asynchronous IO 是 NIO 的升级，也叫 NIO2，实现了异步非堵塞 IO ，异步 IO 的操作基于事件和回调机制。<br>详细回答<br>BIO (Blocking I&#x2F;O): 同步阻塞I&#x2F;O模式，数据的读取写入必须阻塞在一个线程内等待其完成。在活动连接数不是特别高（小于单机1000）的情况下，这种模型是比较不错的，可以让每一个连接专注于自己的 I&#x2F;O 并且编程模型简单，也不用过多考虑系统的过载、限流等问题。线程池本身就是一个天然的漏斗，可以缓冲一些系统处理不了的连接或请求。但是，当面对十万甚至百万级连接的时候，传统的 BIO 模型是无能为力的。因此，我们需要一种更高效的 I&#x2F;O 处理模型来应对更高的并发量。<br>NIO (New I&#x2F;O): NIO是一种同步非阻塞的I&#x2F;O模型，在Java 1.4 中引入了NIO框架，对应 java.nio 包，提供了 Channel , Selector，Buffer等抽象。NIO中的N可以理解为Non-blocking，不单纯是New。它支持面向缓冲的，基于通道的I&#x2F;O操作方法。 NIO提供了与传统BIO模型中的 Socket 和 ServerSocket 相对应的 SocketChannel 和 ServerSocketChannel 两种不同的套接字通道实现,两种通道都支持阻塞和非阻塞两种模式。阻塞模式使用就像传统中的支持一样，比较简单，但是性能和可靠性都不好；非阻塞模式正好与之相反。对于低负载、低并发的应用程序，可以使用同步阻塞I&#x2F;O来提升开发速率和更好的维护性；对于高负载、高并发的（网络）应用，应使用 NIO 的非阻塞模式来开发<br>AIO (Asynchronous I&#x2F;O): AIO 也就是 NIO 2。在 Java 7 中引入了 NIO 的改进版 NIO 2,它是异步非阻塞的IO模型。异步 IO 是基于事件和回调机制实现的，也就是应用操作之后会直接返回，不会堵塞在那里，当后台处理完成，操作系统会通知相应的线程进行后续的操作。AIO 是异步IO的缩写，虽然 NIO 在网络操作中，提供了非阻塞的方法，但是 NIO 的 IO 行为还是同步的。对于 NIO 来说，我们的业务线程是在 IO 操作准备好时，得到通知，接着就由这个线程自行进行 IO 操作，IO操作本身是同步的。查阅网上相关资料，我发现就目前来说 AIO 的应用还不是很广泛，Netty 之前也尝试使用过 AIO，不过又放弃了。<br>3、Files的常用方法都有哪些？<br>Files. exists()：检测文件路径是否存在。<br>Files. createFile()：创建文件。<br>Files. createDirectory()：创建文件夹。<br>Files. delete()：删除一个文件或目录。<br>Files. copy()：复制文件。<br>Files. move()：移动文件。<br>Files. size()：查看文件个数。<br>Files. read()：读取文件。<br>Files. write()：写入文件。<br>五、反射<br>1、什么是反射机制？<br>JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。</p><p>静态编译和动态编译</p><p>静态编译：在编译时确定类型，绑定对象<br>动态编译：运行时确定类型，绑定对象</p><p>2、反射机制优缺点<br>优点： 运行期类型的判断，动态加载类，提高代码灵活度。<br>缺点： 性能瓶颈：反射相当于一系列解释操作，通知 JVM 要做的事情，性能比直接的java代码要慢很多。<br>3、 反射机制的应用场景有哪些？<br>反射是框架设计的灵魂。</p><p>在我们平时的项目开发过程中，基本上很少会直接使用到反射机制，但这不能说明反射机制没有用，实际上有很多设计、开发都与反射机制有关，例如模块化的开发，通过反射去调用对应的字节码；动态代理设计模式也采用了反射机制，还有我们日常使用的 Spring／Hibernate 等框架也大量使用到了反射机制。</p><p>举例：①我们在使用JDBC连接数据库时使用Class.forName()通过反射加载数据库的驱动程序；②Spring框架也用到很多反射机制，最经典的就是xml的配置模式。Spring 通过 XML 配置模式装载 Bean 的过程：1) 将程序内所有 XML 或 Properties 配置文件加载入内存中; 2)Java类里面解析xml或properties里面的内容，得到对应实体类的字节码字符串以及相关的属性信息; 3)使用反射机制，根据这个字符串获得某个类的Class实例; 4)动态配置实例的属性</p><p>4、Java获取反射的三种方法<br>1.通过new对象实现反射机制</p><p>2.通过路径实现反射机制</p><p>3.通过类名实现反射机制</p><p>public class Student {<br>    private int id;<br>    String name;<br>    protected boolean sex;<br>    public float score;<br>}<br>public class Get {<br>    &#x2F;&#x2F;获取反射机制三种方式<br>    public static void main(String[] args) throws ClassNotFoundException {<br>        &#x2F;&#x2F;方式一(通过建立对象)<br>        Student stu &#x3D; new Student();<br>        Class classobj1 &#x3D; stu.getClass();<br>        System.out.println(classobj1.getName());<br>        &#x2F;&#x2F;方式二（所在通过路径-相对路径）<br>        Class classobj2 &#x3D; Class.forName(“fanshe.Student”);<br>        System.out.println(classobj2.getName());<br>        &#x2F;&#x2F;方式三（通过类名）<br>        Class classobj3 &#x3D; Student.class;<br>        System.out.println(classobj3.getName());<br>    }<br>}<br>六、网络编程<br>网络编程的可以查看这篇文章：<a href="https://thinkwon.blog.csdn.net/article/details/104390612">https://thinkwon.blog.csdn.net/article/details/104390612</a></p><p>内容不仅包括TCP&#x2F;IP协议和三次握手四次挥手的知识，还包括计算机网络体系结构，HTTP协议，get请求和post请求区别，session和cookie的区别等，欢迎大家阅读。</p><p>七、常用API<br>1、String相关</p><ol><li><p>字符型常量和字符串常量的区别<br>形式上: 字符常量是单引号引起的一个字符 字符串常量是双引号引起的若干个字符<br>含义上: 字符常量相当于一个整形值(ASCII值),可以参加表达式运算 字符串常量代表一个地址值(该字符串在内存中存放位置)<br>占内存大小：字符常量只占一个字节 字符串常量占若干个字节(至少一个字符结束标志)</p></li><li><p>什么是字符串常量池？<br>字符串常量池位于堆内存中，专门用来存储字符串常量，可以提高内存的使用率，避免开辟多块空间存储相同的字符串，在创建字符串时 JVM 会首先检查字符串常量池，如果该字符串已经存在池中，则返回它的引用，如果不存在，则实例化一个字符串放到池中，并返回其引用。</p></li><li><p>String 是最基本的数据类型吗？<br>不是。Java 中的基本数据类型只有 8 个 ：byte、short、int、long、float、double、char、boolean；除了基本类型（primitive type），剩下的都是引用类型（referencetype），Java 5 以后引入的枚举类型也算是一种比较特殊的引用类型。</p></li></ol><p>这是很基础的东西，但是很多初学者却容易忽视，Java 的 8 种基本数据类型中不包括 String，基本数据类型中用来描述文本数据的是 char，但是它只能表示单个字符，比如 ‘a’,‘好’ 之类的，如果要描述一段文本，就需要用多个 char 类型的变量，也就是一个 char 类型数组，比如“你好” 就是长度为2的数组 char[] chars &#x3D; {‘你’,‘好’};</p><p>但是使用数组过于麻烦，所以就有了 String，String 底层就是一个 char 类型的数组，只是使用的时候开发者不需要直接操作底层数组，用更加简便的方式即可完成对字符串的使用。</p><ol start="4"><li>String有哪些特性<br>不变性：String 是只读字符串，是一个典型的 immutable 对象，对它进行任何操作，其实都是创建一个新的对象，再把引用指向该对象。不变模式的主要作用在于当一个对象需要被多线程共享并频繁访问时，可以保证数据的一致性。</li></ol><p>常量池优化：String 对象创建之后，会在字符串常量池中进行缓存，如果下次创建同样的对象时，会直接返回缓存的引用。</p><p>final：使用 final 来定义 String 类，表示 String 类不能被继承，提高了系统的安全性。</p><ol start="5"><li>String为什么是不可变的吗？<br>简单来说就是String类利用了final修饰的char类型数组存储字符，源码如下图所以：</li></ol><p>&#x2F;** The value is used for character storage. *&#x2F;<br>private final char value[];<br>6. String真的是不可变的吗？<br>我觉得如果别人问这个问题的话，回答不可变就可以了。 下面只是给大家看两个有代表性的例子：</p><ol><li>String不可变但不代表引用不可以变</li></ol><p>String str &#x3D; “Hello”;<br>str &#x3D; str + “ World”;<br>System.out.println(“str&#x3D;” + str);<br>结果：</p><p>str&#x3D;Hello World<br>解析：</p><p>实际上，原来String的内容是不变的，只是str由原来指向”Hello”的内存地址转为指向”Hello World”的内存地址而已，也就是说多开辟了一块内存区域给”Hello World”字符串。</p><ol start="2"><li>通过反射是可以修改所谓的“不可变”对象</li></ol><p>&#x2F;&#x2F; 创建字符串”Hello World”， 并赋给引用s<br>String s &#x3D; “Hello World”;</p><p>System.out.println(“s &#x3D; “ + s); &#x2F;&#x2F; Hello World</p><p>&#x2F;&#x2F; 获取String类中的value字段<br>Field valueFieldOfString &#x3D; String.class.getDeclaredField(“value”);</p><p>&#x2F;&#x2F; 改变value属性的访问权限<br>valueFieldOfString.setAccessible(true);</p><p>&#x2F;&#x2F; 获取s对象上的value属性的值<br>char[] value &#x3D; (char[]) valueFieldOfString.get(s);</p><p>&#x2F;&#x2F; 改变value所引用的数组中的第5个字符<br>value[5] &#x3D; ‘_’;</p><p>System.out.println(“s &#x3D; “ + s); &#x2F;&#x2F; Hello_World</p><p>结果：</p><p>s &#x3D; Hello World<br>s &#x3D; Hello_World<br>解析：</p><p>用反射可以访问私有成员， 然后反射出String对象中的value属性， 进而改变通过获得的value引用改变数组的结构。但是一般我们不会这么做，这里只是简单提一下有这个东西。</p><ol start="7"><li><p>是否可以继承 String 类<br>String 类是 final 类，不可以被继承。</p></li><li><p>String str&#x3D;”i”与 String str&#x3D;new String(“i”)一样吗？<br>不一样，因为内存的分配方式不一样。String str&#x3D;”i”的方式，java 虚拟机会将其分配到常量池中；而 String str&#x3D;new String(“i”) 则会被分到堆内存中。</p></li><li><p>String s &#x3D; new String(“xyz”);创建了几个字符串对象<br>两个对象，一个是静态区的”xyz”，一个是用new创建在堆上的对象。</p></li></ol><p>String str1 &#x3D; “hello”; &#x2F;&#x2F;str1指向静态区<br>String str2 &#x3D; new String(“hello”);  &#x2F;&#x2F;str2指向堆上的对象<br>String str3 &#x3D; “hello”;<br>String str4 &#x3D; new String(“hello”);<br>System.out.println(str1.equals(str2)); &#x2F;&#x2F;true<br>System.out.println(str2.equals(str4)); &#x2F;&#x2F;true<br>System.out.println(str1 &#x3D;&#x3D; str3); &#x2F;&#x2F;true<br>System.out.println(str1 &#x3D;&#x3D; str2); &#x2F;&#x2F;false<br>System.out.println(str2 &#x3D;&#x3D; str4); &#x2F;&#x2F;false<br>System.out.println(str2 &#x3D;&#x3D; “hello”); &#x2F;&#x2F;false<br>str2 &#x3D; str1;<br>System.out.println(str2 &#x3D;&#x3D; “hello”); &#x2F;&#x2F;true<br>10. 如何将字符串反转？<br>使用 StringBuilder 或者 stringBuffer 的 reverse() 方法。</p><p>示例代码：</p><p>&#x2F;&#x2F; StringBuffer reverse<br>StringBuffer stringBuffer &#x3D; new StringBuffer();<br>stringBuffer. append(“abcdefg”);<br>System. out. println(stringBuffer. reverse()); &#x2F;&#x2F; gfedcba<br>&#x2F;&#x2F; StringBuilder reverse<br>StringBuilder stringBuilder &#x3D; new StringBuilder();<br>stringBuilder. append(“abcdefg”);<br>System. out. println(stringBuilder. reverse()); &#x2F;&#x2F; gfedcba</p><ol start="11"><li><p>数组有没有 length()方法？String 有没有 length()方法<br>数组没有 length()方法 ，有 length 的属性。String 有 length()方法。JavaScript中，获得字符串的长度是通过 length 属性得到的，这一点容易和 Java 混淆。</p></li><li><p>String 类的常用方法都有那些？<br>indexOf()：返回指定字符的索引。<br>charAt()：返回指定索引处的字符。<br>replace()：字符串替换。<br>trim()：去除字符串两端空白。<br>split()：分割字符串，返回一个分割后的字符串数组。<br>getBytes()：返回字符串的 byte 类型数组。<br>length()：返回字符串长度。<br>toLowerCase()：将字符串转成小写字母。<br>toUpperCase()：将字符串转成大写字符。<br>substring()：截取字符串。<br>equals()：字符串比较。</p></li><li><p>在使用 HashMap 的时候，用 String 做 key 有什么好处？<br>HashMap 内部实现是通过 key 的 hashcode 来确定 value 的存储位置，因为字符串是不可变的，所以当创建字符串时，它的 hashcode 被缓存下来，不需要再次计算，所以相比于其他对象更快。</p></li><li><p>String和StringBuffer、StringBuilder的区别是什么？String为什么是不可变的<br>可变性</p></li></ol><p>String类中使用字符数组保存字符串，private　final　char　value[]，所以string对象是不可变的。StringBuilder与StringBuffer都继承自AbstractStringBuilder类，在AbstractStringBuilder中也是使用字符数组保存字符串，char[] value，这两种对象都是可变的。</p><p>线程安全性</p><p>String中的对象是不可变的，也就可以理解为常量，线程安全。AbstractStringBuilder是StringBuilder与StringBuffer的公共父类，定义了一些字符串的基本操作，如expandCapacity、append、insert、indexOf等公共方法。StringBuffer对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。StringBuilder并没有对方法进行加同步锁，所以是非线程安全的。</p><p>性能</p><p>每次对String 类型进行改变的时候，都会生成一个新的String对象，然后将指针指向新的String 对象。StringBuffer每次都会对StringBuffer对象本身进行操作，而不是生成新的对象并改变对象引用。相同情况下使用StirngBuilder 相比使用StringBuffer 仅能获得10%~15% 左右的性能提升，但却要冒多线程不安全的风险。</p><p>对于三者使用的总结</p><p>如果要操作少量的数据用 &#x3D; String</p><p>单线程操作字符串缓冲区 下操作大量数据 &#x3D; StringBuilder</p><p>多线程操作字符串缓冲区 下操作大量数据 &#x3D; StringBuffer</p><p>2、Date相关<br>3、包装类相关</p><ol><li>自动装箱与拆箱<br>装箱：将基本类型用它们对应的引用类型包装起来；</li></ol><p>拆箱：将包装类型转换为基本数据类型；</p><ol start="2"><li>int 和 Integer 有什么区别<br>Java 是一个近乎纯洁的面向对象编程语言，但是为了编程的方便还是引入了基本数据类型，但是为了能够将这些基本数据类型当成对象操作，Java 为每一个基本数据类型都引入了对应的包装类型（wrapper class），int 的包装类就是 Integer，从 Java 5 开始引入了自动装箱&#x2F;拆箱机制，使得二者可以相互转换。</li></ol><p>Java 为每个原始类型提供了包装类型：</p><p>原始类型: boolean，char，byte，short，int，long，float，double</p><p>包装类型：Boolean，Character，Byte，Short，Integer，Long，Float，Double</p><ol start="3"><li>Integer a&#x3D; 127 与 Integer b &#x3D; 127相等吗？<br>对于对象引用类型：&#x3D;&#x3D;比较的是对象的内存地址。<br>对于基本数据类型：&#x3D;&#x3D;比较的是值。</li></ol><p>如果整型字面量的值在-128到127之间，那么自动装箱时不会new新的Integer对象，而是直接引用常量池中的Integer对象，超过范围 a1&#x3D;&#x3D;b1的结果是false</p><p>public static void main(String[] args) {<br>    Integer a &#x3D; new Integer(3);<br>    Integer b &#x3D; 3;  &#x2F;&#x2F; 将3自动装箱成Integer类型<br>    int c &#x3D; 3;<br>    System.out.println(a &#x3D;&#x3D; b); &#x2F;&#x2F; false 两个引用没有引用同一对象<br>    System.out.println(a &#x3D;&#x3D; c); &#x2F;&#x2F; true a自动拆箱成int类型再和c比较<br>    System.out.println(b &#x3D;&#x3D; c); &#x2F;&#x2F; true</p><pre><code class="hljs">Integer a1 = 128;Integer b1 = 128;System.out.println(a1 == b1); // false Integer a2 = 127;Integer b2 = 127;System.out.println(a2 == b2); // true</code></pre><p>}</p><p>八、常用工具类库<br>九、单元测试<br>十、日志<br>Java基础知识点总结归纳，超级全面！（2021版）到这里就要跟大家说再见了，本文会不断更新完善，希望老铁们多多关注哦~</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java复习</title>
    <link href="/2022/04/24/Java%E5%A4%8D%E4%B9%A0/"/>
    <url>/2022/04/24/Java%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Java访问修饰符"><a href="#1-Java访问修饰符" class="headerlink" title="1. Java访问修饰符"></a>1. Java访问修饰符</h1><table><thead><tr><th>修饰符</th><th>当前类</th><th>同包</th><th>子类</th><th>其他包</th></tr></thead><tbody><tr><td>private</td><td>√</td><td>×</td><td>×</td><td>×</td></tr><tr><td>default</td><td>√</td><td>√</td><td>×</td><td>×</td></tr><tr><td>protected</td><td>√</td><td>√</td><td>√</td><td>×</td></tr><tr><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr></tbody></table>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Minecraft Carpet Mod 命令使用教程</title>
    <link href="/2022/04/23/Minecraft%20Carpet%20Mod%20%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <url>/2022/04/23/Minecraft%20Carpet%20Mod%20%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Minecraft-Carpet-Mod-命令使用教程"><a href="#Minecraft-Carpet-Mod-命令使用教程" class="headerlink" title="Minecraft Carpet Mod 命令使用教程"></a>Minecraft Carpet Mod 命令使用教程</h1><p><a href="https://www.bilibili.com/read/game#rid=6?from=articleDetail">单机游戏 </a>2020-05-06 23:351.6万阅读 · 203喜欢 · 28评论</p><p><a href="https://space.bilibili.com/7514269"><img src="https://i1.hdslb.com/bfs/face/c99358d2c0d25c158090f3bb0fe63cf51b0c1a4b.jpg@96w_96h_1c_1s.webp" alt="img"></a></p><p><a href="https://space.bilibili.com/7514269">worldy丶jj</a></p><p>粉丝：33   文章：2    关注</p><p>Minecraft CarpetMod command use</p><p>worldy根据<a href="https://www.bilibili.com/video/BV1hE411D7um">【MC|熟肉】Carpet Mod（1.14&#x2F;1.15）详尽教程【gnembon】</a>视频整理</p><h2 id="什么是carpet"><a href="#什么是carpet" class="headerlink" title="什么是carpet"></a>什么是carpet</h2><blockquote><p>carpet是对游戏进行了一些魔改,让你能更好的控制游戏内容,并且能更好的理解发生了什么. 移除了游戏中一些烦人的bug&#x2F;特性,提高了游戏的运行效率,在不影响游戏正常运行的情况下，提供了一些可选的游戏特性或者原版特性缺少的内容. carpet依附于fabric api</p><p>最重要的是,无论你做了什么,游戏依然完全兼容原版.如果你不需要使用这些工具也可以随时关闭,而且不产生任何副作用.</p></blockquote><ul><li>使用carpet第一次进入world 游戏特性和原版完全一致,所有特性&#x2F;bug默认都是关闭的,每个特性需要分别开启才能生效</li><li>默认开启的只有这些carpet的指令,除非你使用了他们,否则不会产生任何效果,这些指令也可以被关闭,如果你的server管理员想这样做的话</li></ul><h2 id="如何运用-carpet-指令来配置carpet-mod"><a href="#如何运用-carpet-指令来配置carpet-mod" class="headerlink" title="如何运用 carpet 指令来配置carpet mod"></a>如何运用 carpet 指令来配置carpet mod</h2><ul><li><p>想要开启某个特性,你需要使用carpet指令开启,输入<code>/carpet &lt;特性名&gt; &lt;设定值&gt;</code>会暂时改变相应的特性直到重启服务器&#x2F;重新进入世界</p><blockquote><p>(后续本文中将会忽略前面的斜杠”&#x2F;“)</p></blockquote></li><li><p>临时设置特性后文本框会出现一个链接,点击这个链接,他会给你一个命令,可以设置特性默认开启<code>/carpet setDefault &lt;特性名&gt; &lt;设定值&gt;</code></p></li><li><p>获取所有carpet特性只需要输入<code>/carpet</code></p><blockquote><p>不仅能获得目前激活的特性,也会获得一个可以点击的特性目录,鼠标悬停在上面,可以获得每个指令的具体作用,点击右边的值便可以设置它</p></blockquote></li><li><p><code>/carpet list default</code>显示永久性的设置,就是重启后也会保持的特性</p></li><li><p><code>/carpet removeDefault</code>可以删除默认列表中的内容,让他每次重启后都是默认原版的特性</p></li><li><p><code>/carpet list &lt;关键词&gt;</code>搜索某项特性,可以通过类别,子字符串方式搜索</p></li><li><p>carpet所有指令都是低授权等级的,所有玩家都能使用,管理员可以使用<code>/carpet setting</code>指令关闭,设置每个人的权限</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">/carpet list default<br>[09:48:05] [Server thread/INFO]: Carpet Mod Settings matching &quot;default&quot;:<br>[09:48:05] [Server thread/INFO]: - defaultLoggers [none] [tps] [mobcaps,tps]<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs shell">/carpet list<br>[09:51:31] [Server thread/INFO]: All Carpet Mod Settings:<br>[09:51:31] [Server thread/INFO]: - allowSpawningOfflinePlayers [true] [false]<br>[09:51:31] [Server thread/INFO]: - antiCheatDisabled [true] [false]<br>[09:51:31] [Server thread/INFO]: - carpetCommandPermissionLevel [ops] [2] [4]<br>[09:51:31] [Server thread/INFO]: - carpets [true] [false]<br>[09:51:31] [Server thread/INFO]: - chainStone [true] [false] [stick_to_all]<br>[09:51:31] [Server thread/INFO]: - cleanLogs [true] [false]<br>[09:51:31] [Server thread/INFO]: - commandDistance [true] [false] [ops]<br>[09:51:31] [Server thread/INFO]: - commandDraw [true] [false] [ops]<br>[09:51:31] [Server thread/INFO]: - commandInfo [true] [false] [ops]<br>[09:51:31] [Server thread/INFO]: - commandLog [true] [false] [ops]<br>[09:51:31] [Server thread/INFO]: - commandPerimeterInfo [true] [false] [ops]<br>[09:51:31] [Server thread/INFO]: - commandPlayer [true] [false] [ops]<br>[09:51:31] [Server thread/INFO]: - commandProfile [true] [false] [ops]<br>[09:51:31] [Server thread/INFO]: - commandScript [true] [false] [ops]<br>[09:51:31] [Server thread/INFO]: - commandScriptACE [ops] [0] [1] [2] [3] [4]<br>[09:51:31] [Server thread/INFO]: - commandSpawn [true] [false] [ops]<br>[09:51:31] [Server thread/INFO]: - commandTick [true] [false] [ops]<br>[09:51:31] [Server thread/INFO]: - commandTrackAI [true] [false] [ops]<br>[09:51:31] [Server thread/INFO]: - creativeFlyDrag [0.09]<br>[09:51:31] [Server thread/INFO]: - creativeFlySpeed [1.0]<br>[09:51:31] [Server thread/INFO]: - creativeNoClip [true] [false]<br>[09:51:31] [Server thread/INFO]: - creativePlayersLoadChunks [true] [false]<br>[09:51:31] [Server thread/INFO]: - ctrlQCraftingFix [true] [false]<br>[09:51:31] [Server thread/INFO]: - customMOTD [_]<br>[09:51:31] [Server thread/INFO]: - defaultLoggers [none] [tps] [mobcaps,tps]<br>[09:51:31] [Server thread/INFO]: - desertShrubs [true] [false]<br>[09:51:31] [Server thread/INFO]: - explosionNoBlockDamage [true] [false]<br>[09:51:31] [Server thread/INFO]: - extremeBehaviours [true] [false]<br>[09:51:31] [Server thread/INFO]: - fastRedstoneDust [true] [false]<br>[09:51:31] [Server thread/INFO]: - fillLimit [32768] [250000] [1000000]<br>[09:51:31] [Server thread/INFO]: - fillUpdates [true] [false]<br>[09:51:31] [Server thread/INFO]: - flatWorldStructureSpawning [true] [false]<br>[09:51:31] [Server thread/INFO]: - flippinCactus [true] [false]<br>[09:51:31] [Server thread/INFO]: - fogOff [true] [false]<br>[09:51:31] [Server thread/INFO]: - forceloadLimit [256]<br>[09:51:31] [Server thread/INFO]: - hardcodeTNTangle [-1] [-1.0]<br>[09:51:31] [Server thread/INFO]: - hopperCounters [true] [false]<br>[09:51:31] [Server thread/INFO]: - huskSpawningInTemples [true] [false]<br>[09:51:31] [Server thread/INFO]: - interactionUpdates [true] [false]<br>[09:51:31] [Server thread/INFO]: - lagFreeSpawning [true] [false]<br>[09:51:31] [Server thread/INFO]: - language [none] [zh_cn] [zh_tw]<br>[09:51:31] [Server thread/INFO]: - leadFix [true] [false]<br>[09:51:31] [Server thread/INFO]: - lightEngineMaxBatchSize [5] [50] [100] [200]<br>[09:51:31] [Server thread/INFO]: - lightningKillsDropsFix [true] [false]<br>[09:51:31] [Server thread/INFO]: - liquidDamageDisabled [true] [false]<br>[09:51:31] [Server thread/INFO]: - maxEntityCollisions [0] [1] [20]<br>[09:51:31] [Server thread/INFO]: - mergeTNT [true] [false]<br>[09:51:31] [Server thread/INFO]: - missingTools [true] [false]<br>[09:51:31] [Server thread/INFO]: - movableAmethyst [true] [false]<br>[09:51:31] [Server thread/INFO]: - movableBlockEntities [true] [false]<br>[09:51:31] [Server thread/INFO]: - optimizedTNT [true] [false]<br>[09:51:31] [Server thread/INFO]: - perfPermissionLevel [2] [4]<br>[09:51:31] [Server thread/INFO]: - persistentParrots [true] [false]<br>[09:51:31] [Server thread/INFO]: - piglinsSpawningInBastions [true] [false]<br>[09:51:31] [Server thread/INFO]: - pingPlayerListLimit [0] [12] [20] [40]<br>[09:51:31] [Server thread/INFO]: - placementRotationFix [true] [false]<br>[09:51:31] [Server thread/INFO]: - portalCreativeDelay [1] [40] [80] [72000]<br>[09:51:31] [Server thread/INFO]: - portalSurvivalDelay [1] [40] [80] [72000]<br>[09:51:31] [Server thread/INFO]: - pushLimit [10] [12] [14] [100]<br>[09:51:31] [Server thread/INFO]: - quasiConnectivity [true] [false]<br>[09:51:31] [Server thread/INFO]: - railPowerLimit [9] [15] [30]<br>[09:51:31] [Server thread/INFO]: - renewableBlackstone [true] [false]<br>[09:51:31] [Server thread/INFO]: - renewableCoral [false] [expanded] [true]<br>[09:51:31] [Server thread/INFO]: - renewableDeepslate [true] [false]<br>[09:51:31] [Server thread/INFO]: - renewableSponges [true] [false]<br>[09:51:31] [Server thread/INFO]: - rotatorBlock [true] [false]<br>[09:51:31] [Server thread/INFO]: - scriptsAppStore [gnembon/scarpet/contents/programs]<br>[09:51:31] [Server thread/INFO]: - scriptsAutoload [true] [false]<br>[09:51:31] [Server thread/INFO]: - scriptsDebugging [true] [false]<br>[09:51:31] [Server thread/INFO]: - scriptsOptimization [true] [false]<br>[09:51:31] [Server thread/INFO]: - shulkerSpawningInEndCities [true] [false]<br>[09:51:31] [Server thread/INFO]: - silverFishDropGravel [true] [false]<br>[09:51:31] [Server thread/INFO]: - simulationDistance [0] [12] [16] [32]<br>[09:51:31] [Server thread/INFO]: - smoothClientAnimations [true] [false]<br>[09:51:31] [Server thread/INFO]: - spawnChunksSize [0] [11]<br>[09:51:31] [Server thread/INFO]: - stackableShulkerBoxes [false] [true] [16]<br>[09:51:31] [Server thread/INFO]: - structureBlockIgnored [minecraft:structure_void] [minecraft:air]<br>[09:51:31] [Server thread/INFO]: - structureBlockLimit [48] [96] [192] [256]<br>[09:51:31] [Server thread/INFO]: - structureBlockOutlineDistance [96] [192] [2048]<br>[09:51:31] [Server thread/INFO]: - summonNaturalLightning [true] [false]<br>[09:51:31] [Server thread/INFO]: - superSecretSetting [true] [false]<br>[09:51:31] [Server thread/INFO]: - tntDoNotUpdate [true] [false]<br>[09:51:31] [Server thread/INFO]: - tntPrimerMomentumRemoved [true] [false]<br>[09:51:31] [Server thread/INFO]: - tntRandomRange [-1] [-1.0]<br>[09:51:31] [Server thread/INFO]: - updateSuppressionBlock [false] [true] [1] [6]<br>[09:51:31] [Server thread/INFO]: - updateSuppressionCrashFix [true] [false]<br>[09:51:31] [Server thread/INFO]: - viewDistance [0] [12] [16] [32]<br>[09:51:31] [Server thread/INFO]: - xpNoCooldown [true] [false]<br></code></pre></td></tr></table></figure><h2 id="游戏控制"><a href="#游戏控制" class="headerlink" title="游戏控制"></a>游戏控制</h2><h3 id="游戏tick控制"><a href="#游戏tick控制" class="headerlink" title="游戏tick控制"></a>游戏tick控制</h3><p> tick &lt;选项&gt;</p><blockquote><p>控制游戏运行速度,监视资源占用</p></blockquote><ul><li><p>&lt;选项&gt;</p></li><li><ul><li><p>warp [值] [其他指令]</p><blockquote><p>可以让游戏在一定gt内以最高速度运行,同时每个gt内计算任务量不变</p><p>可以再该命令后再加一个指令,他会在加速结束后执行</p><p>在前一个加速指令完成前不能调用新的warp指令,停止当前加速,只需要把&lt;值&gt;设置成”0”或者不填写&lt;值&gt;</p></blockquote></li><li><p><code>freeze</code></p><blockquote><p>冻结gt,使游戏部分暂停,如:计算实体,世界树种,方块事件和更新,允许玩家移动,在冻结状态下研究发生了什么</p><p>再次使用该指令可以解除冻结,手动打指令,不能使用命令方块</p></blockquote></li><li><p><code>step</code></p><blockquote><p>步进,允许游戏以可控的方式前进,以方便观察变化较快的装置</p></blockquote></li><li><p>superHot</p><blockquote><p>一个很有趣的指令,在玩家不移动时冻结游戏,只有在玩家移动时时间才会流逝</p></blockquote></li><li><p>rate [值]</p><blockquote><p>改变游戏的基础时钟,更直接控制游戏速度,在加速与暂停上没有warp&#x2F;freeze好用,但是他对游戏的影响最小,why?其他方法可能会不是很完美,因为游戏在设计时没有计划应对这种情况,而使用哪个rate就完全和游戏原本的计划相同,只是快慢的区别</p><p>时间变慢后客户端动画还是原来的速度你可以开启<code>carpet smoothClientAnimation true</code> 这会平滑并放慢客户端渲染,使适配低速度,但是这会使玩家移动和控制变慢,观察活塞运动方便?!</p></blockquote></li><li><p>health [值]</p><blockquote><p>检测计算资源占用,类似于一个内置的检测器,检查什么东西占用资源</p><p>默认检测5s&#x2F;200gt中的数据,时长可以通过[值]控制</p><p>汇总每个gt,每个维度中某样东西平均占用的计算时长,包括网络,自动存档,tick外任务,刷怪,区块加载,区块卸载,方块更新,实体运算,方块实体运算,村民和袭击,环境,如果上述未出现在结果里,说明占用较少,都被归类的到rest(其他)内,你的1gt应该低于50ms,如果比这个长,说明你的游戏已经在掉tick了</p></blockquote></li><li><p>entities</p><blockquote><p>因为消耗性能的主要问题来源于实体和方块实体,运行一轮只记录实体和方块实体的用时</p><p>需要详细情况可以使用原版的debug指令</p></blockquote></li></ul></li></ul><h2 id="实体生成spawn-指令"><a href="#实体生成spawn-指令" class="headerlink" title="实体生成spawn 指令"></a>实体生成spawn 指令</h2><blockquote><p>这些改变不在<code>carpet</code>指令下只是暂时的,只需要重启游戏就可以恢复</p></blockquote><p> spawn &lt;选项&gt;</p><ul><li><p>选项</p><blockquote><p>将默认的”70怪&#x2F;玩家” 改成我们想要的数字使用<code>set &lt;值&gt;</code></p></blockquote><blockquote><p>选项:reset,重置为原版默认刷怪概率</p></blockquote></li><li><ul><li><p><code>start</code></p></li><li><p><code>stop</code></p></li><li><p><code>monster</code></p><blockquote><p>显示一些近期的刷怪记录</p></blockquote></li><li><p><code>mocking</code></p><blockquote><p>禁止刷怪,但是这个指令还是会持续尝试刷怪     </p></blockquote></li><li><p><code>tracking [选项] [x1] [y1] [z1] [x2] [y2] [z2]</code></p><blockquote><p>刷怪追踪,需要不少的CPU算力,在你正在追踪时直接使用<code>tracking</code>也可以显示数据</p></blockquote></li><li><p>选项</p></li><li><p><code>test</code></p><blockquote><p>重置当前刷怪追踪，开始新的追踪，重置漏斗计数</p></blockquote></li><li><p><code>rates &lt;选项&gt; [值]</code></p><blockquote><p>更改相应怪物刷出概率</p></blockquote></li><li><p>类型</p></li><li><p><code>monster</code></p></li><li><p><code>creature</code></p><blockquote><p>列出所有占用刷怪上限的怪物的位置</p></blockquote></li><li><p><code>list &lt;x&gt; &lt;y&gt; &lt;z&gt;</code></p><blockquote><p>允许查看我位置可以生成的怪物</p><p>不可以省略后面的坐标,光标指向的位置可能会被实体阻挡,导致输出结果不准确,可以使用相对位置 “~ ~ ~”</p><p>也可以直接在要检查的位置放置粉色地毯,和无地毯指令的效果一致</p></blockquote></li><li><p><code>entities &lt;类型&gt;</code></p></li><li><p><code>mobcaps [选项]</code></p><blockquote><p>按照大类显示刷怪上限,以及这个类别中检测到了多少只怪</p><p>默认显示玩家所在维度刷怪上限,维度:<code>overworld</code> , <code>the_nether</code> , <code>the_end</code></p></blockquote></li></ul></li></ul><h2 id="禁用出生点区块"><a href="#禁用出生点区块" class="headerlink" title="禁用出生点区块"></a>禁用出生点区块</h2><blockquote><p>false禁止出生点区块加载</p></blockquote><p> carpet disableSpawnChunks false</p><h2 id="视距调整"><a href="#视距调整" class="headerlink" title="视距调整"></a>视距调整</h2><blockquote><p>单机无效,单机可以在选项里自行调节,通常不重启服务器无法调节视距</p><p>使用这个可以再不重启服务器的情况下调节视距</p></blockquote><p> carpet viewDistance &lt;值&gt;</p><h2 id="Super-secret-setting"><a href="#Super-secret-setting" class="headerlink" title="Super secret setting"></a>Super secret setting</h2><blockquote><p>超级秘密设置,你问他是干什么的?都说了是秘密了,所以记住,不要开启,不要开启,不要开启.</p></blockquote><p> catpet superSecretSetting true</p><h2 id="游戏监控"><a href="#游戏监控" class="headerlink" title="游戏监控"></a>游戏监控</h2><h3 id="漏斗计数器"><a href="#漏斗计数器" class="headerlink" title="漏斗计数器"></a>漏斗计数器</h3><blockquote><p>用于物品计数,将漏斗指向羊毛,漏斗会向羊毛输出物品,羊毛会销毁接受物品并计数</p><p>羊毛的颜色表示用于计数的频道,所有指向同一种颜色羊毛的漏斗会一起计数</p></blockquote><p> carpet hopperCounters true</p><blockquote><p>显示所有计数器</p></blockquote><p> counter [颜色] [选项]</p><ul><li><p>选项</p></li><li><ul><li><p><code>realtime</code></p><blockquote><p>根据实际时间计算出效率,而不是游戏时钟</p></blockquote></li><li><p><code>reset</code></p><blockquote><p>重置计数器,或重置指定颜色的计数器,输出文本框有红色[x]也可以重置计数</p></blockquote></li></ul></li></ul><h2 id="distance-指令"><a href="#distance-指令" class="headerlink" title="distance 指令"></a>distance 指令</h2><blockquote><p>计算</p></blockquote><p> distance &lt;选项&gt;</p><ul><li><p><code>from &lt;x1&gt; &lt;y1&gt; &lt;z1&gt; to &lt;x2&gt; &lt;y2&gt; &lt;z2&gt;</code></p><blockquote><p>给出两个位置之间相距多少米</p><p>欧氏距离(Spherical)球面距离或者说直线距离</p><p>圆柱距离(Cylindrical)也就是不考虑y轴的直线距离</p><p>曼哈顿距离(Manhattan)计程车距离或者说链接两个点需要多少个方块</p></blockquote></li><li><p><code>to &lt;x&gt; &lt;y&gt; &lt;z&gt;</code></p><blockquote><p>多次计算不同位置到初始点的距离</p></blockquote></li></ul><h2 id="info-指令"><a href="#info-指令" class="headerlink" title="info 指令"></a>info 指令</h2><blockquote><p>给出方块的信息,之前也提供实体信息,但是在1.14以后加入了<code>/data</code>后就不需要了</p></blockquote><p> info block <x> <y> <z></p><h2 id="追踪实体信息-村民-track"><a href="#追踪实体信息-村民-track" class="headerlink" title="追踪实体信息(村民) track"></a>追踪实体信息(村民) track</h2><blockquote><p>追踪显示实体信息(目前只有村民实体)</p></blockquote><p> track &lt;实体&gt; &lt;信息&gt;</p><ul><li><p>&lt;实体&gt;</p></li><li><ul><li><p><code>villager</code></p><blockquote><p>指定村民实体</p></blockquote></li></ul></li><li><p>&lt;信息&gt;</p></li><li><ul><li><p><code>breeding</code></p><blockquote><p>显示村民是否绑定床,食物数量,繁殖冷却</p><p>绿宝石右键实体–&gt;显示床</p><p>腐肉–&gt;清空实体持有食物</p><p>床–&gt;显示实体周围能识别的床</p></blockquote></li><li><p><code>iron_golem_spawning</code></p><blockquote><p>铁傀儡生成相关信息,是否睡过觉,工作状态,恐慌状态,最后一次看到铁傀儡时间</p></blockquote></li><li><p><code>clear</code></p><blockquote><p>清除显示的信息</p></blockquote></li></ul></li></ul><h1 id="bugFix"><a href="#bugFix" class="headerlink" title="bugFix"></a>bugFix</h1><h1 id="马游荡修复"><a href="#马游荡修复" class="headerlink" title="马游荡修复"></a>马游荡修复</h1><blockquote><p>修复:马会尝试寻路到启程开始的位置,目前不太完善,某些情况可能失效</p></blockquote><p> carpet horseWanderingFix true</p><h1 id="栓绳消失修复"><a href="#栓绳消失修复" class="headerlink" title="栓绳消失修复"></a>栓绳消失修复</h1><blockquote><p>修复:在加载栓绳绑着动物的区块时,栓绳不正常消失&#x2F;出现</p></blockquote><p> carpet leadFix true</p><h1 id="合成物品快捷键-CTRL-Q-丢弃无效修复"><a href="#合成物品快捷键-CTRL-Q-丢弃无效修复" class="headerlink" title="合成物品快捷键(CTRL + Q)丢弃无效修复"></a>合成物品快捷键(CTRL + Q)丢弃无效修复</h1><blockquote><p>使用快捷键可以丢出所有本次合成物品</p></blockquote><p> carpet ctrlQCraftingFix true</p><h1 id="地狱门窒息修复"><a href="#地狱门窒息修复" class="headerlink" title="地狱门窒息修复"></a>地狱门窒息修复</h1><blockquote><p>地狱门传送实体时会根据实体碰撞箱大小调整地狱门大小,防止实体窒息</p></blockquote><h1 id="挖掘幽灵方块修复-仅1-14"><a href="#挖掘幽灵方块修复-仅1-14" class="headerlink" title="挖掘幽灵方块修复 (仅1.14)"></a>挖掘幽灵方块修复 (仅1.14)</h1><blockquote><p>修复1.14 出现烦人的幽灵方块,无论是原版客户端连接carpet server 还是相反情况都有效,1.15原版已修复该bug</p></blockquote><p> carpet miningGhostBlockFix true</p><h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><h1 id="流畅红石线"><a href="#流畅红石线" class="headerlink" title="流畅红石线"></a>流畅红石线</h1><blockquote><p>对红石线更新系统的重新实现,大幅减少红石线亮&#x2F;灭带来的卡顿</p></blockquote><p> carpet fastRandstoneDust true</p><h1 id="实体碰撞上限"><a href="#实体碰撞上限" class="headerlink" title="实体碰撞上限"></a>实体碰撞上限</h1><blockquote><p>能够解决很多实体卡在一个地方造成的卡顿</p><p>设置数值较低时会改变大群生物之间的碰撞效果</p></blockquote><p> carpet maxEntityCollisions [<value>]</p><h1 id="无卡顿刷怪"><a href="#无卡顿刷怪" class="headerlink" title="无卡顿刷怪"></a>无卡顿刷怪</h1><blockquote><p>能够减少刷怪所需算力,优化碰撞计算,实际怪物生成的代码,他不会对原版的刷怪产生任何影响和改动,只是效率更高而已</p></blockquote><p> carper lagFreeSpawning true</p><h1 id="地狱门缓存-1-15无此项"><a href="#地狱门缓存-1-15无此项" class="headerlink" title="地狱门缓存(1.15无此项)"></a>地狱门缓存(1.15无此项)</h1><blockquote><p>修复了如果地狱门15s内没有用过会产生巨大的瞬时卡顿问题,开启后地狱门会永久缓存直到地狱门发生变化</p><p>1.15无此项,因为Mojang使用兴趣点(poi)系统重写了地狱门连接</p></blockquote><p> carper portalCaching true</p><h1 id="创造工具"><a href="#创造工具" class="headerlink" title="创造工具"></a>创造工具</h1><h1 id="控制玩家"><a href="#控制玩家" class="headerlink" title="控制玩家"></a>控制玩家</h1><blockquote><p>可以对玩家进行相应的操控,无论是真玩家还是”硅胶小人”(假玩家),又或者是你自己,这些行为是在服务器运行,在操控自己时,自己可能看不到相应的UI,但别的玩家可以看到</p></blockquote><p> player <name> <option></p><ul><li><p>name</p><blockquote><p>指定玩家名</p></blockquote></li><li><p>option</p></li><li><ul><li><p>选项</p></li><li><p><code>once</code> #一次</p></li><li><p><code>continuous</code> #持续</p></li><li><p><code>interval</code> #间隔</p></li><li><p><code>forward</code> #前方</p></li><li><p><code>east</code> #东方</p></li><li><p><code>spawn</code></p><blockquote><p>在玩家所在位置生成一个”硅胶小人”且游戏模式相同,若该玩家名存在,则该玩家上线时会顶替掉硅胶小人</p></blockquote></li><li><p><code>drop</code></p><blockquote><p>让硅胶小人把手持的物品丢出来</p></blockquote></li><li><p><code>mount</code></p><blockquote><p>让硅胶小人坐在附近的实体上</p></blockquote></li><li><p><code>dismount</code></p><blockquote><p>让硅胶小人从实体上下来</p></blockquote></li><li><p><code>look &lt;方向&gt;</code></p><blockquote><p>让硅胶小人朝向相应方向</p></blockquote></li><li><p><code>move &lt;方向&gt;</code></p></li><li><p><code>stop</code></p><blockquote><p>停止硅胶小人所有动作</p></blockquote></li><li><p><code>swapHands</code></p><blockquote><p>交换主手和副手上的物品</p></blockquote></li><li><p><code>use &lt;选项&gt;</code></p><blockquote><p>使用,相当于右键</p></blockquote></li></ul></li><li><p><code>attack &lt;选项&gt;</code></p><blockquote><p>攻击相当于左键</p></blockquote></li><li><ul><li>选项同<code>use</code></li></ul></li><li><p><code>shadow</code></p><blockquote><p>会让同名硅胶小人顶替真实玩家的位置(真实玩家下线),并完成你之前给他们的任务,只能在服务器使用,单机下线内置服务端会关闭</p></blockquote></li></ul><h1 id="按照形状快速放置"><a href="#按照形状快速放置" class="headerlink" title="按照形状快速放置"></a>按照形状快速放置</h1><blockquote><p>目前只支持球形,方形可以用原版指令”fill”填充,或者”replace”替换,对于更复杂的形状推荐使用”script fill”</p></blockquote><p> draw &lt;形状&gt; <x> <y> <z> <r></p><ul><li><p>形状</p></li><li><ul><li><code>sphere</code></li></ul></li></ul><h1 id="原版fill和cone指令填充上限"><a href="#原版fill和cone指令填充上限" class="headerlink" title="原版fill和cone指令填充上限"></a>原版fill和cone指令填充上限</h1><blockquote><p>原版fill只能填充32768个方块,也就相当于32<em>32</em>32</p></blockquote><p> carpet fillLimit [<vanlue>]</p><h1 id="fill-x2F-clone-x2F-setblock-x2F-structure-指令的禁止方块更新"><a href="#fill-x2F-clone-x2F-setblock-x2F-structure-指令的禁止方块更新" class="headerlink" title="fill&#x2F;clone&#x2F;setblock&#x2F;structure 指令的禁止方块更新"></a>fill&#x2F;clone&#x2F;setblock&#x2F;structure 指令的禁止方块更新</h1><blockquote><p>false禁止指令放置方块时更新</p></blockquote><p> carpet fillUpdates false</p><h1 id="活塞推动上限"><a href="#活塞推动上限" class="headerlink" title="活塞推动上限"></a>活塞推动上限</h1><blockquote><p>可以自定义活塞推动的上限,但是这会让你的装置其他人用不了</p></blockquote><p> carpet pushLimit &lt;值&gt;</p><h1 id="铁轨激活距离上限"><a href="#铁轨激活距离上限" class="headerlink" title="铁轨激活距离上限"></a>铁轨激活距离上限</h1><blockquote><p>可以设置充能铁轨的激活上限</p></blockquote><p> carpet railPowerLimit &lt;值&gt;</p><h1 id="QC开关"><a href="#QC开关" class="headerlink" title="QC开关"></a>QC开关</h1><blockquote><p>可以开关QC连接,和BUD激活,false关闭QC</p></blockquote><p> carpet quasiConnectivity false</p><h1 id="召唤闪电"><a href="#召唤闪电" class="headerlink" title="召唤闪电"></a>召唤闪电</h1><blockquote><p>允许使用<code>summon</code>指令生自然成闪电,就像雷雨天气闪电一样,有概率生成骷髅马</p></blockquote><p> carpet summonNaturalLightning true</p><h1 id="创造模式地狱门延迟"><a href="#创造模式地狱门延迟" class="headerlink" title="创造模式地狱门延迟"></a>创造模式地狱门延迟</h1><blockquote><p>无论什么游戏模式都需要一定时间才能进入地狱门,防止创造模式下传送错维度,开启后手持黑曜石的玩家延迟会更长</p></blockquote><p> carpet portalCreativeDelay true</p><h1 id="（TNT）爆炸不破坏方块"><a href="#（TNT）爆炸不破坏方块" class="headerlink" title="（TNT）爆炸不破坏方块"></a>（TNT）爆炸不破坏方块</h1><blockquote><p>让tnt爆炸不会造成任何方块破坏</p></blockquote><p> carpet explosionNoBlockDamage true</p><h1 id="TNT放置时不更新"><a href="#TNT放置时不更新" class="headerlink" title="TNT放置时不更新"></a>TNT放置时不更新</h1><blockquote><p>防止玩家防止tnt是造成更新</p></blockquote><p> carpet tntDoNotUpdate true</p><h1 id="移除TNT的初始随机动量"><a href="#移除TNT的初始随机动量" class="headerlink" title="移除TNT的初始随机动量"></a>移除TNT的初始随机动量</h1><blockquote><p>移除点燃tnt时的随机跳动,但是再把装置发给别人之前要确保装置能够处理这种情况</p></blockquote><p> carpet tntPrimerMomentumRemoved true</p><h1 id="移除经验球吸取的冷却"><a href="#移除经验球吸取的冷却" class="headerlink" title="移除经验球吸取的冷却"></a>移除经验球吸取的冷却</h1><blockquote><p>移除玩家获取经验需要2gt的冷却</p></blockquote><p> carpet xpNoCooldown true</p><h1 id="生存工具"><a href="#生存工具" class="headerlink" title="生存工具"></a>生存工具</h1><h1 id="经验球合并"><a href="#经验球合并" class="headerlink" title="经验球合并"></a>经验球合并</h1><blockquote><p>让经验像物品一样,可以合并成更大的经验球</p></blockquote><p> carpet combineXPOrbs true</p><h1 id="“仙人掌”翻转工具"><a href="#“仙人掌”翻转工具" class="headerlink" title="“仙人掌”翻转工具"></a>“仙人掌”翻转工具</h1><blockquote><p>手上拿着仙人掌右键你想要改变朝向的方块,你可以旋转或者翻转它,使用仙人掌不会造成方块更新</p><p>仙人掌放在副手,可以以相反的方向放置方块</p><p>用仙人掌右键沙子”当当”你就种上了一颗仙人掌</p></blockquote><p> carpet flippinCactus true</p><h1 id="x2F-c-x2F-s-快速切换-观察者-x2F-生存-模式"><a href="#x2F-c-x2F-s-快速切换-观察者-x2F-生存-模式" class="headerlink" title="&#x2F;c &#x2F;s 快速切换 观察者&#x2F;生存 模式"></a>&#x2F;c &#x2F;s 快速切换 观察者&#x2F;生存 模式</h1><blockquote><p>给普通玩家使用<code>/c</code>, <code>/s</code>权限,可以快速切换观察者&#x2F;生存模式</p><p>观察者模式带”夜视”和”海豚的恩惠”效果</p></blockquote><p> carper commandCameramode true</p><h1 id="禁用飞行和骑乘的服务器反作弊检测"><a href="#禁用飞行和骑乘的服务器反作弊检测" class="headerlink" title="禁用飞行和骑乘的服务器反作弊检测"></a>禁用飞行和骑乘的服务器反作弊检测</h1><blockquote><p>开启后防止因为快速飞行和移动或者连接不稳定,造成回弹,但是不能修复你的连接不稳定</p></blockquote><p> carpet antiCheatDisable true</p><h1 id="单个玩家睡觉跳过夜晚"><a href="#单个玩家睡觉跳过夜晚" class="headerlink" title="单个玩家睡觉跳过夜晚"></a>单个玩家睡觉跳过夜晚</h1><blockquote><p>字面意思</p></blockquote><p> carpet onePlayerSleeping true</p><h1 id="自定义登陆界面服务器欢迎语"><a href="#自定义登陆界面服务器欢迎语" class="headerlink" title="自定义登陆界面服务器欢迎语"></a>自定义登陆界面服务器欢迎语</h1><blockquote><p>能够在服务器运行时改变登陆界面服务器欢迎语,不需要关闭服务器修改配置文件</p></blockquote><p> carpet customMOTD &lt;字符串&gt;</p><h1 id="缺失的挖掘工具"><a href="#缺失的挖掘工具" class="headerlink" title="缺失的挖掘工具"></a>缺失的挖掘工具</h1><blockquote><p>添加活塞，玻璃挖掘工具镐子,海绵的挖掘工具剪刀</p></blockquote><p> carpet missingTools true</p><h1 id="发射器旋转方块"><a href="#发射器旋转方块" class="headerlink" title="发射器旋转方块"></a>发射器旋转方块</h1><blockquote><p>发射器被激活时能够旋转发射器前面的方块</p></blockquote><p> carpet rotatorBlock true</p><h1 id="可移动方块实体-箱子-漏斗-酿造台-发射器-信标-etc"><a href="#可移动方块实体-箱子-漏斗-酿造台-发射器-信标-etc" class="headerlink" title="可移动方块实体 (箱子, 漏斗, 酿造台, 发射器, 信标, etc.)"></a>可移动方块实体 (箱子, 漏斗, 酿造台, 发射器, 信标, etc.)</h1><blockquote><p>可以移动 箱子, 漏斗, 酿造台, 发射器, 信标, etc.带有nbt数据的方块</p></blockquote><p> carpet movableBlockEntities true</p><h1 id="蠹虫破坏方块掉落沙砾"><a href="#蠹虫破坏方块掉落沙砾" class="headerlink" title="蠹虫破坏方块掉落沙砾"></a>蠹虫破坏方块掉落沙砾</h1><blockquote><p>在蠹虫离开石头时会掉落砂砾物品</p></blockquote><p> carpet silverFishDropGravel true</p><h1 id="尸壳在沙漠神殿中生成"><a href="#尸壳在沙漠神殿中生成" class="headerlink" title="尸壳在沙漠神殿中生成"></a>尸壳在沙漠神殿中生成</h1><blockquote><p>开启后沙漠神殿只会刷尸壳,而且不需要露天就能刷</p></blockquote><p> carpet huskSpawningInTemples true</p><h1 id="末地城生成潜影贝"><a href="#末地城生成潜影贝" class="headerlink" title="末地城生成潜影贝"></a>末地城生成潜影贝</h1><blockquote><p>开启后允许潜影贝在末地城结构范围内刷出</p></blockquote><p>carpet SpawningInEndCities true</p><h1 id="空潜影箱可堆叠"><a href="#空潜影箱可堆叠" class="headerlink" title="空潜影箱可堆叠"></a>空潜影箱可堆叠</h1><blockquote><p>空的潜影盒丢到地上使其合并,然后再捡起来便可,但是其特性仍是不可堆叠的物品</p></blockquote><p>carpet stackableShulkerBoxes true</p><h1 id="“固定”的鹦鹉"><a href="#“固定”的鹦鹉" class="headerlink" title="“固定”的鹦鹉"></a>“固定”的鹦鹉</h1><blockquote><p>可以让鹦鹉固定在你的肩膀上,跳跃,骑马,飞行都无法掉下来,只有在水中或者玩家受伤,才能使鹦鹉从肩膀上掉下来</p></blockquote><p>carpet persistentParrots true</p><h1 id="海带生长高度限制"><a href="#海带生长高度限制" class="headerlink" title="海带生长高度限制"></a>海带生长高度限制</h1><blockquote><p>海带生长高度限制,使海带不能过分疯长,但是不适用于玩家放置的海带</p></blockquote><p>carpet kelpGenerationGrowthLimit &lt;值&gt;</p><h1 id="在干旱的气候中树苗变成枯木"><a href="#在干旱的气候中树苗变成枯木" class="headerlink" title="在干旱的气候中树苗变成枯木"></a>在干旱的气候中树苗变成枯木</h1><blockquote><p>在干燥的群系中不能吸收到水分的树苗将会变成枯木</p></blockquote><p>carpet desertShrubs true</p><h1 id="骨粉催熟珊瑚块"><a href="#骨粉催熟珊瑚块" class="headerlink" title="骨粉催熟珊瑚块"></a>骨粉催熟珊瑚块</h1><blockquote><p>开启后可以在水下通过珊瑚植物催熟珊瑚块,和树苗到树的原理是一样的,用骨粉</p></blockquote><p>carpet renewableCoral true</p><h1 id="闪电将守卫者转变为远古守卫者"><a href="#闪电将守卫者转变为远古守卫者" class="headerlink" title="闪电将守卫者转变为远古守卫者"></a>闪电将守卫者转变为远古守卫者</h1><blockquote><p>闪电将守卫者转变为远古守卫者来获取海绵</p></blockquote><p>carpet renewableSponges true</p><h1 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h1><h1 id="地毯相应的快捷方式"><a href="#地毯相应的快捷方式" class="headerlink" title="地毯相应的快捷方式"></a>地毯相应的快捷方式</h1><blockquote><p>这个mod名字的由来?</p><p>开启后能够使用放置不同颜色地毯的方式来执行特定重复的指令</p><p>粉色地毯:<code>spawn list</code>检查某个方块刷怪情况</p><p>黑色地毯:<code>spawn mobcaps</code>显示刷怪上限,放在不同颜色的羊毛上显示这个类别所有被加载的实体,对应指令:<code>spawn entities &lt;类型&gt;</code></p><p>棕色地毯:<code>distance &lt;选项&gt;</code>按住shift或首次放置地毯会设置初始点,而正常放置会设定第二个,从而获得测量结果</p><p>灰色地毯:<code>info block</code>提供下方方块信息</p><p>绿色地毯:<code>counter [颜色]</code>显示对应频道计数器信息</p><p>红色地毯:<code>counter [颜色] reset</code>重置这些计数器</p></blockquote><p>carpet carpets true</p><h1 id="log-指令与玩家单独数据"><a href="#log-指令与玩家单独数据" class="headerlink" title="log 指令与玩家单独数据"></a>log 指令与玩家单独数据</h1><blockquote><p>更加直接,连续,给每个玩家提供信息,log是根据玩家登陆信息,基于每个玩家的,基于carpet精神,不侵犯原版玩家数据,在服务器重启或重进世界后,玩家log信息会销毁</p></blockquote><p>log &lt;选项&gt;</p><ul><li><p>选项</p></li><li><ul><li><p><code>tps</code></p><blockquote><p>在tab界面显示服务器卡顿情况TPS,MSPT</p></blockquote></li><li><p><code>counter [颜色]</code></p><blockquote><p>能够简洁,连续的显示计数器物品的速度的实时效率</p></blockquote></li><li><p>mobcaps</p><blockquote><p>会持续显示刷怪上限信息</p></blockquote></li><li><p>pathfinding &lt;值&gt;</p><blockquote><p>能用粒子效果显示生物需要&lt;值&gt;毫秒以上完成的所有寻路尝试</p></blockquote></li><li><p>packets</p><blockquote><p>显示服务器端进出数据包的总数量</p></blockquote></li><li><p>tnt</p><blockquote><p>追踪世界中任何tnt实体,初始位置和爆炸位置</p></blockquote></li><li><p>projectiles</p><blockquote><p>追踪抛射物的每一刻的位置</p></blockquote></li><li><p>fallingBlock</p><blockquote><p>追踪实体方块的每一刻的位置</p></blockquote></li></ul></li></ul><h1 id="一个好用的计算器"><a href="#一个好用的计算器" class="headerlink" title="一个好用的计算器"></a>一个好用的计算器</h1><blockquote><p>什么这个能当计算器使用?好东西!</p><p>其实这是Scarpet的api,Scarpet是carpet游戏内编程工具,允许你运行自定义脚本,在不添加MOD的情况下添加游戏的额外特性</p></blockquote><p>script run 1+1</p><h1 id="一些在早期版本中存在的功能"><a href="#一些在早期版本中存在的功能" class="headerlink" title="一些在早期版本中存在的功能"></a>一些在早期版本中存在的功能</h1><h1 id="在世界中生成游戏结构"><a href="#在世界中生成游戏结构" class="headerlink" title="在世界中生成游戏结构"></a>在世界中生成游戏结构</h1><p>script run plop(x,y,z,’end_city’) #生成末地城</p><h1 id="来改变群系"><a href="#来改变群系" class="headerlink" title="来改变群系"></a>来改变群系</h1><p>script scan x1 y1 z1 x2 y2 z2 x y z set_biome(_,’swamp’) </p><p>script run set_biome(x,y,z,’swamp’) #改变生物群系为沼泽</p><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><blockquote><p>Carpet扩展Mod (carpet extra mod)包含一些非原版但是仍然非常酷的功能, 例如自动合成台、发射器放置方块、甚至发射器更多的功能</p></blockquote><p>如何安装carpet mod</p><blockquote><p>(提示：只需遵循fabric mod设置说明)</p></blockquote><h1 id="carpet配置文件"><a href="#carpet配置文件" class="headerlink" title="carpet配置文件"></a>carpet配置文件</h1><blockquote><p>对于服务器管理员 - 手动地配置carpet mod并让地毯指令在游戏中无法调用</p></blockquote><p>carpet.conf</p><p>#关闭所有carpet指令,可以在后面启用你需要的特性,玩家进入游戏后,看不到任何carpet指令和特性,除非你在下面开启 </p><p>locked</p><p>#例如下面的特性开启 </p><p>scriptsAutoload true </p><p>renewableCoral true</p><p>本文为我原创</p><p><a href="https://search.bilibili.com/article?keyword=Minecraft&from_source=article"> Minecraft </a><a href="https://search.bilibili.com/article?keyword=carpet&from_source=article">carpet </a><a href="https://search.bilibili.com/article?keyword=%E5%9C%B0%E6%AF%AF%E7%AB%AF&from_source=article">地毯端</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【Carpet Mod / 地毯模组】下载以及简单教程</title>
    <link href="/2022/04/22/%E3%80%90Carpet%20Mod%20%20%E5%9C%B0%E6%AF%AF%E6%A8%A1%E7%BB%84%E3%80%91%E4%B8%8B%E8%BD%BD%E4%BB%A5%E5%8F%8A%E7%AE%80%E5%8D%95%E6%95%99%E7%A8%8B/"/>
    <url>/2022/04/22/%E3%80%90Carpet%20Mod%20%20%E5%9C%B0%E6%AF%AF%E6%A8%A1%E7%BB%84%E3%80%91%E4%B8%8B%E8%BD%BD%E4%BB%A5%E5%8F%8A%E7%AE%80%E5%8D%95%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="【Carpet-Mod-x2F-地毯模组】下载以及简单教程"><a href="#【Carpet-Mod-x2F-地毯模组】下载以及简单教程" class="headerlink" title="【Carpet Mod &#x2F; 地毯模组】下载以及简单教程"></a>【Carpet Mod &#x2F; 地毯模组】下载以及简单教程</h1><p><a href="https://www.bilibili.com/read/game#rid=6?from=articleDetail">单机游戏 </a>2020-01-31 17:412.4万阅读 · 261喜欢 · 125评论</p><p><a href="https://space.bilibili.com/89876983"><img src="https://i1.hdslb.com/bfs/face/4117f2eaee4b89b46e5126af3bc0c4ddc0dd4a50.jpg@96w_96h_1c_1s.webp" alt="img"></a></p><p><a href="https://space.bilibili.com/89876983">Alan_SHIFT</a></p><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="“Carpet-Mod-x2F-地毯模组”-是用来干什么的？"><a href="#“Carpet-Mod-x2F-地毯模组”-是用来干什么的？" class="headerlink" title="“Carpet Mod &#x2F; 地毯模组” 是用来干什么的？"></a>“Carpet Mod &#x2F; 地毯模组” 是用来干什么的？</h1><p>我个人觉得有用的和常用的就下面这3个：</p><p>  \1. 弄一个假人帮你完成一些事情，比如帮你种树</p><p>  \2. 可以测试你做的机器的效率，比如帮你测试树场效率</p><p>  \3. “子弹时间”，放慢&#x2F;加快游戏运行速度，可以让玩家更加清晰地观看红石电路时如何运行的</p><p><img src="https://i0.hdslb.com/bfs/article/4adb9255ada5b97061e610b682b8636764fe50ed.png@progressive.webp" alt="img"></p><h1 id="如何下载-Carpet-Mod-x2F-地毯模组"><a href="#如何下载-Carpet-Mod-x2F-地毯模组" class="headerlink" title="如何下载 Carpet Mod &#x2F; 地毯模组"></a>如何下载 Carpet Mod &#x2F; 地毯模组</h1><p>【地毯模组（目前版本为1.3.7），适用于Java版我的世界1.15.2】</p><p>\1. 进入网址：</p><p><a href="https://github.com/gnembon/fabric-carpet/releases/tag/v1.3-frozen">https://github.com/gnembon/fabric-carpet/releases/tag/v1.3-frozen</a></p><p>\2. 在此网页的最下方找到</p><p>fabric-carpet-1.15.2-1.3.7+v200127.jar</p><p>\3. 单击这个蓝色的名字即可下载（文件大小为：788 KB）</p><p><img src="https://i0.hdslb.com/bfs/article/60b9abefdffbba499e1220972ba1942491bed6f4.png@942w_1046h_progressive.webp" alt="img">鼠标左键单击红色框内的文件</p><p><img src="https://i0.hdslb.com/bfs/article/4adb9255ada5b97061e610b682b8636764fe50ed.png@progressive.webp" alt="img"></p><h1 id="如何安装mod和使用mod："><a href="#如何安装mod和使用mod：" class="headerlink" title="如何安装mod和使用mod："></a>如何安装mod和使用mod：</h1><p>已经有很多很多人都分享了如何安装和使用mod的视频了，请自行去搜索</p><p><img src="https://i0.hdslb.com/bfs/article/4adb9255ada5b97061e610b682b8636764fe50ed.png@progressive.webp" alt="img"></p><h1 id="Carpet-Mod-的详细教程视频请观看："><a href="#Carpet-Mod-的详细教程视频请观看：" class="headerlink" title="Carpet Mod 的详细教程视频请观看："></a>Carpet Mod 的详细教程视频请观看：</h1><p>\1. Youtube&#x2F;油管:</p><p>链接：<a href="https://youtu.be/Lt-ooRGpLz4">https://youtu.be/Lt-ooRGpLz4</a></p><p>作者：gnembon</p><p>\2. 哔哩哔哩：</p><p><a href="https://www.bilibili.com/video/av70188771">bilibili站内链接</a></p><p>av号：<a href="https://www.bilibili.com/video/av70188771">AV70188771</a></p><p>搬运者：Aye10032，红石科技搬运组</p><p><img src="https://i0.hdslb.com/bfs/article/c3cbbfb94fc77eedc43800b3e7b7c6d7c44591cf.jpg@942w_590h_progressive.webp" alt="img">原作者的教程的视频封面</p><p><img src="https://i0.hdslb.com/bfs/article/4adb9255ada5b97061e610b682b8636764fe50ed.png@progressive.webp" alt="img"></p><h1 id="我的世界单位换算："><a href="#我的世界单位换算：" class="headerlink" title="我的世界单位换算："></a>我的世界单位换算：</h1><p>(Minecraft的循环程序是以每秒20周期的固定速度运行的。因此每刻发生在每0.05秒)</p><p>0.1秒 &#x3D;&#x3D; 1红石刻 &#x3D;&#x3D; 2游戏刻 &#x3D;&#x3D; 2 game tick &#x3D;&#x3D; 2 gt</p><p><img src="https://i0.hdslb.com/bfs/article/02db465212d3c374a43c60fa2625cc1caeaab796.png@progressive.webp" alt="img"></p><p><img src="https://i0.hdslb.com/bfs/article/02db465212d3c374a43c60fa2625cc1caeaab796.png@progressive.webp" alt="img"></p><p><img src="https://i0.hdslb.com/bfs/article/02db465212d3c374a43c60fa2625cc1caeaab796.png@progressive.webp" alt="img"></p><h1 id="——-指令-——"><a href="#——-指令-——" class="headerlink" title="——  指令  ——"></a>——  指令  ——</h1><h1 id="假人-相关指令："><a href="#假人-相关指令：" class="headerlink" title="假人 相关指令："></a>假人 相关指令：</h1><ol><li>开启召唤假人的功能：</li></ol><p>&#x2F;carpet commandPlayer true</p><ol start="2"><li>召唤名为Steve（名字可以自己设置）的假人：</li></ol><p>（假人的跟玩家的朝向一致，位置一致，游戏模式一致）</p><p>&#x2F;player Steve spawn</p><ol start="3"><li>让名为Steve的假人持续使用一项物品，例如持续右键</li></ol><p>（需要玩家先将物品扔给假人，让假人手持物品）</p><p>&#x2F;player Steve use continuous</p><ol start="4"><li>让名为Steve的假人持续使用左键</li></ol><p>&#x2F;player Steve attack continuous</p><ol start="5"><li>让名为Steve的假人使用一项物品，仅使用一次</li></ol><p>（需要玩家先将物品扔给假人，让假人手持物品）</p><p>&#x2F;player Steve use</p><ol start="6"><li>让名为Steve的假人停止一切动作</li></ol><p>&#x2F;player Steve stop</p><ol start="7"><li>将名为Steve的假人左右手上的物品交换</li></ol><p>&#x2F;player Steve swapHands</p><ol start="8"><li>移除名为Steve的假人：</li></ol><p>&#x2F;player Steve kill</p><p><img src="https://i0.hdslb.com/bfs/article/69355be6160d365303fd30ddd3cfa7867d45d547.png@942w_528h_progressive.webp" alt="img">在树场的“假人”Steve</p><p><img src="https://i0.hdslb.com/bfs/article/db75225feabec8d8b64ee7d3c7165cd639554cbc.png@progressive.webp" alt="img"></p><h1 id="计算红石机器效率-x2F-漏斗计数-相关指令："><a href="#计算红石机器效率-x2F-漏斗计数-相关指令：" class="headerlink" title="计算红石机器效率&#x2F;漏斗计数 相关指令："></a>计算红石机器效率&#x2F;漏斗计数 相关指令：</h1><p>\1) 开启漏斗计数功能：</p><p>&#x2F;carpet hopperCounters true</p><p>\2) 开始统计所有对准白色羊毛的漏斗吸收到的物品数量：</p><p>（在漏斗对准的地方放羊毛，换成其他16种颜色也行）</p><p>&#x2F;log counter white</p><p>\3) 按键盘上的Tab键查看，或者输入下面的指令来查看</p><p>&#x2F;counter white</p><p>\4) 根据实际时间计算效率，不是根据游戏内的时间来计算</p><p>&#x2F;counter white realtime</p><p>\5) 重置对准所有颜色的羊毛的漏斗的计数：</p><p>&#x2F;counter reset</p><p>\6) 重置对准白色羊毛的漏斗的计数：</p><p>（或者点击输入&#x2F;counter white后显示的消息中那个红色的叉叉）</p><p>&#x2F;counter white reset</p><p><img src="https://i0.hdslb.com/bfs/article/f0cf9836e1a2aead9723cfb68e02b2db8e635b20.png@942w_530h_progressive.webp" alt="img">漏斗需要对准羊毛</p><p><img src="https://i0.hdslb.com/bfs/article/db75225feabec8d8b64ee7d3c7165cd639554cbc.png@progressive.webp" alt="img"></p><h1 id="控制游戏速度-x2F-检测物体占用资源-相关指令："><a href="#控制游戏速度-x2F-检测物体占用资源-相关指令：" class="headerlink" title="控制游戏速度&#x2F;检测物体占用资源 相关指令："></a>控制游戏速度&#x2F;检测物体占用资源 相关指令：</h1><p>\1) 开启控制游戏速度功能：</p><p>&#x2F;carpet commandTick true</p><p>\2) 让游戏在一段时间内以最高速度运行，同时每一游戏刻的计算任务不变</p><p>（注意，此命令可以通过加快游戏速度来更快地获得长时间的测试数据）</p><p>（72000游戏刻刚好相当于一小时）</p><p>&#x2F;tick warp 72000</p><p>\3) 游戏加速结束后，会在左下角给出提示</p><p>（例如：24000游戏刻加速结束后，在左下角说：done，提示玩家此次加速结束）</p><p>&#x2F;tick warp 24000 say done</p><p>\4) 取消游戏加速</p><p>&#x2F;tick warp</p><p>\5) 冻结游戏</p><p>（再次输入即可解冻）</p><p>&#x2F;tick freeze</p><p>\6) 在冻结游戏的情况下，让游戏运行一小段时间后再次暂停</p><p>（例如，让游戏运行2游戏刻，也就是运行0.1秒）</p><p>&#x2F;tick step 2</p><p>\7) 调节游戏速度（正常速度为20，可换成其他自然数）：</p><p>（“子弹时间”，观看红石电路具体是如何运行的）</p><p>&#x2F;tick rate 20</p><p>\8) 检测什么东西占用了游戏资源，无关紧要或者可以忽略的不会显示</p><p>（任何资源占用应该小于1游戏刻，也就是50ms，如果大于50ms，说明游戏在掉刻）</p><p>&#x2F;tick health 200</p><p>\9) 检测实体占用的游戏资源</p><p>（左下角会从大到小给出实体占用资源的排序，可以针对性地减少占用资源多的实体的数量来降低卡顿）</p><p>&#x2F;tick entities</p><p><img src="https://i0.hdslb.com/bfs/article/b78c56429ced302dc667e2800ed14504b42cae74.png@942w_498h_progressive.webp" alt="img">用指令加速游戏时间来测试白桦树场的效率</p><h1 id="补充"><a href="#补充" class="headerlink" title="补充:"></a>补充:</h1><p>写这篇专栏的目的就是：</p><ol><li>给自己建个“云备忘录”，忘了一些指令打开看看就行</li><li>分享dalao做的非常好用的mod&#x2F;模组的一些常用的用法，毕竟功能和指令有点多</li><li>明示下一个视频是关于白桦树场的简单又高效的做法教程（应该会咕好一阵才会出视频吧）</li></ol><p>本文为我原创</p><p><a href="https://search.bilibili.com/article?keyword=%E6%88%91%E7%9A%84%E4%B8%96%E7%95%8C&from_source=article"> 我的世界 </a><a href="https://search.bilibili.com/article?keyword=%E7%BA%A2%E7%9F%B3&from_source=article">红石 </a><a href="https://search.bilibili.com/article?keyword=%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95&from_source=article">使用方法 </a><a href="https://search.bilibili.com/article?keyword=Minecraft&from_source=article">Minecraft </a>[Carpet Mod](<a href="https://search.bilibili.com/article?keyword=Carpet">https://search.bilibili.com/article?keyword=Carpet</a> Mod&amp;from_source&#x3D;article)</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ActiveMQ入门</title>
    <link href="/2022/04/21/ActiveMQ%E5%85%A5%E9%97%A8/"/>
    <url>/2022/04/21/ActiveMQ%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="1-ActiveMQ简介"><a href="#1-ActiveMQ简介" class="headerlink" title="1 ActiveMQ简介"></a>1 ActiveMQ简介</h2><h3 id="1-1-ActiveMQ是什么"><a href="#1-1-ActiveMQ是什么" class="headerlink" title="1.1 ActiveMQ是什么"></a>1.1 ActiveMQ是什么</h3><p>ActiveMQ是一个消息队列应用服务器（推送服务器）。支持JMS规范。</p><h4 id="1-1-1-JMS概述"><a href="#1-1-1-JMS概述" class="headerlink" title="1.1.1 JMS概述"></a>1.1.1 JMS概述</h4><p>JMS 全称：Java Message Service ，即为 Java 消息服务，是一套 java 消息服务的 API 接口。实现了 JMS 标准的系统，称之为 JMS Provider。</p><h4 id="1-1-2-消息队列"><a href="#1-1-2-消息队列" class="headerlink" title="1.1.2 消息队列"></a>1.1.2 消息队列</h4><p>消息队列是在消息的传输过程中保存消息的容器，提供一种不同进程或者同一进程不同线程直接通讯的方式。</p><p><img src="/images/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E9%80%9A%E8%AE%AF%E6%96%B9%E5%BC%8F.png"></p><ul><li>Producer：消息生产者，负责产生和发送消息到 Broker；</li><li>Broker：消息处理中心。负责消息存储、确认、重试等，一般其中会包含多个 queue；</li><li>Consumer：消息消费者，负责从 Broker 中获取消息，并进行相应处理；</li></ul><p>常见消息队列应用：</p><ol><li>ActiveMQ</li></ol><blockquote><p>ActiveMQ 是Apache出品，最流行的，能力强劲的开源消息总线。ActiveMQ 是一个完全支持JMS1.1和J2EE 1.4规范的 JMS Provider实现。</p></blockquote><ol start="2"><li>RabbitMQ</li></ol><blockquote><p>RabbitMQ是一个在AMQP基础上完成的，可复用的企业消息系统。他遵循Mozilla Public License开源协议。开发语言为Erlang。</p></blockquote><ol start="3"><li>RocketMQ</li></ol><blockquote><p>由阿里巴巴定义开发的一套消息队列应用服务。</p></blockquote><h3 id="1-2-ActiveMQ能做什么"><a href="#1-2-ActiveMQ能做什么" class="headerlink" title="1.2 ActiveMQ能做什么"></a>1.2 ActiveMQ能做什么</h3><ol><li>实现两个不同应用(程序)之间的消息通讯。</li><li>实现同一个应用，不同模块之间的消息通讯。（确保数据发送的稳定性）</li></ol><h3 id="1-3-ActiveMQ主要特点"><a href="#1-3-ActiveMQ主要特点" class="headerlink" title="1.3 ActiveMQ主要特点"></a>1.3 ActiveMQ主要特点</h3><ol><li>支持多语言、多协议客户端。语言: Java,C,C++,C#,Ruby,Perl,Python,PHP。应用协议： OpenWire, Stomp REST, WS Notification, XMPP, AMQP</li><li>对Spring的支持，ActiveMQ可以很容易整合到Spring的系统里面去。</li><li>支持高可用、高性能的集群模式。</li></ol><h2 id="2-入门示例"><a href="#2-入门示例" class="headerlink" title="2 入门示例"></a>2 入门示例</h2><h3 id="2-1-需求"><a href="#2-1-需求" class="headerlink" title="2.1 需求"></a>2.1 需求</h3><p>使用 ActiveMQ 实现消息队列模型。</p><h3 id="2-2-配置步骤说明"><a href="#2-2-配置步骤说明" class="headerlink" title="2.2 配置步骤说明"></a>2.2 配置步骤说明</h3><ol><li>搭建ActiveMQ消息服务器。</li><li>创建一个java项目。</li><li>创建消息生产者，发送消息。</li><li>创建消息消费者，接收消息。</li></ol><h3 id="2-3-第一部分：搭建ActiveMQ消息服务器"><a href="#2-3-第一部分：搭建ActiveMQ消息服务器" class="headerlink" title="2.3 第一部分：搭建ActiveMQ消息服务器"></a>2.3 第一部分：搭建ActiveMQ消息服务器</h3><h4 id="2-3-1-第一步：下载、上传至Linux，并解压"><a href="#2-3-1-第一步：下载、上传至Linux，并解压" class="headerlink" title="2.3.1 第一步：下载、上传至Linux，并解压"></a>2.3.1 第一步：下载、上传至Linux，并解压</h4><p><img src="https://app.yinxiang.com/shard/s10/res/6a1c4753-556e-4e59-aa9a-bc0f61794b97/fcf934ecb4c6bfc3d35b41acdcd0db48.jpg" alt="img"></p><h4 id="2-3-2-第二步：启动ActiveMQ服务器"><a href="#2-3-2-第二步：启动ActiveMQ服务器" class="headerlink" title="2.3.2 第二步：启动ActiveMQ服务器"></a>2.3.2 第二步：启动ActiveMQ服务器</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h4 id="2-3-3-第三步：浏览器访问-ActiveMQ-管理界面"><a href="#2-3-3-第三步：浏览器访问-ActiveMQ-管理界面" class="headerlink" title="2.3.3 第三步：浏览器访问 ActiveMQ 管理界面"></a>2.3.3 第三步：浏览器访问 ActiveMQ 管理界面</h4><h5 id="2-3-3-1-Step1：查看ActiveMQ管理界面的服务端口。在-conf-jetty-xml-中"><a href="#2-3-3-1-Step1：查看ActiveMQ管理界面的服务端口。在-conf-jetty-xml-中" class="headerlink" title="2.3.3.1 Step1：查看ActiveMQ管理界面的服务端口。在 /conf/jetty.xml 中"></a>2.3.3.1 Step1：查看ActiveMQ管理界面的服务端口。在 <code>/conf/jetty.xml</code> 中</h5><p><img src="https://app.yinxiang.com/shard/s10/res/13c2f74c-102a-4933-94f8-ff55698af2e5/bd4af40805acdeba73490f709b45c11d.jpg" alt="img"></p><p>默认端口为: 8161</p><h5 id="2-3-3-2-Step2：查看ActiveMQ用户、密码。在-conf-users-properties-中"><a href="#2-3-3-2-Step2：查看ActiveMQ用户、密码。在-conf-users-properties-中" class="headerlink" title="2.3.3.2 Step2：查看ActiveMQ用户、密码。在 /conf/users.properties 中"></a>2.3.3.2 Step2：查看ActiveMQ用户、密码。在 <code>/conf/users.properties</code> 中</h5><p>默认用户名密码均为 admin</p><h5 id="2-3-3-3-Step3：访问ActiveMQ管理控制台。地址：http-ip-8161"><a href="#2-3-3-3-Step3：访问ActiveMQ管理控制台。地址：http-ip-8161" class="headerlink" title="2.3.3.3 Step3：访问ActiveMQ管理控制台。地址：http://ip:8161/"></a>2.3.3.3 Step3：访问ActiveMQ管理控制台。地址：<a href="https://link.zhihu.com/?target=http://ip:8161/">http://ip:8161/</a></h5><blockquote><p>注意：若防火墙没有配置该服务的端口，必须在防火墙中配置。</p></blockquote><p><img src="https://app.yinxiang.com/shard/s10/res/1d95eea4-3427-46eb-b9db-450fe2567071/42221aa2fdb66d6d7320b8f65b8ffe89.jpg" alt="img"></p><p>点击图示选项后，进行登录</p><p><img src="https://app.yinxiang.com/shard/s10/res/4aeef141-e4a9-45cd-9135-570efa6396e8/c66e1d41d6cc07c91a4252fa8619b66c.jpg" alt="img"></p><p>然后成功进入管理界面</p><p><img src="https://app.yinxiang.com/shard/s10/res/3350677b-b14f-4d11-bcec-93de7e3ac31a/f18b1758998494e99858d9bcc91bdcc7.jpg" alt="img"></p><h3 id="2-4-第二部分：创建java项目，导入jar包"><a href="#2-4-第二部分：创建java项目，导入jar包" class="headerlink" title="2.4 第二部分：创建java项目，导入jar包"></a>2.4 第二部分：创建java项目，导入jar包</h3><p>ActiveMQ 的解压包中，提供了运行 ActiveMQ 需要的 jar 包。</p><p><img src="https://app.yinxiang.com/shard/s10/res/c458e8b9-fa52-4024-9b52-8b0fdb9b03f7/d4ba9a1079b2ae843bd4489eaae6ac75.jpg" alt="img"></p><p>ActiveMQ 是实现了 JMS 规范的。在实现消息服务的时候，必须基于 API 接口规范。</p><h4 id="2-4-1-JMS-常用的-API-说明"><a href="#2-4-1-JMS-常用的-API-说明" class="headerlink" title="2.4.1 JMS 常用的 API 说明"></a>2.4.1 JMS 常用的 API 说明</h4><p>下述 API 都是接口类型，定义在 javax.jms 包中，是 JMS 标准接口定义。ActiveMQ 完全实现这一套 api 标准。</p><h5 id="2-4-1-1-ConnectionFactory"><a href="#2-4-1-1-ConnectionFactory" class="headerlink" title="2.4.1.1 ConnectionFactory"></a>2.4.1.1 ConnectionFactory</h5><p>链接工厂, 用于创建链接的工厂类型。</p><h5 id="2-4-1-2-Connection"><a href="#2-4-1-2-Connection" class="headerlink" title="2.4.1.2 Connection"></a>2.4.1.2 Connection</h5><p>链接，用于建立访问ActiveMQ连接的类型, 由链接工厂创建。</p><h5 id="2-4-1-3-Session"><a href="#2-4-1-3-Session" class="headerlink" title="2.4.1.3 Session"></a>2.4.1.3 Session</h5><p>会话, 一次持久有效、有状态的访问，由链接创建。</p><h5 id="2-4-1-4-Destination-amp-Queue-amp-Topic"><a href="#2-4-1-4-Destination-amp-Queue-amp-Topic" class="headerlink" title="2.4.1.4 Destination &amp; Queue &amp; Topic"></a>2.4.1.4 Destination &amp; Queue &amp; Topic</h5><p>目的地, 即本次访问ActiveMQ消息队列的地址，由Session会话创建。</p><ol><li>interface Queue extends Destination</li><li>Queue：队列模型，只有一个消费者。消息一旦被消费，默认删除。</li><li>Topic：主题订阅中的消息，会发送给所有的消费者同时处理。</li></ol><h5 id="2-4-1-5-Message"><a href="#2-4-1-5-Message" class="headerlink" title="2.4.1.5 Message"></a>2.4.1.5 Message</h5><p>消息，在消息传递过程中数据载体对象，是所有消息【文本消息TextMessage，对象消息ObjectMessage等】具体类型的顶级接口，可以通过会话创建或通过会话从 ActiveMQ 服务中获取。</p><h5 id="2-4-1-6-MessageProducer"><a href="#2-4-1-6-MessageProducer" class="headerlink" title="2.4.1.6 MessageProducer"></a>2.4.1.6 MessageProducer</h5><p>消息生成者, 在一次有效会话中, 用于发送消息给ActiveMQ服务的工具，由Session会话创建。</p><h5 id="2-4-1-7-MessageCustomer"><a href="#2-4-1-7-MessageCustomer" class="headerlink" title="2.4.1.7 MessageCustomer"></a>2.4.1.7 MessageCustomer</h5><p>消息消费者【消息订阅者，消息处理者】, 在一次有效会话中, 用于ActiveMQ服务中获取消息的工具，由Session会话创建。</p><h3 id="2-5-第三部分：创建消息生成者，发送消息"><a href="#2-5-第三部分：创建消息生成者，发送消息" class="headerlink" title="2.5 第三部分：创建消息生成者，发送消息"></a>2.5 第三部分：创建消息生成者，发送消息</h3><blockquote><p>注意：ActiveMQ 服务接受消息的入口是 61616 端口，防火墙还需要开放此端口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.shubao.mq.activemq.ptp;<br><br><span class="hljs-keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> javax.jms.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@program</span>: spring</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 消息生产者</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: chris</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-04-21 10:30</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> JDK1.8</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyProducer</span> &#123;<br><br>    <span class="hljs-comment">//定义连接工厂</span><br>    ConnectionFactory connectionFactory;<br><br>    <span class="hljs-comment">//定义连接</span><br>    Connection connection;<br><br>    <span class="hljs-comment">//定义session会话</span><br>    Session session;<br><br>    <span class="hljs-comment">//定义消息目的地</span><br>    Destination destination;<br><br>    <span class="hljs-comment">//定义消息生产者</span><br>    MessageProducer producer;<br><br>    <span class="hljs-comment">//定义消息</span><br>    Message message;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JMSException &#123;<br>        <span class="hljs-comment">//创建连接工厂</span><br>        connectionFactory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActiveMQConnectionFactory</span>(<span class="hljs-string">&quot;tcp://localhost:61616&quot;</span>);<br>        <span class="hljs-comment">//创建连接</span><br>        connection = connectionFactory.createConnection();<br>        <span class="hljs-comment">//启动连接</span><br>        connection.start();<br>        <span class="hljs-comment">//创建session会话，第一个参数是是否开启事务，第二个参数是自动确认模式</span><br>        session = connection.createSession(<span class="hljs-literal">false</span>, Session.AUTO_ACKNOWLEDGE);<br>        <span class="hljs-comment">//创建消息目的地，Queue：消息类型是队列，Topic：消息类型是主题</span><br>        destination = session.createQueue(<span class="hljs-string">&quot;myQueue&quot;</span>);<br>        <span class="hljs-comment">//创建消息生产者</span><br>        producer = session.createProducer(destination);<br>        <span class="hljs-comment">//设置消息生产者的持久化</span><br>        <span class="hljs-comment">// producer.setDeliveryMode(DeliveryMode.PERSISTENT);</span><br>        <span class="hljs-comment">//创建消息</span><br>        message = session.createTextMessage(<span class="hljs-string">&quot;hello world&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMessage</span><span class="hljs-params">(String message)</span> <span class="hljs-keyword">throws</span> JMSException &#123;<br>        <span class="hljs-comment">//创建消息</span><br>        <span class="hljs-type">TextMessage</span> <span class="hljs-variable">textMessage</span> <span class="hljs-operator">=</span> session.createTextMessage(message);<br>        <span class="hljs-comment">//发送消息</span><br>        producer.send(textMessage);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JMSException &#123;<br>        <span class="hljs-comment">//关闭消息生产者</span><br>        producer.close();<br>        <span class="hljs-comment">//关闭会话</span><br>        session.close();<br>        <span class="hljs-comment">//关闭连接</span><br>        connection.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sentToActiveMQ</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">             * 创建连接工厂，由 ActiveMQ 实现。构造方法参数</span><br><span class="hljs-comment">             * userName 用户名</span><br><span class="hljs-comment">             * password 密码</span><br><span class="hljs-comment">             * brokerURL 访问 ActiveMQ 服务的路径地址，结构为: 协议名://主机地址:端口号</span><br><span class="hljs-comment">             */</span><br>            connectionFactory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActiveMQConnectionFactory</span>(<span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-string">&quot;tcp://127.0.0.1:61616&quot;</span>);<br>            <span class="hljs-comment">//创建连接</span><br>            connection = connectionFactory.createConnection();<br>            <span class="hljs-comment">//启动连接</span><br>            connection.start();<br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">             * 创建会话，参数含义:</span><br><span class="hljs-comment">             * 1.transacted - 是否使用事务</span><br><span class="hljs-comment">             * 2.acknowledgeMode - 消息确认机制，可选机制为：</span><br><span class="hljs-comment">             *  1）Session.AUTO_ACKNOWLEDGE - 自动确认消息</span><br><span class="hljs-comment">             *  2）Session.CLIENT_ACKNOWLEDGE - 客户端确认消息机制</span><br><span class="hljs-comment">             *  3）Session.DUPS_OK_ACKNOWLEDGE - 有副本的客户端确认消息机制</span><br><span class="hljs-comment">             */</span><br>            session = connection.createSession(<span class="hljs-literal">false</span>, Session.AUTO_ACKNOWLEDGE);<br>            <span class="hljs-comment">//创建消息目的地，也就是队列名，Queue：消息类型是队列，Topic：消息类型是主题</span><br>            destination = session.createQueue(<span class="hljs-string">&quot;myQueue&quot;</span>);<br>            <span class="hljs-comment">//创建消息生产者</span><br>            producer = session.createProducer(destination);<br>            <span class="hljs-comment">//创建消息</span><br>            message = session.createTextMessage(<span class="hljs-string">&quot;hello world&quot;</span>);<br>            <span class="hljs-comment">//发送消息</span><br>            producer.send(message);<br>        &#125; <span class="hljs-keyword">catch</span> (JMSException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">//关闭消息生产者</span><br>                <span class="hljs-keyword">if</span> (producer != <span class="hljs-literal">null</span>) &#123;<br>                    producer.close();<br>                &#125;<br>                <span class="hljs-comment">//关闭会话</span><br>                <span class="hljs-keyword">if</span> (session != <span class="hljs-literal">null</span>) &#123;<br>                    session.close();<br>                &#125;<br>                <span class="hljs-comment">//关闭连接</span><br>                <span class="hljs-keyword">if</span> (connection != <span class="hljs-literal">null</span>) &#123;<br>                    connection.close();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (JMSException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用测试方法执行后，可以看到成功将消息加入队列</p><p><img src="https://app.yinxiang.com/shard/s10/res/e7587e63-6b06-4825-aab8-de07cfd1c3cb/03a630300f7b7dc980e409180a66a95c.jpg" alt="img"></p><h3 id="2-6-第四部分：创建消息消费者，消费消息"><a href="#2-6-第四部分：创建消息消费者，消费消息" class="headerlink" title="2.6 第四部分：创建消息消费者，消费消息"></a>2.6 第四部分：创建消息消费者，消费消息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shubao.mq.activemq.ptp;<br><br><span class="hljs-keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;<br><br><span class="hljs-keyword">import</span> javax.jms.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@program</span>: spring</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 消费者</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: chris</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-04-21 10:30</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> JDK1.8</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConsumer</span> &#123;<br><br>    <span class="hljs-comment">//定义连接工厂</span><br>    ConnectionFactory connectionFactory;<br><br>    <span class="hljs-comment">//定义连接</span><br>    Connection connection;<br><br>    <span class="hljs-comment">//定义会话</span><br>    Session session;<br><br>    <span class="hljs-comment">//定义目的地</span><br>    Destination destination;<br><br>    <span class="hljs-comment">//定义消费者</span><br>    MessageConsumer consumer;<br><br>    <span class="hljs-comment">//定义消息</span><br>    Message message;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//创建连接工厂</span><br>        connectionFactory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActiveMQConnectionFactory</span>(<span class="hljs-string">&quot;tcp://localhost:61616&quot;</span>);<br>        <span class="hljs-comment">//创建连接</span><br>        connection = connectionFactory.createConnection();<br>        <span class="hljs-comment">//启动连接</span><br>        connection.start();<br>        <span class="hljs-comment">//创建会话</span><br>        session = connection.createSession(<span class="hljs-literal">false</span>, Session.AUTO_ACKNOWLEDGE);<br>        <span class="hljs-comment">//创建目的地</span><br>        destination = session.createQueue(<span class="hljs-string">&quot;myQueue&quot;</span>);<br>        <span class="hljs-comment">//创建消费者</span><br>        consumer = session.createConsumer(destination);<br><br>        <span class="hljs-comment">//接收消息</span><br>        message = consumer.receive();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//关闭消费者</span><br>        consumer.close();<br>        <span class="hljs-comment">//关闭会话</span><br>        session.close();<br>        <span class="hljs-comment">//关闭连接</span><br>        connection.close();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">MyConsumer</span> <span class="hljs-variable">myConsumer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyConsumer</span>();<br>        myConsumer.init();<br>        System.out.println(<span class="hljs-string">&quot;接收到的消息是：&quot;</span> + ((TextMessage) myConsumer.message).getText());<br>        myConsumer.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试结果</p><p>且后台管理界面也可以看到已被消费</p><p><img src="https://app.yinxiang.com/shard/s10/res/48b94acc-3d5a-4b7a-918a-c0bec206414d/3b846106d078408c3474da63593fe92a.jpg" alt="img"></p><h2 id="3-ActiveMQ监听器"><a href="#3-ActiveMQ监听器" class="headerlink" title="3 ActiveMQ监听器"></a>3 ActiveMQ监听器</h2><p>在前面的示例中，我们发现消费者每次只能消费一条消息。当队列中有多条消息的时候，我们需要多次运行消费者，才能消费完这些消息。我们希望一次将所有的消息全部接收，可以使用 ActiveMQ 监听器来监听队列，持续消费消息。</p><p>答：使用ActiveMQ监听器来监听队列，持续消费消息。</p><h3 id="3-1-配置步骤说明"><a href="#3-1-配置步骤说明" class="headerlink" title="3.1 配置步骤说明"></a>3.1 配置步骤说明</h3><ol><li>创建一个监听器对象。</li><li>修改消费者代码，加载监听器</li></ol><h3 id="3-2-配置步骤"><a href="#3-2-配置步骤" class="headerlink" title="3.2 配置步骤"></a>3.2 配置步骤</h3><h4 id="3-2-1-第一步：创建监听器-MyListener-类"><a href="#3-2-1-第一步：创建监听器-MyListener-类" class="headerlink" title="3.2.1 第一步：创建监听器 MyListener 类"></a>3.2.1 第一步：创建监听器 MyListener 类</h4><blockquote><p>自定义监听器需要实现 MessageListener 接口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shubao.mq.activemq.ptp;<br><br><span class="hljs-keyword">import</span> javax.jms.Message;<br><span class="hljs-keyword">import</span> javax.jms.MessageListener;<br><span class="hljs-keyword">import</span> javax.jms.TextMessage;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@program</span>: spring</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 消息监听器</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: chris</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-04-21 10:30</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> JDK1.8</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MessageListener</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onMessage</span><span class="hljs-params">(Message message)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">TextMessage</span> <span class="hljs-variable">textMessage</span> <span class="hljs-operator">=</span> (TextMessage) message;<br>            System.out.println(<span class="hljs-string">&quot;收到消息：&quot;</span> + textMessage.getText());<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-2-2-第二步：修改MyConsumer代码，加载监听器"><a href="#3-2-2-第二步：修改MyConsumer代码，加载监听器" class="headerlink" title="3.2.2 第二步：修改MyConsumer代码，加载监听器"></a>3.2.2 第二步：修改MyConsumer代码，加载监听器</h4><blockquote><p>监听器需要持续加载，因此需要使消费程序不结束。这里我们使用输入流阻塞消费线程结束。（实际开发中，使用web项目加载）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shubao.mq.activemq.ptp;<br><br><span class="hljs-keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;<br><br><span class="hljs-keyword">import</span> javax.jms.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@program</span>: spring</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 消费者</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: chris</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-04-21 10:30</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> JDK1.8</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConsumer</span> &#123;<br><br>    <span class="hljs-comment">//定义连接工厂</span><br>    ConnectionFactory connectionFactory;<br><br>    <span class="hljs-comment">//定义连接</span><br>    Connection connection;<br><br>    <span class="hljs-comment">//定义会话</span><br>    Session session;<br><br>    <span class="hljs-comment">//定义目的地</span><br>    Destination destination;<br><br>    <span class="hljs-comment">//定义消费者</span><br>    MessageConsumer consumer;<br><br>    <span class="hljs-comment">//定义消息</span><br>    Message message;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//创建连接工厂</span><br>        connectionFactory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActiveMQConnectionFactory</span>(<span class="hljs-string">&quot;tcp://localhost:61616&quot;</span>);<br>        <span class="hljs-comment">//创建连接</span><br>        connection = connectionFactory.createConnection();<br>        <span class="hljs-comment">//启动连接</span><br>        connection.start();<br>        <span class="hljs-comment">//创建会话</span><br>        session = connection.createSession(<span class="hljs-literal">false</span>, Session.AUTO_ACKNOWLEDGE);<br>        <span class="hljs-comment">//创建目的地</span><br>        destination = session.createQueue(<span class="hljs-string">&quot;myQueue&quot;</span>);<br>        <span class="hljs-comment">//创建消费者</span><br>        consumer = session.createConsumer(destination);<br><br>        <span class="hljs-comment">//接收消息</span><br>        <span class="hljs-comment">// message = consumer.receive();</span><br><br>        <span class="hljs-comment">//加载监听器</span><br>        consumer.setMessageListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyListener</span>());<br><br>        <span class="hljs-comment">//监听器需要持续加载，所以需要一直调用，使用输入流的方式阻塞当前线程结束</span><br>        System.in.read();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//关闭消费者</span><br>        consumer.close();<br>        <span class="hljs-comment">//关闭会话</span><br>        session.close();<br>        <span class="hljs-comment">//关闭连接</span><br>        connection.close();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">MyConsumer</span> <span class="hljs-variable">myConsumer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyConsumer</span>();<br>        myConsumer.init();<br>        System.out.println(<span class="hljs-string">&quot;接收到的消息是：&quot;</span> + ((TextMessage) myConsumer.message).getText());<br>        myConsumer.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3-测试"><a href="#3-3-测试" class="headerlink" title="3.3 测试"></a>3.3 测试</h3><p>先添加 5 条消息到队列</p><p><img src="https://app.yinxiang.com/shard/s10/res/b08580b7-5fd2-46af-bef0-370a52c88a71/5ebde2abd78a62620dd3b467d56bc19a.jpg" alt="img"></p><p>运行 Consumer 的测试程序，可以看到连续接受了 5 条消息，且接续添加会继续输出消息。</p><h2 id="4-ActiveMQ消息服务模式"><a href="#4-ActiveMQ消息服务模式" class="headerlink" title="4 ActiveMQ消息服务模式"></a>4 ActiveMQ消息服务模式</h2><p>在入门示例中，只能向一个消费者发送消息。但是有一些场景，需求有多个消费者都能接收到消息，比如：美团 APP 每天的消息推送。该如何实现呢？</p><p>ActiveMQ是通过不同的服务模式来解决这个问题的。要搞清楚这个问题，必须知道ActiveMQ有哪些应用模式。</p><h3 id="4-1-PTP模式（point-to-point）"><a href="#4-1-PTP模式（point-to-point）" class="headerlink" title="4.1 PTP模式（point to point）"></a>4.1 PTP模式（point to point）</h3><p>消息模型</p><p><img src="https://app.yinxiang.com/shard/s10/res/07d3b4e3-5424-4029-810a-2821c1d4fbc9/521364d5b2704bd9d94707f611fab6ee.jpg" alt="img"></p><ol><li>消息生产者生产消息发送到queue中，然后消息消费者从queue中取出并且消费消息。</li><li>消息被消费以后，queue中不再有存储，所以消息消费者不可能消费到已经被消费的消息。</li><li>Queue支持存在多个消费者，但是对一个消息而言，只会有一个消费者可以消费、其它的则不能消费此消息了。</li><li>当消费者不存在时，消息会一直保存，直到有消费消费</li></ol><blockquote><p>入门示例就是采用的这种 PTP 服务模式</p></blockquote><h3 id="4-2-TOPIC（主题订阅模式）"><a href="#4-2-TOPIC（主题订阅模式）" class="headerlink" title="4.2 TOPIC（主题订阅模式）"></a>4.2 TOPIC（主题订阅模式）</h3><p>消息模型</p><p><img src="https://app.yinxiang.com/shard/s10/res/64d3faa7-7e49-49c2-9819-95af7d6184ee/2209959e1f5abf1d75100faa40807c91.jpg" alt="img"></p><ol><li>消息生产者（发布）将消息发布到topic中，同时有多个消息消费者（订阅）消费该消息。</li><li>和点对点方式不同，发布到topic的消息会被所有订阅者消费。</li><li>当生产者发布消息，不管是否有消费者。都不会保存消息</li></ol><p>所以，主题订阅模式下，&#x3D;&#x3D;一定要先有消息的消费者(订阅者)，后有消息的生产者(发布者)&#x3D;&#x3D;。</p><h2 id="5-Topic模式实现"><a href="#5-Topic模式实现" class="headerlink" title="5 Topic模式实现"></a>5 Topic模式实现</h2><h3 id="5-1-配置步骤说明"><a href="#5-1-配置步骤说明" class="headerlink" title="5.1 配置步骤说明"></a>5.1 配置步骤说明</h3><ol><li><del>搭建ActiveMQ消息服务器。</del></li><li>创建主题订阅者。</li><li>创建主题发布者。</li></ol><h3 id="5-2-配置步骤"><a href="#5-2-配置步骤" class="headerlink" title="5.2 配置步骤"></a>5.2 配置步骤</h3><h4 id="5-2-1-第一部分：搭建消息服务器。（已实现）"><a href="#5-2-1-第一部分：搭建消息服务器。（已实现）" class="headerlink" title="5.2.1 第一部分：搭建消息服务器。（已实现）"></a>5.2.1 <del>第一部分：搭建消息服务器。（已实现）</del></h4><h4 id="5-2-2-第二部分：创建主题订阅者-MySubscriber"><a href="#5-2-2-第二部分：创建主题订阅者-MySubscriber" class="headerlink" title="5.2.2 第二部分：创建主题订阅者 MySubscriber"></a>5.2.2 第二部分：创建主题订阅者 MySubscriber</h4><p>主题订阅模式下，可以有多个订阅者。我们这里用多线程来模拟。创建 MySubscriber 类，实现 Runnable 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shubao.mq.activemq.topic;<br><br><span class="hljs-keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;<br><br><span class="hljs-keyword">import</span> javax.jms.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@program</span>: spring</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 主题订阅者</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: chris</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-04-21 10:52</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> JDK1.8</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MySubscriber</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br><br>    <span class="hljs-comment">// 定义连接工厂</span><br>    TopicConnectionFactory factory;<br><br>    <span class="hljs-comment">// JMS连接，属于Pub/Sub方式的连接</span><br>    TopicConnection connection;<br><br>    <span class="hljs-comment">// JMS会话，属于Pub/Sub方式的会话</span><br>    TopicSession session;<br><br>    <span class="hljs-comment">// 定义消息队列，消息队列名称为：TEST_QUEUE</span><br>    Topic topic;<br><br>    <span class="hljs-comment">// 主题订阅者</span><br>    TopicSubscriber subscriber;<br><br>    <span class="hljs-comment">// 定义消息</span><br>    Message message;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 创建连接工厂</span><br>            factory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActiveMQConnectionFactory</span>(<span class="hljs-string">&quot;tcp://localhost:61616&quot;</span>);<br>            <span class="hljs-comment">// 通过工厂创建连接</span><br>            connection = factory.createTopicConnection();<br>            <span class="hljs-comment">// 开启连接</span><br>            connection.start();<br>            <span class="hljs-comment">// 创建会话</span><br>            session = connection.createTopicSession(<span class="hljs-literal">false</span>, TopicSession.AUTO_ACKNOWLEDGE);<br>            <span class="hljs-comment">// 创建消息队列 参数：主题名称，是否独占，是否支持事务（topic模型）</span><br>            topic = session.createTopic(<span class="hljs-string">&quot;topic&quot;</span>);<br>            <span class="hljs-comment">// 创建订阅者</span><br>            subscriber = session.createSubscriber(topic);<br>            <span class="hljs-comment">// 接收消息，会阻塞线程</span><br>            message = subscriber.receive();<br>            <span class="hljs-comment">// 打印消息</span><br>            System.out.println(<span class="hljs-string">&quot;收到消息：&quot;</span> + ((TextMessage) message).getText());<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 关闭资源</span><br>                <span class="hljs-keyword">if</span> (subscriber != <span class="hljs-literal">null</span>) &#123;<br>                    subscriber.close();<br>                &#125;<br>                <span class="hljs-keyword">if</span> (session != <span class="hljs-literal">null</span>) &#123;<br>                    session.close();<br>                &#125;<br>                <span class="hljs-keyword">if</span> (connection != <span class="hljs-literal">null</span>) &#123;<br>                    connection.close();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (JMSException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意 &#x3D;&#x3D;junit 不支持多线程测试&#x3D;&#x3D;，需要使用 main 方法执行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shubao.mq.activemq.topic;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@program</span>: spring</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: Topic模式测试类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: chris</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-04-21 11:03</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> JDK1.8</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ActiveMQTest</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">MySubscriber</span> <span class="hljs-variable">subscriber</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MySubscriber</span>();<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(subscriber);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(subscriber);<br>        t1.start();<br>        t2.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动程序后可以从管理面板看到该 topic 下有两个订阅者</p><p><img src="https://app.yinxiang.com/shard/s10/res/7eb93ed8-6261-48ef-b45b-c06f8053e104/523443a72c1ea5b8a7ba4f557f2b8c3a.jpg" alt="img"></p><h4 id="5-2-3-第三部分：创建主题发布者-MyPublisher"><a href="#5-2-3-第三部分：创建主题发布者-MyPublisher" class="headerlink" title="5.2.3 第三部分：创建主题发布者 MyPublisher"></a>5.2.3 第三部分：创建主题发布者 MyPublisher</h4><p>创建 MyPublish 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shubao.mq.activemq.topic;<br><br><span class="hljs-keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;<br><br><span class="hljs-keyword">import</span> javax.jms.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@program</span>: spring</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 主题发布者</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: chris</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-04-21 11:07</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> JDK1.8</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyPublisher</span> &#123;<br><br>    <span class="hljs-comment">// 定义连接工厂</span><br>    TopicConnectionFactory factory;<br><br>    <span class="hljs-comment">// 定义连接</span><br>    TopicConnection connection;<br><br>    <span class="hljs-comment">// 定义会话</span><br>    TopicSession session;<br><br>    <span class="hljs-comment">// 定义发布者</span><br>    TopicPublisher publisher;<br><br>    <span class="hljs-comment">// 定义主题</span><br>    Topic topic;<br><br>    <span class="hljs-comment">// 定义消息</span><br>    Message message;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">publishTopic</span><span class="hljs-params">(String topicName, String publishText)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 创建连接工厂</span><br>            factory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActiveMQConnectionFactory</span>(<span class="hljs-string">&quot;tcp://localhost:61616&quot;</span>);<br>            <span class="hljs-comment">// 通过连接工厂创建连接</span><br>            connection = factory.createTopicConnection();<br>            <span class="hljs-comment">// 启动连接</span><br>            connection.start();<br>            <span class="hljs-comment">// 创建会话</span><br>            session = connection.createTopicSession(<span class="hljs-literal">false</span>, TopicSession.AUTO_ACKNOWLEDGE);<br>            <span class="hljs-comment">// 创建主题</span><br>            topic = session.createTopic(topicName);<br>            <span class="hljs-comment">// 创建发布者</span><br>            publisher = session.createPublisher(topic);<br>            <span class="hljs-comment">// 创建消息</span><br>            message = session.createTextMessage(publishText);<br>            <span class="hljs-comment">// 发送消息</span><br>            publisher.send(message);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 关闭资源</span><br>                <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != publisher) &#123;<br>                    publisher.close();<br>                &#125;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != session) &#123;<br>                    session.close();<br>                &#125;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != connection) &#123;<br>                    connection.close();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (JMSException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>新增测试方法，发布主题消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shubao.mq.activemq.topic;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@program</span>: spring</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 发布Topic消息测试类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: chris</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-04-21 11:18</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> JDK1.8</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PublisherTest</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">topicPublishTest</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">MyPublisher</span> <span class="hljs-variable">publisher</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyPublisher</span>();<br>        publisher.publishTopic(<span class="hljs-string">&quot;topic&quot;</span>, <span class="hljs-string">&quot;hello, topic&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-2-4-第四部分：执行测试"><a href="#5-2-4-第四部分：执行测试" class="headerlink" title="5.2.4 第四部分：执行测试"></a>5.2.4 第四部分：执行测试</h4><p>执行 topicPublisherTest，可以看到订阅者立即收到了消息</p><p><img src="https://app.yinxiang.com/shard/s10/res/f2078f97-4c7e-4c8e-ba43-24c470248206/31f1441e8725ffbd6523ddf15f63d0e0.jpg" alt="img"></p><p>同时在管理页面也能看到一条消息进入，被读取了两次。</p><p><img src="https://app.yinxiang.com/shard/s10/res/eb6a652f-51cb-439b-995f-065c893be329/bf6562f900272d674d66f13010f90f16.jpg" alt="img"></p><h2 id="6-ActiveMQ持久化"><a href="#6-ActiveMQ持久化" class="headerlink" title="6 ActiveMQ持久化"></a>6 ActiveMQ持久化</h2><p>当队列中有未被消费的消息时，我们重新启动ActiveMQ服务器后，发现消息仍然在队列中。</p><p>ActiveMQ 是支持持久化的，可以永久保存消息。消息是保存在内存中的。当内存空间不足，或者ActiveMQ服务关闭的时候，消息会被持久化到磁盘上。被消费的时候，再加载到内存空间中。</p><p>ActiveMQ持久化方式在 <code>activemq/conf/activemq.xml</code> 中指定</p><h3 id="6-1-kahadb-方式"><a href="#6-1-kahadb-方式" class="headerlink" title="6.1 kahadb 方式"></a>6.1 kahadb 方式</h3><p>kahadb 方式是 ActiveMQ 默认的持久化策略。不会保存已经被消费过的消息。从配置文件中可以看到默认的存储地址，也就是 <code>/usr/local/activemq/data/kahadb</code></p><p><img src="/images/image-20220421122020902.png" alt="image-20220421122020902"></p><h3 id="6-2-AMQ方式（已过时）"><a href="#6-2-AMQ方式（已过时）" class="headerlink" title="6.2 AMQ方式（已过时）"></a>6.2 AMQ方式（已过时）</h3><p>5.3 版本之前，现在已经过时，不考虑。</p><h3 id="6-3-JDBC持久化方式"><a href="#6-3-JDBC持久化方式" class="headerlink" title="6.3 JDBC持久化方式"></a>6.3 JDBC持久化方式</h3><p>ActiveMQ 可以将数据持久化到数据库中，支持使用任意的数据库。</p><h4 id="6-3-1-配置步骤说明"><a href="#6-3-1-配置步骤说明" class="headerlink" title="6.3.1 配置步骤说明"></a>6.3.1 配置步骤说明</h4><ol><li>创建数据库</li><li>添加数据库连接 jar 依赖到 ActiveMQ 服务器</li><li>修改 ActiveMQ 配置，创建数据源。</li><li>修改 ActiveMQ 配置，修改持久化方式为 jdbc</li></ol><h4 id="6-3-2配置步骤"><a href="#6-3-2配置步骤" class="headerlink" title="6.3.2配置步骤"></a>6.3.2配置步骤</h4><h5 id="6-3-2-1-第一步：创建数据库"><a href="#6-3-2-1-第一步：创建数据库" class="headerlink" title="6.3.2.1 第一步：创建数据库"></a>6.3.2.1 第一步：创建数据库</h5><p>数据库最好不要跟 ActiveMQ 服务器在同一台机器。因为当 cpu 线程资源不足时，往队列中写入消息时，如果数据库上一次持久化还没结束，容易造成线程阻塞。</p><p>这里数据库建立在宿主机上，ActiveMQ 服务部署在虚拟机。</p><h5 id="6-3-2-2-第二步：添加jar依赖"><a href="#6-3-2-2-第二步：添加jar依赖" class="headerlink" title="6.3.2.2 第二步：添加jar依赖"></a>6.3.2.2 第二步：添加jar依赖</h5><p>配置数据源时，是支持连接池的，这里使用 druid 作为连接池。将 jdbc 驱动、druid 的 jar 包上传到 <code>activemq/lib/</code> 目录下</p><p><img src="https://app.yinxiang.com/shard/s10/res/f5d55b1a-d428-4084-978e-9c7c92187a2d/35b7bdcbdda625f4ed5e4e114e14ad76.jpg" alt="img"></p><h5 id="6-3-2-3-第三步：修改-activemq-conf-activemq-xml，创建数据源"><a href="#6-3-2-3-第三步：修改-activemq-conf-activemq-xml，创建数据源" class="headerlink" title="6.3.2.3 第三步：修改 activemq/conf/activemq.xml，创建数据源"></a>6.3.2.3 第三步：修改 <code>activemq/conf/activemq.xml</code>，创建数据源</h5><p>注意在 <code>&lt;broker&gt;</code> 节点外，创建数据源。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mysql-ds&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;close&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/activemq?serverTimezone=UTC<span class="hljs-symbol">&amp;amp;</span>useUnicode=true<span class="hljs-symbol">&amp;amp;</span>characterEncoding=utf8<span class="hljs-symbol">&amp;amp;</span>useSSL=false&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1106135&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxActive&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;poolPreparedStatements&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/images/image-20220421115732271.png" alt="image-20220421115732271"></p><h5 id="6-3-2-4-第四步：修改-conf-activemq-xml-，修改为-jdbc-持久化方式"><a href="#6-3-2-4-第四步：修改-conf-activemq-xml-，修改为-jdbc-持久化方式" class="headerlink" title="6.3.2.4 第四步：修改 /conf/activemq.xml ，修改为 jdbc 持久化方式"></a>6.3.2.4 第四步：修改 <code>/conf/activemq.xml</code> ，修改为 jdbc 持久化方式</h5><p>在 <code>&lt;broker&gt;</code> 节点内部，注释 kahadb 方式，添加 jdbc 方式。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">persistenceAdapter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">jdbcPersistenceAdapter</span> <span class="hljs-attr">dataSource</span>=<span class="hljs-string">&quot;#mysql-ds&quot;</span> <span class="hljs-attr">createTablesOnStartup</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">persistenceAdapter</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/images/image-20220421115832777.png" alt="image-20220421115832777"></p><h4 id="6-3-3-测试"><a href="#6-3-3-测试" class="headerlink" title="6.3.3 测试"></a>6.3.3 测试</h4><p>进入 <code>activemq/bin</code> 目录，使用命令 <code>./activemq restart</code> 重新启动 ActiveMQ。可以看到，数据库中新增了三张表。</p><p>运行入门示例中的测试类，往队列中写入一条消息，可以在表activemq_msgs中，看到新写入了一条数据</p><p><img src="/images/image-20220421120024482.png" alt="image-20220421120024482"></p><h4 id="6-3-4-三张表说明"><a href="#6-3-4-三张表说明" class="headerlink" title="6.3.4 三张表说明"></a>6.3.4 三张表说明</h4><ul><li>activemq_msgs ：存储消息，Queue和Topic都存储在这个表中</li><li>activemq_acks ：用于存储订阅关系。订阅模式下有效</li><li>activemq_lock ：集群模式下，存储主从节点关系</li></ul><h4 id="6-3-5-补充说明"><a href="#6-3-5-补充说明" class="headerlink" title="6.3.5 补充说明"></a>6.3.5 补充说明</h4><p>jdbc 持久化方式，只要Mysql数据库稳定运行，就能保证队列中消息的安全。安全级别高，但是效率低。因此，在实际开发中，除非是像银行这类对数据安全极高的业务，我们一般都是使用默认持久化方式 kahadb。</p><h2 id="7-ActiveMQ应用场景"><a href="#7-ActiveMQ应用场景" class="headerlink" title="7 ActiveMQ应用场景"></a>7 ActiveMQ应用场景</h2><h3 id="7-1-多模块解耦-模块之间消息通讯"><a href="#7-1-多模块解耦-模块之间消息通讯" class="headerlink" title="7.1 多模块解耦(模块之间消息通讯)"></a>7.1 多模块解耦(模块之间消息通讯)</h3><p>我们判断一个程序的优劣，有一个很重要的指标：高内聚、低耦合。</p><ul><li>高内聚：同一个模块中，功能是高度紧密的。</li><li>低耦合：各模块之间，业务尽量不要交叉。</li></ul><p>但是有一些业务功能，必须涉及到两个不同的业务，那我们就要想办法，尽量将它们解耦。以我们前面学习的 solr 为例，我们知道 solr 的数据来自数据库。这就意味着，当数据库中的商品发生变化时，我们需要同步更新索引库。这个时候我们就可以使用消息队列模型来解耦，添加添加业务和同步索引库业务。</p><p><img src="https://app.yinxiang.com/shard/s10/res/18dbf7b9-0912-49e5-8a5b-f87864e079cd/59175f7ca391dc4894ffc8318207cd01.jpg" alt="img"></p><h3 id="7-2-流量削峰（解决并发请求）"><a href="#7-2-流量削峰（解决并发请求）" class="headerlink" title="7.2 流量削峰（解决并发请求）"></a>7.2 流量削峰（解决并发请求）</h3><p><img src="https://app.yinxiang.com/shard/s10/res/6bfd8e9d-f568-4599-a860-0ed37b310c63/7f30e7239dbbc2274e1f19efa84f8bcb.jpg" alt="img"></p><p>订单处理，就可以由前端应用将订单信息放到队列，后端应用从队列里依次获得消息处理，高峰时的大量订单可以积压在队列里慢慢处理掉。由于同步通常意味着阻塞，而大量线程的阻塞会降低计算机的性能。</p><h3 id="7-3-日志处理"><a href="#7-3-日志处理" class="headerlink" title="7.3 日志处理"></a>7.3 日志处理</h3><p>日志处理是指将消息队列用在日志处理中，比如Kafka的应用，解决大量日志传输的问题。架构简化如下：</p><p><img src="https://app.yinxiang.com/shard/s10/res/69941a8e-44bd-48e7-bd48-2c6668972014/52b799e3f6942ac8e960368d2a80ede9.jpg" alt="img"></p><h3 id="7-4-同步业务异步处理"><a href="#7-4-同步业务异步处理" class="headerlink" title="7.4 同步业务异步处理"></a>7.4 同步业务异步处理</h3><p>需要：当我们在网站注册的时候，有时候需要认证邮箱或者手机号，这个时候保存数据到数据库之前，需要先等待认证结束。如果说认证程序耗时比较大，会影响影响用户注册的业务。这个时候，我们可以使用消息队列模型，将同步执行的业务，通过队列，变成异步处理。</p><p><img src="https://app.yinxiang.com/shard/s10/res/5b72f020-058a-455f-8e70-a6c660f7954b/387a9ba2ea3b172a45726d5d4acd9eb0.jpg" alt="img"></p><ol><li>在保存数据到数据库的时候，只需要将用户的邮箱写入队列，不需要等待邮箱认证程序执行结束，才把数据保存到数据库。</li><li>认证程序，通过监听队列，从中获取用户的邮箱地址，发送认证链接。</li></ol><h2 id="8-Spring-整合-ActiveMQ"><a href="#8-Spring-整合-ActiveMQ" class="headerlink" title="8 Spring 整合 ActiveMQ"></a>8 Spring 整合 ActiveMQ</h2><h3 id="8-1-必要性"><a href="#8-1-必要性" class="headerlink" title="8.1 必要性"></a>8.1 必要性</h3><p>Spring已经整合了jms规范了(spring-jms.jar)，而ActiveMQ是实现了jms规范的。这就意味着Spring整合ActiveMQ是非常方便的。并且Spring-jms，提供了一个JmsTemplate类，用来简化消息读写的业务代码。Spring整合ActivMQ之后，就可以使用该类，简化开发。</p><h3 id="8-2-需求"><a href="#8-2-需求" class="headerlink" title="8.2 需求"></a>8.2 需求</h3><p>使用Spring整合ActiveMQ，模拟限时抢购下的流量削峰问题。</p><h3 id="8-3-配置步骤"><a href="#8-3-配置步骤" class="headerlink" title="8.3 配置步骤"></a>8.3 配置步骤</h3><h4 id="8-3-1-第一部分：创建项目（使用maven）"><a href="#8-3-1-第一部分：创建项目（使用maven）" class="headerlink" title="8.3.1 第一部分：创建项目（使用maven）"></a>8.3.1 第一部分：创建项目（使用maven）</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.oza<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>activemq-demo04-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><span class="hljs-comment">&lt;!-- activemq --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.activemq<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>activemq-all<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.15.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.activemq<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>activemq-pool<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.15.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- spring jms --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jms<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.8.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.8.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- jsp相关 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- jms api --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.jms<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.jms-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="8-3-2-第二部分：spring整合springmvc"><a href="#8-3-2-第二部分：spring整合springmvc" class="headerlink" title="8.3.2 第二部分：spring整合springmvc"></a>8.3.2 第二部分：spring整合springmvc</h4><h5 id="8-3-2-1-第一步：修改web-xml，配置springmvc核心控制器"><a href="#8-3-2-1-第一步：修改web-xml，配置springmvc核心控制器" class="headerlink" title="8.3.2.1 第一步：修改web.xml，配置springmvc核心控制器"></a>8.3.2.1 第一步：修改web.xml，配置springmvc核心控制器</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span> <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;2.5&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">display-name</span>&gt;</span>activemq-demo04-spring<span class="hljs-tag">&lt;/<span class="hljs-name">display-name</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>characterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>characterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>dispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:spring*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>dispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="8-3-2-2-第二步：配置springmvc-xml核心配置文件"><a href="#8-3-2-2-第二步：配置springmvc-xml核心配置文件" class="headerlink" title="8.3.2.2 第二步：配置springmvc.xml核心配置文件"></a>8.3.2.2 第二步：配置springmvc.xml核心配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span><span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span><span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span><span class="hljs-attr">xmlns:jms</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/jms&quot;</span><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms-4.3.xsdhttp://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsdhttp://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsdhttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;org.oza.activemq&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="8-3-2-3-第三步：创建相关jsp页面"><a href="#8-3-2-3-第三步：创建相关jsp页面" class="headerlink" title="8.3.2.3 第三步：创建相关jsp页面"></a>8.3.2.3 第三步：创建相关jsp页面</h5><p>订单页面：order.jsp</p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erb"><span class="language-xml">&lt;%</span><span class="language-ruby">@ page language=<span class="hljs-string">&quot;java&quot;</span> contentType=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span></span><span class="language-xml">%&gt;<span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Insert title here<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;save&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span>用户编号：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userId&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>订单金额：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;price&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>结果页面：success.jsp</p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erb"><span class="language-xml">&lt;%</span><span class="language-ruby">@ page language=<span class="hljs-string">&quot;java&quot;</span> contentType=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span></span><span class="language-xml">%&gt;<span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Insert title here<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>订单提交成功!!!请稍后去结算中心支付。。。<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h5 id="8-3-2-4-第四步：java代码实现"><a href="#8-3-2-4-第四步：java代码实现" class="headerlink" title="8.3.2.4 第四步：java代码实现"></a>8.3.2.4 第四步：java代码实现</h5><p>创建 Order 类</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package org.<span class="hljs-property">oza</span>.<span class="hljs-property">activemq</span>.<span class="hljs-property">pojo</span>;<span class="hljs-keyword">import</span> java.<span class="hljs-property">io</span>.<span class="hljs-property">Serializable</span>;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Order</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span>&#123;<span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> final long serialVersionUID = 3622062034498580108L;<span class="hljs-keyword">private</span> <span class="hljs-title class_">Integer</span> id;<span class="hljs-keyword">private</span> <span class="hljs-title class_">Integer</span> userId;<span class="hljs-keyword">private</span> <span class="hljs-title class_">Float</span> price;<span class="hljs-keyword">public</span> <span class="hljs-title class_">Integer</span> <span class="hljs-title function_">getId</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-keyword">return</span> id;&#125;<span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setId</span>(<span class="hljs-params">Integer id</span>) &#123;<span class="hljs-variable language_">this</span>.<span class="hljs-property">id</span> = id;&#125;<span class="hljs-keyword">public</span> <span class="hljs-title class_">Integer</span> <span class="hljs-title function_">getUserId</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-keyword">return</span> userId;&#125;<span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setUserId</span>(<span class="hljs-params">Integer userId</span>) &#123;<span class="hljs-variable language_">this</span>.<span class="hljs-property">userId</span> = userId;&#125;<span class="hljs-keyword">public</span> <span class="hljs-title class_">Float</span> <span class="hljs-title function_">getPrice</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-keyword">return</span> price;&#125;<span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setPrice</span>(<span class="hljs-params">Float price</span>) &#123;<span class="hljs-variable language_">this</span>.<span class="hljs-property">price</span> = price;&#125;<span class="hljs-meta">@Overridepublic</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Order [id=&quot;</span> + id + <span class="hljs-string">&quot;, userId=&quot;</span> + userId + <span class="hljs-string">&quot;, price=&quot;</span> + price + <span class="hljs-string">&quot;]&quot;</span>;&#125;&#125;<br></code></pre></td></tr></table></figure><p>创建 OrderController 类</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">package</span> org.oza.activemq.controller;<span class="hljs-keyword">import</span> org.oza.activemq.pojo.Order;<span class="hljs-keyword">import</span> org.oza.activemq.producer.OrderProducer;<span class="hljs-keyword">import</span> org.springframework.beans.factory.<span class="hljs-keyword">annotation</span>.Autowired;<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.web.bind.<span class="hljs-keyword">annotation</span>.RequestMapping;<span class="hljs-meta">@Controllerpublic</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderController</span> </span>&#123;<span class="hljs-meta">@Autowiredprivate</span> OrderProducer producer;<span class="hljs-meta">@RequestMapping(<span class="hljs-string">&quot;/save&quot;</span>)</span><span class="hljs-keyword">public</span> String save(Order order) &#123;System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;当前提交的订单用户是:&quot;</span> + order.getUserId() + <span class="hljs-string">&quot;,订单金额:&quot;</span> + order.getPrice());<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/success.jsp&quot;</span>;&#125;&#125;<br></code></pre></td></tr></table></figure><h5 id="8-3-2-5-第五步：整合测试"><a href="#8-3-2-5-第五步：整合测试" class="headerlink" title="8.3.2.5 第五步：整合测试"></a>8.3.2.5 第五步：整合测试</h5><p>访问 order 页面下订单，确定 springmvc 正常工作，然后进行下一步。</p><h4 id="8-3-3-第三部分：Spring整合ActiveMQ"><a href="#8-3-3-第三部分：Spring整合ActiveMQ" class="headerlink" title="8.3.3 第三部分：Spring整合ActiveMQ"></a>8.3.3 第三部分：Spring整合ActiveMQ</h4><h5 id="8-3-3-1-第一步：创建消息生成者-OrderProducer"><a href="#8-3-3-1-第一步：创建消息生成者-OrderProducer" class="headerlink" title="8.3.3.1 第一步：创建消息生成者 OrderProducer"></a>8.3.3.1 第一步：创建消息生成者 OrderProducer</h5><p>在这里，我们注入 JmsTemplate 类，来简化代码。另外要注意：</p><ol><li>ActiveMQ 处理对象时，对象必须实现序列化。</li><li>匿名内部类访问外部类属性，该属性需要用final修饰。</li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package org.oza.activemq.producer;<span class="hljs-keyword">import</span> javax.jms.JMSException;<span class="hljs-keyword">import</span> javax.jms.Message;<span class="hljs-keyword">import</span> javax.jms.<span class="hljs-keyword">Session</span>;<span class="hljs-keyword">import</span> org.oza.activemq.pojo.<span class="hljs-keyword">Order</span>;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.jms.core.JmsTemplate;<span class="hljs-keyword">import</span> org.springframework.jms.core.MessageCreator;<span class="hljs-keyword">import</span> org.springframework.stereotype.Component;@Componentpublic <span class="hljs-keyword">class</span> OrderProducer &#123;@Autowiredprivate JmsTemplate jmsTemplate;//注意：内部类调用外部类属性，需要用final修饰<span class="hljs-built_in">public</span> <span class="hljs-type">void</span> sendToMQ(final <span class="hljs-keyword">Order</span> <span class="hljs-keyword">order</span>) &#123;//使用 jmsTemplate 进行发送消息，参数一是队列名；参数二是一匿名内部类，指定生成消息的方式jmsTemplate.send(&quot;order-mq&quot;, <span class="hljs-built_in">new</span> MessageCreator() &#123;<span class="hljs-built_in">public</span> Message createMessage(<span class="hljs-keyword">Session</span> <span class="hljs-keyword">session</span>) throws JMSException &#123;Message message = <span class="hljs-keyword">session</span>.createObjectMessage(<span class="hljs-keyword">order</span>);<span class="hljs-keyword">return</span> message;&#125;&#125;);&#125;&#125;<br></code></pre></td></tr></table></figure><h5 id="8-3-3-2-第二步：创建消息消费者OrderListener类"><a href="#8-3-3-2-第二步：创建消息消费者OrderListener类" class="headerlink" title="8.3.3.2 第二步：创建消息消费者OrderListener类"></a>8.3.3.2 第二步：创建消息消费者OrderListener类</h5><p>这里使用监听器模式</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package org.oza.activemq.listener;<span class="hljs-keyword">import</span> javax.jms.Message;<span class="hljs-keyword">import</span> javax.jms.MessageListener;<span class="hljs-keyword">import</span> javax.jms.ObjectMessage;<span class="hljs-keyword">import</span> org.oza.activemq.pojo.<span class="hljs-keyword">Order</span>;<span class="hljs-keyword">import</span> org.springframework.stereotype.Component;@Componentpublic <span class="hljs-keyword">class</span> OrderListener implements MessageListener &#123;<span class="hljs-built_in">public</span> <span class="hljs-type">void</span> onMessage(Message message) &#123;ObjectMessage oMsg = (ObjectMessage)message;try &#123;<span class="hljs-keyword">Order</span> <span class="hljs-keyword">order</span> = (<span class="hljs-keyword">Order</span>)oMsg.getObject();<span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;当前提交的订单用户是:&quot;+<span class="hljs-keyword">order</span>.getUserId()+&quot;,订单金额:&quot;+<span class="hljs-keyword">order</span>.getPrice());&#125; catch (<span class="hljs-keyword">Exception</span> e) &#123;e.printStackTrace();&#125;&#125;&#125;<br></code></pre></td></tr></table></figure><h5 id="8-3-3-3-第三步：spring整合ActiveMQ"><a href="#8-3-3-3-第三步：spring整合ActiveMQ" class="headerlink" title="8.3.3.3 第三步：spring整合ActiveMQ"></a>8.3.3.3 第三步：spring整合ActiveMQ</h5><p>修改 springmvc 的配置文件，添加整合 ActiveMQ 配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span><span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span><span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span><span class="hljs-attr">xmlns:jms</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/jms&quot;</span><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms-4.3.xsdhttp://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsdhttp://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsdhttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;org.oza.activemq&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span><span class="hljs-comment">&lt;!-- 1、配置activemq连接工厂 使用连接池好处：链接只需要初始化一次，每次要使用的时候，直接从连接池获取，用完之后还给连接池。省去了每次创建、销毁连接的时间。--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pooledConnectionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.activemq.pool.PooledConnectionFactory&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;connectionFactory&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.activemq.ActiveMQConnectionFactory&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;brokerURL&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;tcp://192.168.125.87:61616&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;admin&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;admin&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;trustAllPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxConnections&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;20&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-comment">&lt;!-- 2、spring整合activemq链接工厂 可以缓存session。--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cachingConnectionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jms.connection.CachingConnectionFactory&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;targetConnectionFactory&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;pooledConnectionFactory&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sessionCacheSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;5&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-comment">&lt;!-- 3、spring整合消息操作对象JmsTemplate 使用jmsTemplate可以简化代码，不需要自己去创建消息的发送对象。--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jmsTemplate&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jms.core.JmsTemplate&quot;</span>&gt;</span>&lt;propertyname=&quot;connectionFactory&quot; ref=&quot;cachingConnectionFactory&quot;/&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-comment">&lt;!-- 4、spring加载监听器 acknowledge=&quot;auto&quot;表示消息获取之后，自动出队列container-type表示的容器的类型 default|simpledefault:支持session缓存。--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">jms:listener-container</span> <span class="hljs-attr">acknowledge</span>=<span class="hljs-string">&quot;auto&quot;</span> <span class="hljs-attr">container-type</span>=<span class="hljs-string">&quot;default&quot;</span> <span class="hljs-attr">destination-type</span>=<span class="hljs-string">&quot;queue&quot;</span> <span class="hljs-attr">connection-factory</span>=<span class="hljs-string">&quot;cachingConnectionFactory&quot;</span>&gt;</span><span class="hljs-comment">&lt;!-- 指定监听器destination=&quot;order-mq&quot;指定监听的是哪一个队列ref=&quot;orderListener&quot; 指定监听器对象使用注解的时候，对象的名称是类名首字母小写 --&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">jms:listener</span> <span class="hljs-attr">destination</span>=<span class="hljs-string">&quot;order-mq&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;orderListener&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">jms:listener-container</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="8-3-3-4-第四步：修改OrderController类"><a href="#8-3-3-4-第四步：修改OrderController类" class="headerlink" title="8.3.3.4 第四步：修改OrderController类"></a>8.3.3.4 第四步：修改OrderController类</h5><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package org.oza.activemq.controller;<span class="hljs-keyword">import</span> org.oza.activemq.pojo.<span class="hljs-keyword">Order</span>;<span class="hljs-keyword">import</span> org.oza.activemq.producer.OrderProducer;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;@Controllerpublic <span class="hljs-keyword">class</span> OrderController &#123;@Autowiredprivate OrderProducer producer;@RequestMapping(&quot;/save&quot;)<span class="hljs-built_in">public</span> String save(<span class="hljs-keyword">Order</span> <span class="hljs-keyword">order</span>) &#123;//<span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;当前提交的订单用户是:&quot; + <span class="hljs-keyword">order</span>.getUserId() + &quot;,订单金额:&quot; + <span class="hljs-keyword">order</span>.getPrice());producer.sendToMQ(<span class="hljs-keyword">order</span>);<span class="hljs-keyword">return</span> &quot;/success.jsp&quot;;&#125;&#125;<br></code></pre></td></tr></table></figure><h3 id="8-4-整合测试"><a href="#8-4-整合测试" class="headerlink" title="8.4 整合测试"></a>8.4 整合测试</h3><p>重新启动项目，提交多个订单，可以看到控制台持续输出，测试成功。</p><p><img src="https://app.yinxiang.com/shard/s10/res/b5d2f35f-4efb-48ef-8e4b-3aca125b1462/433cb29f2a156911203ff8b5d0750c8a.jpg" alt="img"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>消息队列</title>
    <link href="/2022/04/20/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    <url>/2022/04/20/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h1 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h1><h2 id="一、MQ（Message-Queue）应用场景分析"><a href="#一、MQ（Message-Queue）应用场景分析" class="headerlink" title="一、MQ（Message Queue）应用场景分析"></a>一、MQ（Message Queue）应用场景分析</h2><p><img src="/images/image-20220412223812235.png" alt="image-20220412223812235"></p><p>消息队列中间件是分布式系统中的重要组件，主要解决异步消息、应用解耦、流量削峰等问题，从而实现高性能、高可用、可伸缩和最终一致性的架构。</p><p>使用较多的消息队列有ActiveMQ、RabbitMQ、Kafka、MetaMQ等。</p><h3 id="1-异步处理"><a href="#1-异步处理" class="headerlink" title="1. 异步处理"></a>1. 异步处理</h3><p>场景说明：用户注册后，需要发送注册邮件和注册短信。传统的做法如下：</p><p>将注册信息写入数据库成功后，发送注册邮件，再发送注册短信。以上三个任务全部完成后，返回给客户端。</p><p><img src="/images/image-20220412224208457.png" alt="image-20220412224208457"></p><p>引入消息队列，异步处理，改造后的架构如下：</p><p><img src="/images/image-20220412224351295.png" alt="image-20220412224351295"></p><h3 id="2-应用解耦"><a href="#2-应用解耦" class="headerlink" title="2. 应用解耦"></a>2. 应用解耦</h3><p><img src="/images/image-20220412224529754.png" alt="image-20220412224529754"></p><p>场景说明：用户下单后，订单系统需要通知库存系统。传统的做法是：订单系统调用库存系统的接口。如下图</p><p><img src="/images/image-20220412225537861.png" alt="image-20220412225537861"></p><p>传统模式的特点：</p><ul><li>假如库存系统无法访问，则订单减库存将失败，从而导致下单失败</li><li>订单系统与库存系统耦合</li></ul><p>引入消息队列后的方案，如下图</p><p><img src="/images/image-20220412224704331.png" alt="image-20220412224704331"></p><ul><li>订单系统：用户下单后，订单系统完成持久化处理，将消息写入消息队列，返回用户，下单成功</li><li>库存系统：订阅下单的消息，获取下单信息，库存系统根据下单信息，进行库存操作</li><li>假如：在下单时库存系统不能正常使用，也不影响正常下单，因为下单后，订单系统写入消息队列就不再关系其他的后续操作了，实现订单系统与库存系统的应用解耦</li></ul><h3 id="3-流量削峰"><a href="#3-流量削峰" class="headerlink" title="3. 流量削峰"></a>3. 流量削峰</h3><p>流量削峰也就是消息队列中常用场景，一般在秒杀或団抢活动中广泛使用。</p><p>应用场景：秒杀活动，一般会因为流量过大，导致流量暴增，应用挂掉。为解决这个问题，一般需要在应用前端加入消息队列。</p><ul><li>可以控制活动的人数</li><li>可以缓解短时间内高流量压垮应用</li></ul><p><img src="/images/image-20220412230406551.png" alt="image-20220412230406551"></p><ul><li>用户的请求，服务器接收后，首先写入消息队列。假如消息队列长度超过最大数量，则直接抛弃用户请求或跳转到错误页面</li><li>秒杀业务根据消息队列中的请求信息，再做后续处理</li></ul><p><img src="/images/image-20220412230512068.png" alt="image-20220412230512068"></p><p><img src="/images/image-20220412230741204.png" alt="image-20220412230741204"></p><p><img src="/images/image-20220412230828945.png" alt="image-20220412230828945"></p><p><img src="/images/image-20220412231039002.png" alt="image-20220412231039002"></p><p><img src="/images/image-20220422103235328.png" alt="image-20220422103235328"></p><p><img src="/images/image-20220422112431010.png" alt="image-20220422112431010"></p><p><img src="/images/image-20220422112445116.png" alt="image-20220422112445116"></p><p><img src="/images/image-20220422112517612.png" alt="image-20220422112517612"></p><p><img src="/images/image-20220422113952109.png" alt="image-20220422113952109"></p><p>TopicSubscriber源码解析：</p><blockquote><p><a href="https://blog.csdn.net/xueyehuilang/article/details/120814991">https://blog.csdn.net/xueyehuilang/article/details/120814991</a></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultSubscriber</span>&lt;T&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DefaultTopicParticipant</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Subscriber</span>&lt;T&gt; &#123;<br>  <span class="hljs-comment">//日志记录</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Log</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> LogFactory.getLog(DefaultSubscriber.class);<br> <br>  <span class="hljs-comment">//超时时间，subscriber超过这一段时间无操作后就会断开连接，即使此时仍有subscriberListener在等待监听结果</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">DEFAULT_SHUTDOWN_TIMEOUT</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">TimeUnit</span> <span class="hljs-variable">DEFAULT_SHUTDOWN_TIMEOUT_UNITS</span> <span class="hljs-operator">=</span> TimeUnit.SECONDS;<br>  <span class="hljs-comment">//节点标识符</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> NodeIdentifier nodeIdentifier;<br>  <span class="hljs-comment">//可以在规定时间或定期执行的服务</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ScheduledExecutorService executorService;<br>  <span class="hljs-comment">//接收消息队列</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> IncomingMessageQueue&lt;T&gt; incomingMessageQueue;<br>  <span class="hljs-comment">//该subscriber订阅的publisher</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Set&lt;PublisherIdentifier&gt; knownPublishers;<br>  <span class="hljs-comment">//TCP管理器</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> TcpClientManager tcpClientManager;<br>  <span class="hljs-comment">//信号量，用于同步</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Object mutex;<br> <br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 管理监听此subscriber的监听器</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ListenerGroup&lt;SubscriberListener&lt;T&gt;&gt; subscriberListeners;<br> <br>  <span class="hljs-comment">//实现了newDefault方法</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;S&gt; DefaultSubscriber&lt;S&gt; <span class="hljs-title function_">newDefault</span><span class="hljs-params">(NodeIdentifier nodeIdentifier,</span><br><span class="hljs-params">      TopicDeclaration description, ScheduledExecutorService executorService,</span><br><span class="hljs-params">      MessageDeserializer&lt;S&gt; deserializer)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultSubscriber</span>&lt;S&gt;(nodeIdentifier, description, deserializer, executorService);<br>  &#125;<br>  <span class="hljs-comment">//私有构造方法</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">DefaultSubscriber</span><span class="hljs-params">(NodeIdentifier nodeIdentifier, TopicDeclaration topicDeclaration,</span><br><span class="hljs-params">      MessageDeserializer&lt;T&gt; deserializer, ScheduledExecutorService executorService)</span> &#123;<br>    <span class="hljs-built_in">super</span>(topicDeclaration);<br>    <span class="hljs-built_in">this</span>.nodeIdentifier = nodeIdentifier;<br>    <span class="hljs-built_in">this</span>.executorService = executorService;<br>    incomingMessageQueue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">IncomingMessageQueue</span>&lt;T&gt;(deserializer, executorService);<br>    knownPublishers = Sets.newHashSet();<br>    tcpClientManager = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TcpClientManager</span>(executorService);<br>    mutex = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>    SubscriberHandshakeHandler&lt;T&gt; subscriberHandshakeHandler =<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubscriberHandshakeHandler</span>&lt;T&gt;(toDeclaration().toConnectionHeader(),<br>            incomingMessageQueue, executorService);<br>    tcpClientManager.addNamedChannelHandler(subscriberHandshakeHandler);<br>    subscriberListeners = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListenerGroup</span>&lt;SubscriberListener&lt;T&gt;&gt;(executorService);<br>    <span class="hljs-comment">//增加监听者的方法</span><br>    subscriberListeners.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultSubscriberListener</span>&lt;T&gt;() &#123;<br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onMasterRegistrationSuccess</span><span class="hljs-params">(Subscriber&lt;T&gt; registrant)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;Subscriber registered: &quot;</span> + DefaultSubscriber.<span class="hljs-built_in">this</span>);<br>      &#125;<br> <br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onMasterRegistrationFailure</span><span class="hljs-params">(Subscriber&lt;T&gt; registrant)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;Subscriber registration failed: &quot;</span> + DefaultSubscriber.<span class="hljs-built_in">this</span>);<br>      &#125;<br> <br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onMasterUnregistrationSuccess</span><span class="hljs-params">(Subscriber&lt;T&gt; registrant)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;Subscriber unregistered: &quot;</span> + DefaultSubscriber.<span class="hljs-built_in">this</span>);<br>      &#125;<br> <br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onMasterUnregistrationFailure</span><span class="hljs-params">(Subscriber&lt;T&gt; registrant)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;Subscriber unregistration failed: &quot;</span> + DefaultSubscriber.<span class="hljs-built_in">this</span>);<br>      &#125;<br>    &#125;);<br>  &#125;<br> <br>  <span class="hljs-keyword">public</span> SubscriberIdentifier <span class="hljs-title function_">toIdentifier</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubscriberIdentifier</span>(nodeIdentifier, getTopicDeclaration().getIdentifier());<br>  &#125;<br> <br>  <span class="hljs-keyword">public</span> SubscriberDeclaration <span class="hljs-title function_">toDeclaration</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubscriberDeclaration</span>(toIdentifier(), getTopicDeclaration());<br>  &#125;<br> <br>  <span class="hljs-keyword">public</span> Collection&lt;String&gt; <span class="hljs-title function_">getSupportedProtocols</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> ProtocolNames.SUPPORTED;<br>  &#125;<br> <br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">getLatchMode</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> incomingMessageQueue.getLatchMode();<br>  &#125;<br> <br>  <span class="hljs-comment">//新增消息监听器</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addMessageListener</span><span class="hljs-params">(MessageListener&lt;T&gt; messageListener, <span class="hljs-type">int</span> limit)</span> &#123;<br>    incomingMessageQueue.addListener(messageListener, limit);<br>  &#125;<br> <br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addMessageListener</span><span class="hljs-params">(MessageListener&lt;T&gt; messageListener)</span> &#123;<br>    addMessageListener(messageListener, <span class="hljs-number">1</span>);<br>  &#125;<br> <br>  <span class="hljs-comment">//移除消息监听器</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">removeMessageListener</span><span class="hljs-params">(MessageListener&lt;T&gt; messageListener)</span> &#123;<br>    <span class="hljs-keyword">return</span> incomingMessageQueue.removeListener(messageListener);<br>  &#125;<br> <br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeAllMessageListeners</span><span class="hljs-params">()</span> &#123;<br>    incomingMessageQueue.removeAllListeners();<br>  &#125;<br> <br>  <span class="hljs-meta">@VisibleForTesting</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addPublisher</span><span class="hljs-params">(PublisherIdentifier publisherIdentifier, InetSocketAddress address)</span> &#123;<br>    <span class="hljs-keyword">synchronized</span> (mutex) &#123;<br>      <span class="hljs-comment">// TODO(damonkohler): If the connection is dropped, knownPublishers should</span><br>      <span class="hljs-comment">// be updated.</span><br>      <span class="hljs-keyword">if</span> (knownPublishers.contains(publisherIdentifier)) &#123;<br>        <span class="hljs-keyword">return</span>;<br>      &#125;<br>      tcpClientManager.connect(toString(), address);<br>      knownPublishers.add(publisherIdentifier);<br>      signalOnNewPublisher(publisherIdentifier);<br>    &#125;<br>  &#125;<br> <br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 更新与该subscriber订阅的topic关联的publisher列表</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updatePublishers</span><span class="hljs-params">(Collection&lt;PublisherIdentifier&gt; publisherIdentifiers)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">final</span> PublisherIdentifier publisherIdentifier : publisherIdentifiers) &#123;<br>      executorService.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">UpdatePublisherRunnable</span>&lt;T&gt;(<span class="hljs-built_in">this</span>, nodeIdentifier,<br>          publisherIdentifier));<br>    &#125;<br>  &#125;<br> <br>  <span class="hljs-comment">//关闭与该subscriber关联的所有对象</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shutdown</span><span class="hljs-params">(<span class="hljs-type">long</span> timeout, TimeUnit unit)</span> &#123;<br>    signalOnShutdown(timeout, unit);<br>    incomingMessageQueue.shutdown();<br>    tcpClientManager.shutdown();<br>    subscriberListeners.shutdown();<br>  &#125;<br> <br>  <span class="hljs-comment">//关闭该subscriber</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shutdown</span><span class="hljs-params">()</span> &#123;<br>    shutdown(DEFAULT_SHUTDOWN_TIMEOUT, DEFAULT_SHUTDOWN_TIMEOUT_UNITS);<br>  &#125;<br> <br>  <span class="hljs-comment">//增加监听器</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addSubscriberListener</span><span class="hljs-params">(SubscriberListener&lt;T&gt; listener)</span> &#123;<br>    subscriberListeners.add(listener);<br>  &#125;<br> <br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 通知所有的SubscriberListener，该Subscriber在ROS master的注册成功</span><br><span class="hljs-comment">   * 每个监听器都由单独的线程唤醒</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">signalOnMasterRegistrationSuccess</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">final</span> Subscriber&lt;T&gt; subscriber = <span class="hljs-built_in">this</span>;<br>    subscriberListeners.signal(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SignalRunnable</span>&lt;SubscriberListener&lt;T&gt;&gt;() &#123;<br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(SubscriberListener&lt;T&gt; listener)</span> &#123;<br>        listener.onMasterRegistrationSuccess(subscriber);<br>      &#125;<br>    &#125;);<br>  &#125;<br> <br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 通知所有的SubscriberListener，该Subscriber在ROS master的注册失败</span><br><span class="hljs-comment">   * 每个监听器都由单独的线程唤醒</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">signalOnMasterRegistrationFailure</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">final</span> Subscriber&lt;T&gt; subscriber = <span class="hljs-built_in">this</span>;<br>    subscriberListeners.signal(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SignalRunnable</span>&lt;SubscriberListener&lt;T&gt;&gt;() &#123;<br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(SubscriberListener&lt;T&gt; listener)</span> &#123;<br>        listener.onMasterRegistrationFailure(subscriber);<br>      &#125;<br>    &#125;);<br>  &#125;<br> <br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 通知所有的SubscriberListener，该Subscriber在ROS master的注销成功</span><br><span class="hljs-comment">   * 每个监听器都由单独的线程唤醒</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">signalOnMasterUnregistrationSuccess</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">final</span> Subscriber&lt;T&gt; subscriber = <span class="hljs-built_in">this</span>;<br>    subscriberListeners.signal(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SignalRunnable</span>&lt;SubscriberListener&lt;T&gt;&gt;() &#123;<br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(SubscriberListener&lt;T&gt; listener)</span> &#123;<br>        listener.onMasterUnregistrationSuccess(subscriber);<br>      &#125;<br>    &#125;);<br>  &#125;<br> <br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 通知所有的SubscriberListener，该Subscriber在ROS master的注销失败</span><br><span class="hljs-comment">   * 每个监听器都由单独的线程唤醒</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">signalOnMasterUnregistrationFailure</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">final</span> Subscriber&lt;T&gt; subscriber = <span class="hljs-built_in">this</span>;<br>    subscriberListeners.signal(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SignalRunnable</span>&lt;SubscriberListener&lt;T&gt;&gt;() &#123;<br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(SubscriberListener&lt;T&gt; listener)</span> &#123;<br>        listener.onMasterUnregistrationFailure(subscriber);<br>      &#125;<br>    &#125;);<br>  &#125;<br> <br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 通知所有的SubscriberListener，该Subscriber连接到一个新的publisher</span><br><span class="hljs-comment">   * 每个监听器都由单独的线程唤醒</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">signalOnNewPublisher</span><span class="hljs-params">(<span class="hljs-keyword">final</span> PublisherIdentifier publisherIdentifier)</span> &#123;<br>    <span class="hljs-keyword">final</span> Subscriber&lt;T&gt; subscriber = <span class="hljs-built_in">this</span>;<br>    subscriberListeners.signal(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SignalRunnable</span>&lt;SubscriberListener&lt;T&gt;&gt;() &#123;<br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(SubscriberListener&lt;T&gt; listener)</span> &#123;<br>        listener.onNewPublisher(subscriber, publisherIdentifier);<br>      &#125;<br>    &#125;);<br>  &#125;<br> <br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 通知所有的SubscriberListener，该Subscriber已关闭</span><br><span class="hljs-comment">   * 每个监听器都由单独的线程唤醒</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">signalOnShutdown</span><span class="hljs-params">(<span class="hljs-type">long</span> timeout, TimeUnit unit)</span> &#123;<br>    <span class="hljs-keyword">final</span> Subscriber&lt;T&gt; subscriber = <span class="hljs-built_in">this</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>      subscriberListeners.signal(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SignalRunnable</span>&lt;SubscriberListener&lt;T&gt;&gt;() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(SubscriberListener&lt;T&gt; listener)</span> &#123;<br>          listener.onShutdown(subscriber);<br>        &#125;<br>      &#125;, timeout, unit);<br>    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>      <span class="hljs-comment">// Ignored since we do not guarantee that all listeners will finish before</span><br>      <span class="hljs-comment">// shutdown begins.</span><br>    &#125;<br>  &#125;<br> <br>  <span class="hljs-comment">//重写打印方法</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Subscriber&lt;&quot;</span> + getTopicDeclaration() + <span class="hljs-string">&quot;&gt;&quot;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java基础</title>
    <link href="/2022/04/17/Java%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/04/17/Java%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>GitStudy</title>
    <link href="/2022/04/03/GitStudy/"/>
    <url>/2022/04/03/GitStudy/</url>
    
    <content type="html"><![CDATA[<h1 id="Git基本操作"><a href="#Git基本操作" class="headerlink" title="Git基本操作"></a>Git基本操作</h1><blockquote><p>Git学习参考：<a href="https://git-scm.com/book/zh/v2">https://git-scm.com/book/zh/v2</a></p></blockquote><h2 id="一、Git操作本地项目"><a href="#一、Git操作本地项目" class="headerlink" title="一、Git操作本地项目"></a>一、Git操作本地项目</h2><h3 id="1-初始化仓库"><a href="#1-初始化仓库" class="headerlink" title="1. 初始化仓库"></a>1. 初始化仓库</h3><p>先进入项目文件夹，通过命令 git init 把这个目录变成git可以管理的仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git init<br></code></pre></td></tr></table></figure><h3 id="2-查看仓库状态"><a href="#2-查看仓库状态" class="headerlink" title="2. 查看仓库状态"></a>2. 查看仓库状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git status<br></code></pre></td></tr></table></figure><h3 id="3-把更新的文件添加到版本库中"><a href="#3-把更新的文件添加到版本库中" class="headerlink" title="3. 把更新的文件添加到版本库中"></a>3. 把更新的文件添加到版本库中</h3><p>使用命令 git add .添加到暂存区里面去，不要忘记后面的小数点 “.”，意为添加文件夹下的所有文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add .<br></code></pre></td></tr></table></figure><h3 id="4-提交更新"><a href="#4-提交更新" class="headerlink" title="4. 提交更新"></a>4. 提交更新</h3><p>用命令 git commit告诉Git，把文件提交到仓库。引号内为提交说明。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit -m <span class="hljs-string">&#x27;first commit&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="5-查看提交记录"><a href="#5-查看提交记录" class="headerlink" title="5. 查看提交记录"></a>5. 查看提交记录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span><br>git <span class="hljs-built_in">log</span> -p &lt;file&gt;<br>git blame &lt;file&gt;<br></code></pre></td></tr></table></figure><h3 id="6-commit之前查看更新内容，文件差异"><a href="#6-commit之前查看更新内容，文件差异" class="headerlink" title="6. commit之前查看更新内容，文件差异"></a>6. commit之前查看更新内容，文件差异</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git diff<br></code></pre></td></tr></table></figure><h2 id="二、Git分支管理"><a href="#二、Git分支管理" class="headerlink" title="二、Git分支管理"></a>二、Git分支管理</h2><h3 id="1-Git查看分支"><a href="#1-Git查看分支" class="headerlink" title="1. Git查看分支"></a>1. Git查看分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git branch -a<br>* main<br>  master<br>  remotes/origin/main<br></code></pre></td></tr></table></figure><h3 id="2-查看每一个分支的最后一次提交"><a href="#2-查看每一个分支的最后一次提交" class="headerlink" title="2. 查看每一个分支的最后一次提交"></a>2. 查看每一个分支的最后一次提交</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git branch -v<br>  iss53   93b412c fix javascript issue<br>* master  7a98805 Merge branch <span class="hljs-string">&#x27;iss53&#x27;</span><br>  testing 782fd34 add scott to the author list <span class="hljs-keyword">in</span> the readmes<br></code></pre></td></tr></table></figure><h3 id="3-Git创建切换分支"><a href="#3-Git创建切换分支" class="headerlink" title="3. Git创建切换分支"></a>3. Git创建切换分支</h3><p>创建本地分支，并切换到分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 原文链接：Git-分支-分支的新建与合并</span><br><span class="hljs-comment"># https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%9A%84%E6%96%B0%E5%BB%BA%E4%B8%8E%E5%90%88%E5%B9%B6</span><br><br><span class="hljs-comment"># 新建与合并</span><br>$ git checkout -b iss53<br>Switched to a new branch <span class="hljs-string">&quot;iss53&quot;</span><br><br><span class="hljs-comment"># 它是下面两条命令的简写：</span><br><span class="hljs-comment"># 创建分支</span><br>$ git branch iss53<br><span class="hljs-comment"># 切换分支</span><br>$ git checkout iss53<br></code></pre></td></tr></table></figure><h3 id="4-删除分支："><a href="#4-删除分支：" class="headerlink" title="4. 删除分支："></a>4. 删除分支：</h3><h4 id="1-查看所有分支"><a href="#1-查看所有分支" class="headerlink" title="(1) 查看所有分支"></a>(1) 查看所有分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git branch -a<br>* main<br>  master<br>  remotes/origin/main<br></code></pre></td></tr></table></figure><h4 id="2-删除本地分支"><a href="#2-删除本地分支" class="headerlink" title="(2) 删除本地分支"></a>(2) 删除本地分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">git branch -D BranchName<br><br>其中-D也可以是--delete，如：<br><br>git branch --delete BranchName<br></code></pre></td></tr></table></figure><h4 id="3-删除本地的远程分支-解除关联"><a href="#3-删除本地的远程分支-解除关联" class="headerlink" title="(3) 删除本地的远程分支(解除关联)"></a>(3) 删除本地的远程分支(解除关联)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 先查看查看远程库信息</span><br>$ git remote -v<br>origin  git@github.com:michaelliao/learn-git.git (fetch)<br>origin  git@github.com:michaelliao/learn-git.git (push)<br><span class="hljs-comment"># 然后，根据名字删除，比如删除origin：</span><br>$ git remote <span class="hljs-built_in">rm</span> origin<br></code></pre></td></tr></table></figure><h4 id="4-远程删除Git服务器上的分支"><a href="#4-远程删除Git服务器上的分支" class="headerlink" title="(4) 远程删除Git服务器上的分支"></a>(4) 远程删除Git服务器上的分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push origin -d BranchName<br><br>其中-d也可以是--delete，如：<br><br>git push origin --delete BranchName<br><br>注意：git命令区分大小写，例如-D和-d在不同的地方虽然都是删除的意思，并且它们的完整写法都是--delete，但简易写法用错大小写会执行失败。<br></code></pre></td></tr></table></figure><h2 id="三、Git操作远程项目"><a href="#三、Git操作远程项目" class="headerlink" title="三、Git操作远程项目"></a>三、Git操作远程项目</h2><h3 id="1-Git关联远程项目"><a href="#1-Git关联远程项目" class="headerlink" title="1. Git关联远程项目"></a>1. Git关联远程项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote add origin 你的远程库地址。<br>如：<br>git remote add origin https://github.com/xxx/xxx.git<br></code></pre></td></tr></table></figure><blockquote><p>注：“origin” 并无特殊含义</p><p>远程仓库名字 “origin” 与分支名字 “master” 一样，在 Git 中并没有任何特别的含义一样。 同时 “master” 是当你运行 <code>git init</code> 时默认的起始分支名字，原因仅仅是它的广泛使用， “origin” 是当你运行 <code>git clone</code> 时默认的远程仓库名字。 如果你运行 <code>git clone -o booyah</code>，那么你默认的远程分支名字将会是 <code>booyah/master</code>。</p></blockquote><h3 id="2-Git获取远程库与本地同步合并"><a href="#2-Git获取远程库与本地同步合并" class="headerlink" title="2. Git获取远程库与本地同步合并"></a>2. Git获取远程库与本地同步合并</h3><p>push之前先pull远程代码，如果远程库不为空必须做这一步，否则后面的提交会失败。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git pull --rebase origin develop<br></code></pre></td></tr></table></figure><p>或者：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git pull origin develop<br></code></pre></td></tr></table></figure><h3 id="3-把本地库的内容推送到远程"><a href="#3-把本地库的内容推送到远程" class="headerlink" title="3. 把本地库的内容推送到远程"></a>3. 把本地库的内容推送到远程</h3><p>使用 git push命令，实际上是把当前分支develop推送到远程。第一次推送内容使用如下命令，执行此命令后会要求输入用户名、密码，验证通过后即开始上传。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push -u origin develop<br></code></pre></td></tr></table></figure><p>以后提交可以使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push origin serverfix<br></code></pre></td></tr></table></figure><blockquote><p>这里有些工作被简化了。 Git 自动将 <code>serverfix</code> 分支名字展开为 <code>refs/heads/serverfix:refs/heads/serverfix</code>， 那意味着，“推送本地的 <code>serverfix</code> 分支来更新远程仓库上的 <code>serverfix</code> 分支。” 我们将会详细学习 <a href="https://git-scm.com/book/zh/v2/ch00/ch10-git-internals">Git 内部原理</a> 的 <code>refs/heads/</code> 部分， 但是现在可以先把它放在儿。你也可以运行 <code>git push origin serverfix:serverfix</code>， 它会做同样的事——也就是说“推送本地的 <code>serverfix</code> 分支，将其作为远程仓库的 <code>serverfix</code> 分支” 可以通过这种格式来推送本地分支到一个命名不相同的远程分支。 如果并不想让远程仓库上的分支叫做 <code>serverfix</code>，可以运行 <code>git push origin serverfix:awesomebranch</code> 来将本地的 <code>serverfix</code> 分支推送到远程仓库上的 <code>awesomebranch</code> 分支。</p></blockquote><h2 id="四、Git-Clone远程代码"><a href="#四、Git-Clone远程代码" class="headerlink" title="四、Git Clone远程代码"></a>四、Git Clone远程代码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> -b mutilrecall http://gitlab.avc.domain/ttengine/ttengine.git<br>或者：<br>git <span class="hljs-built_in">clone</span> https://github.com/Chris-z-su/wallpaperProject.git<br></code></pre></td></tr></table></figure><p>clone远程仓库到制定目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> xxx.git <span class="hljs-string">&quot;指定目录&quot;</span><br></code></pre></td></tr></table></figure><h2 id="五、Git合并分支"><a href="#五、Git合并分支" class="headerlink" title="五、Git合并分支"></a>五、Git合并分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看分支</span><br>$ git branch<br>* master<br>  newtest<br><span class="hljs-comment"># 合并某分支到当前分支：git merge &lt;name&gt;</span><br>$ git merge newtest<br><span class="hljs-comment"># 合并完之后就可以删除掉不需要的分支了</span><br>$ git branch -d newtest<br>Deleted branch newtest (was c1501a2).<br></code></pre></td></tr></table></figure><h2 id="九十九、错误解决："><a href="#九十九、错误解决：" class="headerlink" title="九十九、错误解决："></a>九十九、错误解决：</h2><h3 id="1、执行git命令时出现fatal-‘origin’-does-not-appear-to-be-a-git-repository错误"><a href="#1、执行git命令时出现fatal-‘origin’-does-not-appear-to-be-a-git-repository错误" class="headerlink" title="1、执行git命令时出现fatal: ‘origin’ does not appear to be a git repository错误"></a>1、执行git命令时出现fatal: ‘origin’ does not appear to be a git repository错误</h3><p>在执行git pull origin master时出现：<br>　　fatal: ‘origin’ does not appear to be a git repository<br>　　fatal: Could not read from remote repository.<br>　　Please make sure you have the correct access rights and the repository exists</p><p>解决方案：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将关联远程仓库为origin</span><br>git remote add origin git@github:bx_reader/bx-reader-api.git<br></code></pre></td></tr></table></figure><h3 id="2、Reinitialized-existing-Git-repository"><a href="#2、Reinitialized-existing-Git-repository" class="headerlink" title="2、Reinitialized existing Git repository"></a>2、Reinitialized existing Git repository</h3><p>“git init” 的时候出现：Reinitialized existing Git repository<br>解决方法：</p><p>可以使用 rm -rf .git，删除.git，然后在 git init 即可</p><h3 id="3、refusing-to-merge-unrelated-histories"><a href="#3、refusing-to-merge-unrelated-histories" class="headerlink" title="3、refusing to merge unrelated histories"></a>3、refusing to merge unrelated histories</h3><p>“git pull origin master ” 的时候出现：refusing to merge unrelated histories</p><p>解决方法：</p><p>可以在 “git pull origin master” 后添加 “–allow-unrelated-histories”<br>即整个命令行为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git pull origin master --allow-unrelated-histories<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Oracle</title>
    <link href="/2022/03/26/Oracle/"/>
    <url>/2022/03/26/Oracle/</url>
    
    <content type="html"><![CDATA[<h1 id="Oracle从入门到放弃"><a href="#Oracle从入门到放弃" class="headerlink" title="Oracle从入门到放弃"></a>Oracle从入门到放弃</h1><blockquote><p>《收获，不止Oracle》</p></blockquote><h2 id="1-创建表"><a href="#1-创建表" class="headerlink" title="1.创建表"></a>1.创建表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> test(<br>  id number(<span class="hljs-number">20</span>, <span class="hljs-number">0</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">PRIMARY</span> KEY,<br>  FieldAA varchar2(<span class="hljs-number">64</span>),<br>  FieldAB varchar2(<span class="hljs-number">64</span>),<br>  flag <span class="hljs-type">varchar</span>(<span class="hljs-number">2</span>)<br>);<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;a1&#x27;</span>,<span class="hljs-string">&#x27;b1&#x27;</span>,<span class="hljs-string">&#x27;D&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test <span class="hljs-keyword">values</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;a2&#x27;</span>,<span class="hljs-string">&#x27;b2&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test <span class="hljs-keyword">values</span>(<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;a3&#x27;</span>,<span class="hljs-string">&#x27;b3&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test <span class="hljs-keyword">values</span>(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;a4&#x27;</span>,<span class="hljs-string">&#x27;b4&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test <span class="hljs-keyword">values</span>(<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;a5&#x27;</span>,<span class="hljs-string">&#x27;b5&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="2-lt-gt-和-is-not-null"><a href="#2-lt-gt-和-is-not-null" class="headerlink" title="2. &lt;&gt; 和 is not null"></a>2. &lt;&gt; 和 is not null</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> t.<span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> test t;<br></code></pre></td></tr></table></figure><p><img src="/images/image-20220326002040694.png" alt="image-20220326002040694"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> t.<span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> test t <span class="hljs-keyword">where</span> t.flag <span class="hljs-operator">&lt;&gt;</span> <span class="hljs-string">&#x27;D&#x27;</span> <span class="hljs-keyword">or</span> t.flag <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span>;<br></code></pre></td></tr></table></figure><p><img src="/images/image-20220326001343382-16482250866611.png" alt="image-20220326001343382"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> t.<span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> test t <span class="hljs-keyword">where</span> t.flag <span class="hljs-operator">&lt;&gt;</span> <span class="hljs-string">&#x27;D&#x27;</span>;<br></code></pre></td></tr></table></figure><p><img src="/images/image-20220326002116539.png" alt="image-20220326002116539"></p><h2 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Favorite site</title>
    <link href="/2022/03/26/Favorite%20site/"/>
    <url>/2022/03/26/Favorite%20site/</url>
    
    <content type="html"><![CDATA[<h2 id="1-鼠标连点器"><a href="#1-鼠标连点器" class="headerlink" title="1. 鼠标连点器:"></a>1. 鼠标连点器:</h2><p><a href="https://binhao.lanzous.com/tp/iX7cuf20yij">https://binhao.lanzous.com/tp/iX7cuf20yij</a></p><h2 id="2-使用apache-poi在excel文件中设置页面视图模式："><a href="#2-使用apache-poi在excel文件中设置页面视图模式：" class="headerlink" title="2. 使用apache poi在excel文件中设置页面视图模式："></a>2. 使用apache poi在excel文件中设置页面视图模式：</h2><p><a href="http://cn.voidcc.com/question/p-dzzhcngh-va.html">使用apache poi在excel文件中设置页面视图模式 - VoidCC</a></p><h2 id="3-Markdown官网教程："><a href="#3-Markdown官网教程：" class="headerlink" title="3. Markdown官网教程："></a>3. Markdown官网教程：</h2><p><a href="https://markdown.com.cn/">Markdown 官方教程</a></p><h2 id="4-关于图片引用示例："><a href="#4-关于图片引用示例：" class="headerlink" title="4. 关于图片引用示例："></a>4. 关于图片引用示例：</h2><blockquote><p>本地仓库地址(blob)：  <a href="https://gitee.com/zhangsubao/studynotes/blob/master/notes/images/2022-02-12-23-35-26-image.png">https://gitee.com/zhangsubao/studynotes/blob/master/notes/images/2022-02-12-23-35-26-image.png</a><br>远程引用地址(raw)：  <a href="https://gitee.com/zhangsubao/studynotes/raw/master/notes/images/2022-02-12-23-35-26-image.png">https://gitee.com/zhangsubao/studynotes/raw/master/notes/images/2022-02-12-23-35-26-image.png</a></p></blockquote><p><a href="https://www.huya.com/688">张大仙直播_虎牙688张大仙官方直播间</a></p><p><a href="https://www.bilibili.com/">哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p><h2 id="5-MySQL解压版安装教程"><a href="#5-MySQL解压版安装教程" class="headerlink" title="5. MySQL解压版安装教程"></a>5. MySQL解压版安装教程</h2><blockquote><p><a href="https://blog.csdn.net/crudby/article/details/100051007">MySQL8.0解压版详细安装步骤_crudby的博客-CSDN博客_mysql8.0解压版安装</a></p></blockquote><h3 id="1-MySQL连接"><a href="#1-MySQL连接" class="headerlink" title="(1) MySQL连接"></a>(1) MySQL连接</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">net <span class="hljs-literal">start</span> mysql <span class="hljs-comment">#启动数据库</span><br><br>mysql -u root -p <span class="hljs-comment">#使用root连接数据库</span><br><br>net <span class="hljs-literal">stop</span> mysql <span class="hljs-comment">#关闭数据库</span><br></code></pre></td></tr></table></figure><h3 id="2-MySQL基本使用"><a href="#2-MySQL基本使用" class="headerlink" title="(2) MySQL基本使用"></a>(2) MySQL基本使用</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> databases;<br>use wollo;<br><span class="hljs-keyword">show</span> tables;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> account;<br></code></pre></td></tr></table></figure><h3 id="99-问题解决："><a href="#99-问题解决：" class="headerlink" title="(99) 问题解决："></a>(99) 问题解决：</h3><p>安装MySQL时由于找不到vcruntime140_1.dll，无法继续安装: <a href="https://zhuanlan.zhihu.com/p/142646570">https://zhuanlan.zhihu.com/p/142646570</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">链接: https:<span class="hljs-regexp">//</span>pan.baidu.com<span class="hljs-regexp">/s/</span><span class="hljs-number">1</span>m6_kinWFDXZ0Amq-p8Y0hQ 提取码: use1 复制这段内容后打开百度网盘手机App，操作更方便哦<br></code></pre></td></tr></table></figure><h2 id="6-Typora激活破解"><a href="#6-Typora激活破解" class="headerlink" title="6. Typora激活破解"></a>6. Typora激活破解</h2><p>D:\others\activator\typora</p><p><a href="https://www.pixiv.net/artworks/74539039">https://www.pixiv.net/artworks/74539039</a></p><p><a href="https://biu.tls.moe/#/usage/basic">https://biu.tls.moe/#/usage/basic</a></p><h2 id="7-Spring"><a href="#7-Spring" class="headerlink" title="7. Spring"></a>7. Spring</h2><p><a href="https://docs.spring.io/spring-framework/docs/4.0.x/spring-framework-reference/html/index.html">https://docs.spring.io/spring-framework/docs/4.0.x/spring-framework-reference/html/index.html</a></p><h2 id="8-Git-回滚操作"><a href="#8-Git-回滚操作" class="headerlink" title="8. Git 回滚操作"></a>8. Git 回滚操作</h2><p><a href="https://www.jianshu.com/p/c55958563f5a">https://www.jianshu.com/p/c55958563f5a</a></p><h2 id="9-typora默认图片路径："><a href="#9-typora默认图片路径：" class="headerlink" title="9. typora默认图片路径："></a>9. typora默认图片路径：</h2><blockquote><p>C:\Users\chris\AppData\Roaming\Typora\typora-user-images\image-20220326001343382.png</p></blockquote><h2 id="10-Hexo官网"><a href="#10-Hexo官网" class="headerlink" title="10. Hexo官网"></a>10. Hexo官网</h2><blockquote><p><a href="https://hexo.io/">https://hexo.io/</a><br><a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p></blockquote><h2 id="11-Hexo-Fluid-用户手册"><a href="#11-Hexo-Fluid-用户手册" class="headerlink" title="11. Hexo Fluid 用户手册"></a>11. Hexo Fluid 用户手册</h2><blockquote><p><a href="https://hexo.fluid-dev.com/docs/">https://hexo.fluid-dev.com/docs/</a><br><a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid</a></p></blockquote><blockquote><p><a href="https://bible.fhl.net/gbdoc/index.html">https://bible.fhl.net/gbdoc/index.html</a></p></blockquote><h2 id="12-自定义图标生成"><a href="#12-自定义图标生成" class="headerlink" title="12. 自定义图标生成"></a>12. 自定义图标生成</h2><h3 id="阿里矢量库"><a href="#阿里矢量库" class="headerlink" title="阿里矢量库"></a>阿里矢量库</h3><blockquote><p><a href="https://www.iconfont.cn/">https://www.iconfont.cn/</a></p></blockquote><h3 id="icomoon字体图标"><a href="#icomoon字体图标" class="headerlink" title="icomoon字体图标"></a>icomoon字体图标</h3><blockquote><p><a href="https://icomoon.io/">https://icomoon.io/</a></p></blockquote><blockquote><p><a href="https://faithful.team/">https://faithful.team/</a><br><a href="https://www.mcbbs.net/thread-928713-1-1.html">https://www.mcbbs.net/thread-928713-1-1.html</a></p></blockquote><h2 id="13-ffmpeg使用命令"><a href="#13-ffmpeg使用命令" class="headerlink" title="13. ffmpeg使用命令"></a>13. ffmpeg使用命令</h2><blockquote><p>开源地址：<a href="https://github.com/FFmpeg/FFmpeg/">https://github.com/FFmpeg/FFmpeg/</a></p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ffmpeg -<span class="hljs-selector-tag">i</span> source<span class="hljs-selector-class">.mkv</span> -c copy dst<span class="hljs-selector-class">.mp4</span><br>ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-string">&quot;2022-05-02 17-06-22.mkv&quot;</span> -c copy test.mp4<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Git回滚操作</title>
    <link href="/2022/03/26/Git%20%E5%9B%9E%E6%BB%9A%E6%93%8D%E4%BD%9C/"/>
    <url>/2022/03/26/Git%20%E5%9B%9E%E6%BB%9A%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="Git-回滚操作"><a href="#Git-回滚操作" class="headerlink" title="Git 回滚操作"></a>Git 回滚操作</h1><p><a href="https://www.jianshu.com/p/c55958563f5a">https://www.jianshu.com/p/c55958563f5a</a></p><h3 id="Git撤销-amp-回滚操作-git-reset-和-get-revert"><a href="#Git撤销-amp-回滚操作-git-reset-和-get-revert" class="headerlink" title="Git撤销&amp;回滚操作(git reset 和 get revert)"></a>Git撤销&amp;回滚操作(git reset 和 get revert)</h3><h4 id="Git-的工作流"><a href="#Git-的工作流" class="headerlink" title="Git 的工作流"></a>Git 的工作流</h4><p>工作区：在 git add xx 之前，在自己当前分支所修改的代码内容！<br>暂存区：已经 git add xxx 进去，且没有执行 git commit xxx 的。<br>本地分支：已经 git commit -m xxx 提交到本地分支的。<br>远程分支：git push origin HEAD:refs&#x2F;for&#x2F;master HEAD 是本地，master是远程分支</p><h4 id="代码回滚"><a href="#代码回滚" class="headerlink" title="代码回滚"></a>代码回滚</h4><p>在上传代码到远程仓库的时候，不免会出现问题，任何过程都有可能要回滚代码：</p><h5 id="1、在工作区的代码（checkout-修改工作区文件）"><a href="#1、在工作区的代码（checkout-修改工作区文件）" class="headerlink" title="1、在工作区的代码（checkout ~ 修改工作区文件）"></a>1、在工作区的代码（checkout ~ 修改工作区文件）</h5><p>git checkout – a.txt # 丢弃某个文件，或者<br>git checkout – . # 丢弃全部</p><p>注意：git checkout – . 丢弃全部，也包括：新增的文件会被删除、删除的文件会恢复回来、修改的文件会回去。这几个前提都说的是，回到暂存区之前的样子。对之前保存在暂存区里的代码不会有任何影响。对commit提交到本地分支的代码就更没影响了。当然，如果你之前压根都没有暂存或commit，那就是回到你上次pull下来的样子了。</p><h4 id="2、代码-git-add-到缓存区，并未-git-commit-提交（reset-修改暂存区文件）"><a href="#2、代码-git-add-到缓存区，并未-git-commit-提交（reset-修改暂存区文件）" class="headerlink" title="2、代码 git add 到缓存区，并未 git commit 提交（reset ~ 修改暂存区文件）"></a>2、代码 git add 到缓存区，并未 git commit 提交（reset ~ 修改暂存区文件）</h4><p>git reset HEAD .<br>git reset HEAD a.txt</p><p>注意：这个命令仅改变暂存区，并不改变工作区，这意味着在无任何其他操作的情况下，<br>工作区中的实际文件同该命令运行之前 无任何变化</p><h4 id="3、代码-git-commit-到本地分支，但没有-git-push-到远程-（git-reset-–hard-commit-之后）"><a href="#3、代码-git-commit-到本地分支，但没有-git-push-到远程-（git-reset-–hard-commit-之后）" class="headerlink" title="3、代码 git commit 到本地分支，但没有 git push 到远程 （git reset –hard ~ commit 之后）"></a>3、代码 git commit 到本地分支，但没有 git push 到远程 （git reset –hard ~ commit 之后）</h4><p>git log # 得到你需要回退一次提交的commit id<br>git reset –hard <commit_id> # 回到其中你想要的某个版本<br>git reset –hard HEAD^ # 回到最新的一次提交<br>git reset HEAD^ # 此时代码保留，回到 git add 之前</p><h4 id="4、代码-git-push-把修改提交到远程仓库-git-reset-git-revert"><a href="#4、代码-git-push-把修改提交到远程仓库-git-reset-git-revert" class="headerlink" title="4、代码 git push 把修改提交到远程仓库 (git reset || git revert)"></a>4、代码 git push 把修改提交到远程仓库 (git reset || git revert)</h4><ul><li>（1）通过git reset是直接删除指定的commit</li></ul><p>git log # 得到你需要回退一次提交的commit id<br>git reset –hard <commit_id><br>git push origin HEAD –force # 强制提交一次，之前错误的提交就从远程仓库删除</p><ul><li>(2) 通过git revert是用一次新的commit来回滚之前的commit</li></ul><p>git log # 得到你需要回退一次提交的commit id<br>git revert <commit_id> # 撤销指定的版本，撤销也会作为一次提交进行保存</p><ul><li>（3） git revert 和 git reset的区别<br>(a). git revert是用一次新的commit来回滚之前的commit，此次提交之前的commit都会被保留( 会有 两次 commit id)；<br>(b). git reset是回到某次提交，提交及之前的commit都会被保留，但是此commit id之后的修改都会被删除 ( 只有一次 commit id)</li></ul><h4 id="开发过程中，场景处理："><a href="#开发过程中，场景处理：" class="headerlink" title="开发过程中，场景处理："></a>开发过程中，场景处理：</h4><h5 id="场景一：-糟了，我刚把不想要的代码，commit到本地仓库中了，但是还没有做push操作！"><a href="#场景一：-糟了，我刚把不想要的代码，commit到本地仓库中了，但是还没有做push操作！" class="headerlink" title="场景一： 糟了，我刚把不想要的代码，commit到本地仓库中了，但是还没有做push操作！"></a>场景一： 糟了，我刚把不想要的代码，commit到本地仓库中了，但是还没有做push操作！</h5><h5 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h5><p>上述场景一，在未进行git push前的所有操作，都是在“本地仓库”中执行的。我们暂且将“本地仓库”的代码还原操作叫做“撤销”！</p><p><img src="https://upload-images.jianshu.io/upload_images/16517912-c80eec34e53c58ca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>情况一.png</p><h5 id="场景二：彻底完了，刚线上更新的代码出现问题了，需要还原这次提交的代码！"><a href="#场景二：彻底完了，刚线上更新的代码出现问题了，需要还原这次提交的代码！" class="headerlink" title="场景二：彻底完了，刚线上更新的代码出现问题了，需要还原这次提交的代码！"></a>场景二：彻底完了，刚线上更新的代码出现问题了，需要还原这次提交的代码！</h5><h5 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h5><p>上述场景二，已进行git push，即已推送到“远程仓库”中。我们将已被提交到“远程仓库”的代码还原操作叫做“回滚”！<br>注意： 对远程仓库做回滚操作是有风险的，需提前做好备份和通知其他团队成员！</p><p>如果你每次更新线上，都会打tag，那恭喜你，你可以很快的处理上述场景二的情况</p><p><img src="https://upload-images.jianshu.io/upload_images/16517912-499c18ed38977cf6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/714/format/webp" alt="img"></p><p>情况二.png</p><p>二者区别：<br>revert是放弃指定提交的修改，但是会生成一次新的提交，需要填写提交注释，以前的历史记录都在；<br>reset是指将HEAD指针指到指定提交，历史记录中不会出现放弃的提交记录。</p><h5 id="场景三：刚才我发现之前的某次提交太愚蠢了，现在想要干掉它！"><a href="#场景三：刚才我发现之前的某次提交太愚蠢了，现在想要干掉它！" class="headerlink" title="场景三：刚才我发现之前的某次提交太愚蠢了，现在想要干掉它！"></a>场景三：刚才我发现之前的某次提交太愚蠢了，现在想要干掉它！</h5><h5 id="情况三：需要回滚某次提交"><a href="#情况三：需要回滚某次提交" class="headerlink" title="情况三：需要回滚某次提交"></a>情况三：需要回滚某次提交</h5><p>找到要回滚的commitID<br>git log<br>git revert commitID<br>删除某次提交<br>git log –oneline -n5</p><p>git rebase -i “commit id”^<br>注意：需要注意最后的^号，意思是commit id的前一次提交</p><p>git rebase -i “5b3ba7a”^<br>在编辑框中删除相关commit，如pick 5b3ba7a test2，然后保存退出（如果遇到冲突需要先解决冲突）！</p><p>git push origin master -f<br>通过上述操作，如果你想对历史多个commit进行处理或者，可以选择git rebase -i，只需删除对应的记录就好。<br>rebase还可对 commit 消息进行编辑，以及合并多个commit。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>mysql</title>
    <link href="/2022/03/12/mysql/"/>
    <url>/2022/03/12/mysql/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/2022-02-28-20-09-08-image.png"></p><p><img src="/images/2022-02-28-20-09-32-image.png"></p><p><img src="/images/2022-02-28-20-11-11-image.png"></p><p><img src="/images/2022-02-28-20-18-06-image.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MarkdownTest</title>
    <link href="/2022/02/19/MarkdownTest/"/>
    <url>/2022/02/19/MarkdownTest/</url>
    
    <content type="html"><![CDATA[<h1 id="Markdown-Study"><a href="#Markdown-Study" class="headerlink" title="Markdown Study"></a>Markdown Study</h1><h2 id="一、what’s-Markdown"><a href="#一、what’s-Markdown" class="headerlink" title="一、what’s Markdown"></a>一、what’s Markdown</h2><h2 id="二、How-to-study"><a href="#二、How-to-study" class="headerlink" title="二、How to study"></a>二、How to study</h2><img title="Raphael Lopes" src="https://images.unsplash.com/photo-1644411990121-97f041208faf?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=Mnw5MDg0MHwwfDF8YWxsfDN8fHx8fHwyfHwxNjQ0NDk2Mjky&ixlib=rb-1.2.1&q=80&w=1080" alt="null" data-align="inline"><iframe src="//player.bilibili.com/player.html?aid=851448338&bvid=BV1aL4y137cy&cid=506463410&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><iframe src="//player.bilibili.com/player.html?aid=851448338&bvid=BV1aL4y137cy&cid=506463410&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><iframe src="//player.bilibili.com/player.html?aid=851448338&bvid=BV1aL4y137cy&cid=506463410&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><iframe src="//player.bilibili.com/player.html?aid=851448338&bvid=BV1aL4y137cy&cid=506463410&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><iframe src="//player.bilibili.com/player.html?aid=851448338&bvid=BV1aL4y137cy&cid=506463410&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><div><iframe src="//player.bilibili.com/player.html?aid=851448338&bvid=BV1aL4y137cy&cid=506463410&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div><iframe src="//player.bilibili.com/player.html?aid=851448338&bvid=BV1aL4y137cy&cid=506463410&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><iframe src="//player.bilibili.com/player.html?aid=851448338&bvid=BV1aL4y137cy&cid=506463410&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;iframe src<span class="hljs-operator">=</span><span class="hljs-string">&quot;//player.bilibili.com/player.html?aid=851448338&amp;bvid=BV1aL4y137cy&amp;cid=506463410&amp;page=1&quot;</span> scrolling<span class="hljs-operator">=</span><span class="hljs-string">&quot;no&quot;</span> border<span class="hljs-operator">=</span><span class="hljs-string">&quot;0&quot;</span> frameborder<span class="hljs-operator">=</span><span class="hljs-string">&quot;no&quot;</span> framespacing<span class="hljs-operator">=</span><span class="hljs-string">&quot;0&quot;</span> allowfullscreen<span class="hljs-operator">=</span><span class="hljs-string">&quot;true&quot;</span>&gt; &lt;/iframe&gt;<br></code></pre></td></tr></table></figure><div><iframe src="//player.bilibili.com/player.html?aid=851448338&bvid=BV1aL4y137cy&cid=506463410&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div><p><a href="超链接地址" target="_blank">超链接名</a></p><p>示例<br><a href="https://www.jianshu.com/u/1f5ac0cf6a8b" target="_blank">简书</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;video&quot;</span> <span class="hljs-attr">controls</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">preload</span>=<span class="hljs-string">&quot;none&quot;</span> <span class="hljs-attr">poster</span>=<span class="hljs-string">&quot;封面&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mp4&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;mp4格式视频&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;video/mp4&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">videos</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;video&quot;</span> <span class="hljs-attr">controls</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">preload</span>=<span class="hljs-string">&quot;none&quot;</span> <span class="hljs-attr">poster</span>=<span class="hljs-string">&quot;封面&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;webm&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;webm格式视频&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;video/webm&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">videos</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;video&quot;</span> <span class="hljs-attr">controls</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">preload</span>=<span class="hljs-string">&quot;none&quot;</span> <span class="hljs-attr">poster</span>=<span class="hljs-string">&quot;封面&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ogv&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;ogv格式视频&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;video/ogv&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">videos</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> </span><br><span class="hljs-tag"><span class="hljs-attr">src</span>=<span class="hljs-string">&quot;视频或者网页路径&quot;</span> </span><br><span class="hljs-tag"><span class="hljs-attr">scrolling</span>=<span class="hljs-string">&quot;no&quot;</span> </span><br><span class="hljs-tag"><span class="hljs-attr">border</span>=<span class="hljs-string">&quot;0&quot;</span> </span><br><span class="hljs-tag"><span class="hljs-attr">frameborder</span>=<span class="hljs-string">&quot;no&quot;</span> </span><br><span class="hljs-tag"><span class="hljs-attr">framespacing</span>=<span class="hljs-string">&quot;0&quot;</span> </span><br><span class="hljs-tag"><span class="hljs-attr">allowfullscreen</span>=<span class="hljs-string">&quot;true&quot;</span> </span><br><span class="hljs-tag"><span class="hljs-attr">height</span>=<span class="hljs-string">600</span> </span><br><span class="hljs-tag"><span class="hljs-attr">width</span>=<span class="hljs-string">800</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 相当于是子网页 --&gt;</span><br><span class="hljs-comment">&lt;!-- B站分享链接提供 --&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">![](https://gitee.com/turbo-studio/image/raw/master/image/20210215225951.gif)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Spring基础知识</title>
    <link href="/2022/01/02/Spring%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/2022/01/02/Spring%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring基础知识"><a href="#Spring基础知识" class="headerlink" title="Spring基础知识"></a>Spring基础知识</h1><blockquote><p>视频链接：<a href="https://www.bilibili.com/video/BV1WZ4y1P7Bp/" title="SSM框架">黑马程序员最全SSM框架教程|Spring+SpringMVC+MyBatis全套教程</a></p></blockquote><h2 id="一、Spring简介"><a href="#一、Spring简介" class="headerlink" title="一、Spring简介"></a>一、Spring简介</h2><h3 id="1-Spring是什么"><a href="#1-Spring是什么" class="headerlink" title="1. Spring是什么"></a>1. Spring是什么</h3><p>Spring是分层的Java SE&#x2F;EE应用full-stack轻量级开源框架，以loc(Inverse Of Control：反转控制)和AOP(Aspect Oriented Programming：面向切面编程)为核心。</p><p>提供了展现层SpringMVC和持久层Spring JDBCTmplate以及业务层事务管理等众多的业务级应用技术，还能整合开源世界众多著名的第三方框架和类库，逐渐成为使用最多的Java EE企业应用开源应用框架。</p><h3 id="2-Spring的优势"><a href="#2-Spring的优势" class="headerlink" title="2. Spring的优势"></a>2. Spring的优势</h3><h4 id="1-方使解耦，简化开发"><a href="#1-方使解耦，简化开发" class="headerlink" title="1)方使解耦，简化开发"></a>1)方使解耦，简化开发</h4><p>​通过Spring提供的IOC容器，可以将对象间的依赖关系交由Spring进行控制，避免硬编码所造成的过度耦合。<br>用户也不必再为单例模式类、属性文件解析等这些很底层的需求编写代码，可以更专注于上层的应用。</p><h4 id="2-AOP编程的支持"><a href="#2-AOP编程的支持" class="headerlink" title="2)AOP编程的支持"></a>2)AOP编程的支持</h4><p>​通过Spring的AOP功能，方便进行面向切面编程，许多不容易用传统OOP实现的功能可以通过AOP轻松实现.</p><h4 id="3-声明式事务的支持"><a href="#3-声明式事务的支持" class="headerlink" title="3)声明式事务的支持"></a>3)声明式事务的支持</h4><p>​可以将我们从单调烦闷的事务管理代码中解脱出来，通过声明式方式灵活的进行事务管理，提高开发效率和质量。</p><h4 id="4-方便程序的测试"><a href="#4-方便程序的测试" class="headerlink" title="4)方便程序的测试"></a>4)方便程序的测试</h4><p>​可以用非容器依赖的编程方式进行几乎所有的测试江作，测试不再是昂贵的操作，而是随手可做的事情。</p><h4 id="5-方便集成各种优秀框架"><a href="#5-方便集成各种优秀框架" class="headerlink" title="5)方便集成各种优秀框架"></a>5)方便集成各种优秀框架</h4><p>​Spring对各种优秀框架(Struts、Hibernate、Hessian、Quartz等)的支持。</p><h4 id="6-降低JavaEE-API的使用难度"><a href="#6-降低JavaEE-API的使用难度" class="headerlink" title="6)降低JavaEE API的使用难度"></a>6)降低JavaEE API的使用难度</h4><p>​Spring对JavaEE API(如JDBC、JavaMail、远程调用等)进行了薄薄的封装层，使这些API的使用难度大为降低。</p><h4 id="7-Java源码是经典学习范例"><a href="#7-Java源码是经典学习范例" class="headerlink" title="7)Java源码是经典学习范例"></a>7)Java源码是经典学习范例</h4><p>​Spring的源代码设计精妙、结构清晰、匠心独用，处处体现着大师对Java设计模式灵活运用以及对Java技术的高深<br>造诣。它的源代码无意是Java技术的最佳实践的范例。</p><h3 id="3-Spring的体系结构"><a href="#3-Spring的体系结构" class="headerlink" title="3. Spring的体系结构"></a>3. Spring的体系结构</h3><p><img src="/images/spring-overview.png" alt="spring-overview"></p><h2 id="二、Spring快速入门"><a href="#二、Spring快速入门" class="headerlink" title="二、Spring快速入门"></a>二、Spring快速入门</h2><h3 id="1-Spring程序开发步骤"><a href="#1-Spring程序开发步骤" class="headerlink" title="1. Spring程序开发步骤"></a>1. Spring程序开发步骤</h3><p><img src="/images/Spring%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%AD%A5%E9%AA%A4.png" alt="Spring程序开发步骤"></p><p>① 导入Spring开发的基本坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">spring.version</span>&gt;</span>5.0.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">spring.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--spring--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>② 编写Dao接口和实现类</p><p>③ 创建Spring核心配置文件</p><p>在类路径下（resources）创建applicationContext.xml配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:tx</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/tx&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       &quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  注入方式采用注解的方式  --&gt;</span><br>    <span class="hljs-comment">&lt;!--  引入service配置文件  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;applicationContext-user-service.xml&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!--  引入dao配置文件  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;applicationContext-user-dao.xml&quot;</span> /&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>④ 在Spring配置文件中配置UserDaoImpl</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--单例模式--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.shubao.dao.impl.UserDaoImpl&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;singleton&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--  &lt;property name=&quot;jdbcTemplate&quot; ref=&quot;jdbcTemplate&quot; /&gt;  --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br> <span class="hljs-comment">&lt;!--多例模式--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.shubao.dao.impl.UserDaoImpl&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;prototype&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>⑤ 使用Spring的API获得Bean实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> 测试scope属性</span><br><span class="hljs-comment"> //单例模式</span><br><span class="hljs-comment"> &lt;bean id=&quot;userDao&quot; class=&quot;com.shubao.dao.impl.UserDaoImpl&quot; scope=&quot;singleton&quot;&gt;&lt;/bean&gt;</span><br><span class="hljs-comment"> //多例模式</span><br><span class="hljs-comment"> &lt;bean id=&quot;userDao&quot; class=&quot;com.shubao.dao.impl.UserDaoImpl&quot; scope=&quot;prototype&quot;&gt;&lt;/bean&gt;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testBeanScope</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>    <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao1</span> <span class="hljs-operator">=</span> (UserDao) context.getBean(<span class="hljs-string">&quot;userDao&quot;</span>);<br>    <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao2</span> <span class="hljs-operator">=</span> (UserDao) context.getBean(<span class="hljs-string">&quot;userDao&quot;</span>);<br>    System.out.println(userDao1);<br>    System.out.println(userDao2);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-Spring的配置文件"><a href="#2-Spring的配置文件" class="headerlink" title="2. Spring的配置文件"></a>2. Spring的配置文件</h3><h4 id="1-Bean标签的基本配置"><a href="#1-Bean标签的基本配置" class="headerlink" title="(1) Bean标签的基本配置"></a>(1) Bean标签的基本配置</h4><p>用于配置对象交由Spring来创建</p><p>默认情况下它调用的是类中的无参构造函数，如果没有无参构造函数不能创建成功。</p><p>基本属性：</p><ul><li>id:Bean实例在spring容器中的唯一标识</li><li>class:Bean的全限定名称</li></ul><h4 id="2-Bean标签的配置范围"><a href="#2-Bean标签的配置范围" class="headerlink" title="(2) Bean标签的配置范围"></a>(2) Bean标签的配置范围</h4><p>scope：指对象的作用范围，取值如下：</p><table><thead><tr><th>取值范围</th><th>说明</th></tr></thead><tbody><tr><td>singleton</td><td>默认值，单例模式</td></tr><tr><td>prototype</td><td>多例的</td></tr><tr><td>request</td><td>WEB项目中，Spring创建一个bean的对象，将对象存入到request域中</td></tr><tr><td>session</td><td>WEB项目中，Spring创建一个bean的对象，将对象存入到session域中</td></tr><tr><td>globalSession</td><td>WEB项目中，应用到Portlet环境，如果没有Portlet环境那么globalSession相当于session</td></tr></tbody></table><h5 id="①-当scope的取值为singleton时"><a href="#①-当scope的取值为singleton时" class="headerlink" title="① 当scope的取值为singleton时"></a>① 当scope的取值为singleton时</h5><p>Bean的实例化个数：1个</p><p>Bean的实例化时机：当Spring核心配置文件被加载时，实例化配置文件中配置的Bean对象</p><p>Bean的生命周期：</p><ul><li>对象创建：当应用加载，创建容器时，对象就被创建了</li><li>对象运行：只要容器在，对象一直活着</li><li>对象销毁：当应用卸载，销毁容器时，对象就被销毁了</li></ul><h5 id="②-当scope的取值为prototype时"><a href="#②-当scope的取值为prototype时" class="headerlink" title="② 当scope的取值为prototype时"></a>② 当scope的取值为prototype时</h5><p>Bean的实例化个数：多个</p><p>Bean的实例化时机：当调用getBean()方法时实例化Bean</p><p>Bean的生命周期：</p><ul><li>对象创建：当使用对象时，创建新的对象实例</li><li>对象运行：只要对象在使用中，就一直活着</li><li>对象销毁：当对象长时间不使用时，就被Java的垃圾回收器回收了</li></ul><h4 id="3-Bean生命周期配置"><a href="#3-Bean生命周期配置" class="headerlink" title="(3) Bean生命周期配置"></a>(3) Bean生命周期配置</h4><ul><li><p>init-method:指定类中的初始化方法名称</p></li><li><p>destroy-method:指定类中的销毁方法名称</p></li></ul><h4 id="4-Bean实例化的三种方式"><a href="#4-Bean实例化的三种方式" class="headerlink" title="(4) Bean实例化的三种方式"></a>(4) Bean实例化的三种方式</h4><ul><li>无参构造方法实例化</li><li>工厂静态方法实例化</li><li>工厂实例方法实例化</li></ul><h5 id="①-使用无参构造方法实例化"><a href="#①-使用无参构造方法实例化" class="headerlink" title="① 使用无参构造方法实例化"></a>① 使用无参构造方法实例化</h5><p>它会根据默认无参构造方法来创建类对象，如果bean中没有默认无参构造函数，将会创建失败</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.shubao.dao.impl.UserDaoImpl&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h5 id="②-工厂静态方法实例化"><a href="#②-工厂静态方法实例化" class="headerlink" title="② 工厂静态方法实例化"></a>② 工厂静态方法实例化</h5><p>工厂的静态方法返回Bean实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shubao.factory;<br><br><span class="hljs-keyword">import</span> com.shubao.dao.UserDao;<br><span class="hljs-keyword">import</span> com.shubao.dao.impl.UserDaoImpl;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 静态工厂</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticFactory</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> UserDao <span class="hljs-title function_">getUserDao</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDaoImpl</span>();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--静态工厂方式创建Bean--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.shubao.factory.StaticFactory&quot;</span> <span class="hljs-attr">factory-method</span>=<span class="hljs-string">&quot;getUserDao&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="③-工厂实例方法实例化"><a href="#③-工厂实例方法实例化" class="headerlink" title="③ 工厂实例方法实例化"></a>③ 工厂实例方法实例化</h5><p>工厂的非静态方法返回Bean实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shubao.factory;<br><br><span class="hljs-keyword">import</span> com.shubao.dao.UserDao;<br><span class="hljs-keyword">import</span> com.shubao.dao.impl.UserDaoImpl;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 实例工厂</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DynamicFactory</span> &#123;<br>    <span class="hljs-keyword">public</span> UserDao <span class="hljs-title function_">getUserDao</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDaoImpl</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--实例工厂方式创建Bean--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;factory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.shubao.factory.DynamicFactory&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">factory-bean</span>=<span class="hljs-string">&quot;factory&quot;</span> <span class="hljs-attr">factory-method</span>=<span class="hljs-string">&quot;getUserDao&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="5-Bean的依赖注入入门"><a href="#5-Bean的依赖注入入门" class="headerlink" title="(5) Bean的依赖注入入门"></a>(5) Bean的依赖注入入门</h4><h5 id="①-创建-UserService，UserService-内部在调用-UserDao的save-方法"><a href="#①-创建-UserService，UserService-内部在调用-UserDao的save-方法" class="headerlink" title="①  创建 UserService，UserService 内部在调用 UserDao的save() 方法"></a>①  创建 UserService，UserService 内部在调用 UserDao的save() 方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">applicationContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>        <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> (UserDao) applicationContext.getBean(<span class="hljs-string">&quot;userDao&quot;</span>);<br>        userDao.save();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="②-将-UserServiceImpl-的创建权交给-Spring"><a href="#②-将-UserServiceImpl-的创建权交给-Spring" class="headerlink" title="② 将 UserServiceImpl 的创建权交给 Spring"></a>② 将 UserServiceImpl 的创建权交给 Spring</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.shubao.service.impl.UserServiceImpl&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h5 id="③-从-Spring-容器中获得-UserService-进行操作"><a href="#③-从-Spring-容器中获得-UserService-进行操作" class="headerlink" title="③ 从 Spring 容器中获得 UserService 进行操作"></a>③ 从 Spring 容器中获得 UserService 进行操作</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">applicationContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br><span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> (UserService) applicationContext.getBean(<span class="hljs-string">&quot;userService&quot;</span>);<br>userService.save();<br></code></pre></td></tr></table></figure><h4 id="6-Bean的依赖注入分析"><a href="#6-Bean的依赖注入分析" class="headerlink" title="(6) Bean的依赖注入分析"></a>(6) Bean的依赖注入分析</h4><p>目前UserService实例和UserDao实例都存在于Spring容器中，当前的做法是在容器外部获得UserService实例和UserDao实例，然后在程序中进行结合。</p><p><img src="/images/2022-02-12-23-44-49-image.png"></p><p>因为UserService和UserDao都在Spring容器中，而最终程序直接使用的是UserService，所以可以在 Spring容器中，将UserDao设置到UserService内部。</p><p><img src="/images/image-20220405215947993.png" alt="image-20220405215947993"></p><h4 id="7-Bean的依赖注入的概念"><a href="#7-Bean的依赖注入的概念" class="headerlink" title="(7) Bean的依赖注入的概念"></a>(7) Bean的依赖注入的概念</h4><p>依赖注入（Dependency Injection）：它是Spring框架核心IOC的具体实现。</p><p>在编写程序时，通过控制反转，把对象的创建交给了Spring，但是代码中不可能出现没有依赖的情况。IOC解耦只是降低他们都依赖关系，但是不会完全消除。例如，业务层仍会调用持久层的方法。</p><p>那这种业务层和持久层的依赖关系，在使用Spring之后，就让Spring来维护了。简单的说，就是让框架把持久层对象传入到业务层，而不用我们自己去获取。</p><h4 id="8-Bean的依赖注入方式"><a href="#8-Bean的依赖注入方式" class="headerlink" title="(8) Bean的依赖注入方式"></a>(8) Bean的依赖注入方式</h4><ul><li><p>set方法注入（p命名空间注入）</p><p>在UserServiceImpl中添加setUserDao方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-keyword">private</span> UserDao userDao;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserDao</span><span class="hljs-params">(UserDao userDao)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userDao = userDao;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        userDao.save();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置Spring容器调用set方法进行注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.shubao.dao.impl.UserDaoImpl&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.shubao.service.impl.UserServiceImpl&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDao&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>P命名空间注入的本质也是set方法注入，但比起上述的set方法注入更加方便，主要提现在配置文件中，如下：</p><p>首先需要引入P命名空间：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">xmlns:p=&quot;&lt;http://www.springframework.org/schema/p&gt;&quot;<br></code></pre></td></tr></table></figure><p>其次，需要修改注入方式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.shubao.service.impl.UserServiceImpl&quot;</span> <span class="hljs-attr">p:userDao-ref</span>=<span class="hljs-string">&quot;userDao&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>构造方法注入</p><p>创建有参构造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">applicationContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span><br>        <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>        <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> (UserDao) applicationContext.getBean(<span class="hljs-string">&quot;userDao&quot;</span>);<br>        userDao.save();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置Spring容器调用有参构造时进行注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--有参构造注入方式--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.shubao.dao.impl.UserDaoImpl&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.shubao.service.impl.UserServiceImpl&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDao&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="9-Bean的依赖注入的数据类型"><a href="#9-Bean的依赖注入的数据类型" class="headerlink" title="(9) Bean的依赖注入的数据类型"></a>(9) Bean的依赖注入的数据类型</h4><p>上面的操作，都是注入的引用Bean，除了对象的引用可以注入，普通数据类型，集合等都可以在容器中进行注入。</p><p>注入数据的三种数据类型</p><ul><li>普通数据类型</li><li>引用数据类型</li><li>集合数据类型</li></ul><h5 id="①-普通数据类型的注入"><a href="#①-普通数据类型的注入" class="headerlink" title="① 普通数据类型的注入"></a>① 普通数据类型的注入</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    <span class="hljs-keyword">private</span> String company;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCompany</span><span class="hljs-params">(String company)</span> &#123;<br>        <span class="hljs-built_in">this</span>.company = company;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(company + <span class="hljs-string">&quot;===&quot;</span> + age);<br>        System.out.println(<span class="hljs-string">&quot;UserDao save method running....&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.shubao.dao.impl.UserDaoImpl&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;company&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;15&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="②-集合数据类型（List-lt-String-gt-）的注入"><a href="#②-集合数据类型（List-lt-String-gt-）的注入" class="headerlink" title="② 集合数据类型（List&lt;String&gt;）的注入"></a>② 集合数据类型（List&lt;String&gt;）的注入</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; strList;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setStrList</span><span class="hljs-params">(List&lt;String&gt; strList)</span> &#123;<br>        <span class="hljs-built_in">this</span>.strList = strList;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(strList);<br>        System.out.println(<span class="hljs-string">&quot;UserDao save method running....&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.shubao.dao.impl.UserDaoImpl&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;strList&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>aaa<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>bbb<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>ccc<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="③-集合数据类型（List-lt-User-gt-）的注入"><a href="#③-集合数据类型（List-lt-User-gt-）的注入" class="headerlink" title="③ 集合数据类型（List&lt;User&gt;）的注入"></a>③ 集合数据类型（List&lt;User&gt;）的注入</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    <span class="hljs-keyword">private</span> List&lt;User&gt; userList;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserList</span><span class="hljs-params">(List&lt;User&gt; userList)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userList = userList;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(userList);<br>        System.out.println(<span class="hljs-string">&quot;UserDao save method running....&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;u1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.shubao.domain.User&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;u2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.shubao.domain.User&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.shubao.dao.impl.UserDaoImpl&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userList&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.shubao.domain.User&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.shubao.domain.User&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;u1&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;u2&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="④-集合数据类型（Map-lt-String-User-gt-）的注入"><a href="#④-集合数据类型（Map-lt-String-User-gt-）的注入" class="headerlink" title="④ 集合数据类型（Map&lt;String, User&gt;）的注入"></a>④ 集合数据类型（Map&lt;String, User&gt;）的注入</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    <span class="hljs-keyword">private</span> Map&lt;String, User&gt; userMap;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserMap</span><span class="hljs-params">(Map&lt;String, User&gt; userMap)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userMap = userMap;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(userMap);<br>        System.out.println(<span class="hljs-string">&quot;UserDao save method running....&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;u1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.shubao.domain.User&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;u2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.shubao.domain.User&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.shubao.dao.impl.UserDaoImpl&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userMap&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;user1&quot;</span> <span class="hljs-attr">value-ref</span>=<span class="hljs-string">&quot;u1&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;user2&quot;</span> <span class="hljs-attr">value-ref</span>=<span class="hljs-string">&quot;u2&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="⑤-集合数据类型（Properties）的注入"><a href="#⑤-集合数据类型（Properties）的注入" class="headerlink" title="⑤ 集合数据类型（Properties）的注入"></a>⑤ 集合数据类型（Properties）的注入</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    <span class="hljs-keyword">private</span> Properties properties;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setProperties</span><span class="hljs-params">(Properties properties)</span> &#123;<br>        <span class="hljs-built_in">this</span>.properties = properties;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(properties);<br>        System.out.println(<span class="hljs-string">&quot;UserDao save method running....&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.shubao.dao.impl.UserDaoImpl&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;properties&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;p1&quot;</span>&gt;</span>aaa<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;p2&quot;</span>&gt;</span>bbb<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;p3&quot;</span>&gt;</span>ccc<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="10-引入其他配置文件（分模块开发）"><a href="#10-引入其他配置文件（分模块开发）" class="headerlink" title="(10) 引入其他配置文件（分模块开发）"></a>(10) 引入其他配置文件（分模块开发）</h4><p>实际开发中，Spring的配置内容非常多，导致Spring配置很繁琐而且体积很大，所以，可以将部分配置拆解到其他的配置文件中，在Spring住配置文件中通过import标签进行加载</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;applicationContext-user-dao.xml&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">import</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="11-小结"><a href="#11-小结" class="headerlink" title="(11) 小结"></a>(11) 小结</h4><ul><li>Spring的重点配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span>&gt;</span>标签<br>    id属性：在容器中bean实例的唯一标识，不允许重复<br>    class属性：要实例化的bean的全限定名<br>    scope属性：bean的作用范围，常用的是Singleton(默认)和prototype<br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>标签：属性注入<br>        name属性：属性名称<br>        value属性：注入的普通属性值<br>        ref属性：注入的对象引用值<br>        <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span>标签<br>        <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span>标签<br>        <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span>标签<br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span>&gt;</span>标签<br><span class="hljs-tag">&lt;<span class="hljs-name">import</span>&gt;</span>标签：导入其他的Spring的配置文件 <br></code></pre></td></tr></table></figure><h2 id="三、Spring相关API"><a href="#三、Spring相关API" class="headerlink" title="三、Spring相关API"></a>三、Spring相关API</h2><h3 id="1-ApplicationContext的继承体系"><a href="#1-ApplicationContext的继承体系" class="headerlink" title="1. ApplicationContext的继承体系"></a>1. ApplicationContext的继承体系</h3><blockquote><p><a href="https://blog.csdn.net/Growing_stu/article/details/82354272">https://blog.csdn.net/Growing_stu/article/details/82354272</a></p><p><a href="https://blog.csdn.net/snowy_way/article/details/50173535">https://blog.csdn.net/snowy_way/article/details/50173535</a></p></blockquote><p>applicationContext：接口类型，代表应用上下文，可以通过其实例获得Spring容器中的Bean对象</p><p><img src="/images/20151204130539849.png"></p><p><img src="/images/20151204171304513.png"></p><h3 id="2-ApplicationContext的实现类"><a href="#2-ApplicationContext的实现类" class="headerlink" title="2. ApplicationContext的实现类"></a>2. ApplicationContext的实现类</h3><h4 id="1-ClassPathXmlApplicationContext"><a href="#1-ClassPathXmlApplicationContext" class="headerlink" title="(1) ClassPathXmlApplicationContext"></a>(1) ClassPathXmlApplicationContext</h4><p>它是从类的根路径下加载配置文件，推荐使用这种</p><h4 id="2-FileSystemXmlApplicationContext"><a href="#2-FileSystemXmlApplicationContext" class="headerlink" title="(2) FileSystemXmlApplicationContext"></a>(2) FileSystemXmlApplicationContext</h4><p>它是从磁盘路径下加载配置文件，配置文件可以在磁盘的任意位置</p><h4 id="3-AnnotationConfigApplicationContext"><a href="#3-AnnotationConfigApplicationContext" class="headerlink" title="(3) AnnotationConfigApplicationContext"></a>(3) AnnotationConfigApplicationContext</h4><p>当使用注解配置容器对象时，需要使用此类来创建Spring容器。它用来读取注解。</p><h3 id="3-getBean-方法使用"><a href="#3-getBean-方法使用" class="headerlink" title="3. getBean()方法使用"></a>3. getBean()方法使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * org/springframework/context/support/AbstractApplicationContext.java </span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getBean</span><span class="hljs-params">(String name)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>    assertBeanFactoryActive();<br>    <span class="hljs-keyword">return</span> getBeanFactory().getBean(name);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">getBean</span><span class="hljs-params">(String name, <span class="hljs-meta">@Nullable</span> Class&lt;T&gt; requiredType)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>    assertBeanFactoryActive();<br>    <span class="hljs-keyword">return</span> getBeanFactory().getBean(name, requiredType);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getBean</span><span class="hljs-params">(String name, Object... args)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>    assertBeanFactoryActive();<br>    <span class="hljs-keyword">return</span> getBeanFactory().getBean(name, args);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">getBean</span><span class="hljs-params">(Class&lt;T&gt; requiredType)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>    assertBeanFactoryActive();<br>    <span class="hljs-keyword">return</span> getBeanFactory().getBean(requiredType);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">getBean</span><span class="hljs-params">(Class&lt;T&gt; requiredType, Object... args)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>    assertBeanFactoryActive();<br>    <span class="hljs-keyword">return</span> getBeanFactory().getBean(requiredType, args);<br>&#125;<br></code></pre></td></tr></table></figure><p>其中，当参数的数据类型是字符串时，表示根据Bean的id从容器中获得Bean实例，返回是Object，需要强转。 当参数的数据类型是Class类型时，表示根据类型从容器中匹配Bean实例，当容器中相同类型的Bean有多个时， 则此方法会报错。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">applicationContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br><span class="hljs-type">UserService</span> <span class="hljs-variable">userService1</span> <span class="hljs-operator">=</span> (UserService) applicationContext.getBean(<span class="hljs-string">&quot;userService&quot;</span>);<br><span class="hljs-type">UserService</span> <span class="hljs-variable">userService2</span> <span class="hljs-operator">=</span> applicationContext.getBean(UserService.class);<br></code></pre></td></tr></table></figure><h3 id="4-知识要点"><a href="#4-知识要点" class="headerlink" title="4. 知识要点"></a>4. 知识要点</h3><p><strong>Spring的重点API</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--applicationContext.xml--&gt;</span>  <br><span class="hljs-comment">&lt;!--单例模式--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.shubao.dao.impl.UserDaoImpl&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;singleton&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--注入JdbcTemplate模板对象--&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;property name=&quot;jdbcTemplate&quot; ref=&quot;jdbcTemplate&quot; /&gt;--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br><span class="hljs-comment">//1.通过id获取Bean</span><br><span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> (UserDao) context.getBean(<span class="hljs-string">&quot;userDao&quot;</span>);<br><span class="hljs-comment">//2.通过Class获取Bean</span><br><span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> context.getBean(UserService.class);<br></code></pre></td></tr></table></figure><h2 id="四、Spring配置数据源"><a href="#四、Spring配置数据源" class="headerlink" title="四、Spring配置数据源"></a>四、Spring配置数据源</h2><h3 id="1-数据源-连接池-的作用"><a href="#1-数据源-连接池-的作用" class="headerlink" title="1. 数据源(连接池)的作用"></a>1. 数据源(连接池)的作用</h3><ul><li><p>数据源(连接池)是提高程序性能而出现的</p></li><li><p>事先实例化数据源，初始化部分连接资源</p></li><li><p>使用连接资源时从数据源中获取</p></li><li><p>使用完毕后将连接资源归还给数据源</p><p>常见的数据源(连接池)：DBCP、C3P0、Bonecp、Druid等</p></li></ul><h3 id="2-数据源的开发步骤"><a href="#2-数据源的开发步骤" class="headerlink" title="2. 数据源的开发步骤"></a>2. 数据源的开发步骤</h3><ol><li><p>导入数据源的坐标和数据库驱动坐标</p></li><li><p>创建数据源对象</p></li><li><p>设置数据源的基本连接数据</p></li><li><p>使用数据源获取连接资源和归还连接资源</p></li></ol><h3 id="3-数据源的手动创建"><a href="#3-数据源的手动创建" class="headerlink" title="3. 数据源的手动创建"></a>3. 数据源的手动创建</h3><h4 id="①-导入c3p0和druid的坐标"><a href="#①-导入c3p0和druid的坐标" class="headerlink" title="①  导入c3p0和druid的坐标"></a>①  导入c3p0和druid的坐标</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--&lt;c3p0.version&gt;0.9.5.2&lt;/c3p0.version&gt;--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">c3p0.version</span>&gt;</span>0.9.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">c3p0.version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">druid.version</span>&gt;</span>1.1.16<span class="hljs-tag">&lt;/<span class="hljs-name">druid.version</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 数据源 --&gt;</span><br><span class="hljs-comment">&lt;!-- https://zhidao.baidu.com/question/1308159611527260859.html  --&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;dependency&gt; --&gt;</span><br><span class="hljs-comment">&lt;!--   &lt;groupId&gt;com.mchange&lt;/groupId&gt; --&gt;</span><br><span class="hljs-comment">&lt;!--   &lt;artifactId&gt;c3p0&lt;/artifactId&gt; --&gt;</span><br><span class="hljs-comment">&lt;!--   &lt;version&gt;$&#123;c3p0.version&#125;&lt;/version&gt; --&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;/dependency&gt; --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>c3p0<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>c3p0<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;c3p0.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="②-导入mysql数据库驱动坐标"><a href="#②-导入mysql数据库驱动坐标" class="headerlink" title="② 导入mysql数据库驱动坐标"></a>② 导入mysql数据库驱动坐标</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- &lt;mysql.version&gt;5.1.3&lt;/mysql.version&gt; --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mysql.version</span>&gt;</span>8.0.27<span class="hljs-tag">&lt;/<span class="hljs-name">mysql.version</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--数据源学习--&gt;</span><br><span class="hljs-comment">&lt;!--MySQL数据库--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="③-创建连接池"><a href="#③-创建连接池" class="headerlink" title="③ 创建连接池"></a>③ 创建连接池</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shubao.test;<br><br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSource;<br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidPooledConnection;<br><span class="hljs-keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><span class="hljs-keyword">import</span> java.beans.PropertyVetoException;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.util.ResourceBundle;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataSourceTest</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-comment">//测试手动创建c3p0数据源</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testC3p0</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> PropertyVetoException, SQLException &#123;<br>        <span class="hljs-type">ComboPooledDataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ComboPooledDataSource</span>();<br>        dataSource.setDriverClass(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>        dataSource.setJdbcUrl(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>);<br>        dataSource.setUser(<span class="hljs-string">&quot;root&quot;</span>);<br>        dataSource.setPassword(<span class="hljs-string">&quot;1106135&quot;</span>);<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> dataSource.getConnection();<br>        System.out.println(connection);<br>        connection.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-comment">//测试手动创建druid数据源</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDruid</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> PropertyVetoException, SQLException &#123;<br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>        dataSource.setDriverClassName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>        dataSource.setUrl(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>);<br>        dataSource.setUsername(<span class="hljs-string">&quot;root&quot;</span>);<br>        dataSource.setPassword(<span class="hljs-string">&quot;1106135&quot;</span>);<br>        <span class="hljs-type">DruidPooledConnection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> dataSource.getConnection();<br>        System.out.println(connection);<br>        connection.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-comment">//测试手动创建c3p0数据源(加载properties配置文件)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testProperties</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> PropertyVetoException, SQLException &#123;<br>        <span class="hljs-comment">//读取配置文件</span><br>        <span class="hljs-type">ResourceBundle</span> <span class="hljs-variable">resourceBundle</span> <span class="hljs-operator">=</span> ResourceBundle.getBundle(<span class="hljs-string">&quot;jdbc&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> resourceBundle.getString(<span class="hljs-string">&quot;jdbc.driver&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> resourceBundle.getString(<span class="hljs-string">&quot;jdbc.url&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> resourceBundle.getString(<span class="hljs-string">&quot;jdbc.username&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> resourceBundle.getString(<span class="hljs-string">&quot;jdbc.password&quot;</span>);<br><br>        <span class="hljs-comment">//创建数据源对象，设置连接参数</span><br>        <span class="hljs-type">ComboPooledDataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ComboPooledDataSource</span>();<br>        dataSource.setDriverClass(driver);<br>        dataSource.setJdbcUrl(url);<br>        dataSource.setUser(username);<br>        dataSource.setPassword(password);<br><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> dataSource.getConnection();<br>        System.out.println(connection);<br>        connection.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-comment">//测试spring容器创建产生数据源对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSpringCreateDatasource</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> PropertyVetoException, SQLException &#123;<br>        <span class="hljs-comment">//加载配置文件</span><br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">app</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>        <span class="hljs-type">DataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> app.getBean(DataSource.class);<br><br>        <span class="hljs-comment">//获取连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> dataSource.getConnection();<br>        System.out.println(connection);<br>        connection.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-Spring配置数据源"><a href="#4-Spring配置数据源" class="headerlink" title="4. Spring配置数据源"></a>4. Spring配置数据源</h3><h4 id="1-可以将DataSource的创建权交由Spring容器去完成"><a href="#1-可以将DataSource的创建权交由Spring容器去完成" class="headerlink" title="1) 可以将DataSource的创建权交由Spring容器去完成"></a>1) 可以将DataSource的创建权交由Spring容器去完成</h4><ul><li><p>DataSource有无参构造方法，而Spring默认就是通过无参构造方法实例化对象的</p></li><li><p>DataSource要想使用需要通过set方法设置数据库连接信息，而Spring可以通过set方法进行字符串注入</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  2.配置数据源bean  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClass&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbcUrl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-抽取jdbc配置文件"><a href="#2-抽取jdbc配置文件" class="headerlink" title="2) 抽取jdbc配置文件"></a>2) 抽取jdbc配置文件</h4><p>① applicationContext.xml加载jdbc.properties配置文件获取连接信息。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># jdbc.properties</span><br><span class="hljs-attr">jdbc.driver</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-comment">#jdbc.url=jdbc:mysql://localhost:3306/wollo</span><br><span class="hljs-attr">jdbc.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/wollo?characterEncoding=utf8</span><br><span class="hljs-attr">jdbc.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">jdbc.password</span>=<span class="hljs-string">1106135</span><br></code></pre></td></tr></table></figure><p>② 首先，需要引入context命名空间和约束路径：</p><ul><li><p>命名空间：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">xmlns:context=&quot;http://www.springframework.org/schema/context&quot;<br></code></pre></td></tr></table></figure></li><li><p>约束路径：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">http://www.springframework.org/schema/context<br>http://www.springframework.org/schema/context/spring-context.xsd<br></code></pre></td></tr></table></figure></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       &quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--  加载外部的properties文件  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:jdbc.properties&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:property-placeholder</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  配置数据源bean  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClass&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbcUrl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-知识要点"><a href="#5-知识要点" class="headerlink" title="5. 知识要点"></a>5. 知识要点</h3><p>Spring容器加载properties文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  加载外部的properties文件  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:jdbc.properties&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:property-placeholder</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--  配置数据源bean  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClass&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="五、Spring的注解开发"><a href="#五、Spring的注解开发" class="headerlink" title="五、Spring的注解开发"></a>五、Spring的注解开发</h2><h3 id="1-Spring原始注解"><a href="#1-Spring原始注解" class="headerlink" title="1. Spring原始注解"></a>1. Spring原始注解</h3><p>Spring是轻代码而重配置的框架，配置比较繁重，影响开发效率，所以注解开发是一种趋势，注解代替xml配置文件可以简化配置，提高开发效率。</p><p>Spring原始注解主要是替代&lt;Bean&gt;的配置</p><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Component</td><td>使用在类上用于实例化Bean</td></tr><tr><td>@Controller</td><td>使用在web层类上用于实例化Bean</td></tr><tr><td>@Service</td><td>使用在service层类上用于实例化Bean</td></tr><tr><td>@Repository</td><td>使用在dao层类上用于实例化Bean</td></tr><tr><td>@Autowired</td><td>使用在字段上用于根据类型依赖注入</td></tr><tr><td>@Qualifier</td><td>结合@Autowired一起使用用于根据名称进行依赖注入</td></tr><tr><td>@Resource</td><td>相当于@Autowired + @Qualifier，按照名称进行注入</td></tr><tr><td>@Value</td><td>注入普通属性</td></tr><tr><td>@Scope</td><td>标注Bean的作用范围</td></tr><tr><td>@PostConstruct</td><td>使用在方法上标注该方法是Bean的初始化方法</td></tr><tr><td>@PreDestroy</td><td>使用在方法上标注该方法是Bean的销毁方法</td></tr></tbody></table><p>注意：</p><p>使用注解进行开发时，需要在applicationContext.xml中配置组件扫描，作用是指定哪个包及其子包下的Bean需要进行扫描以便识别和使用注解的类、字段和方法。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  配置组件扫描  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.shubao&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>使用@Compont或@Repository标识UserDaoImpl需要Spring进行实例化。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//@Component(&quot;userDao&quot;)</span><br><span class="hljs-meta">@Repository(&quot;userDao&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;save running... ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>使用@Compont或@Service标识UserServiceImpl需要Spring进行实例化</li><li>使用@Autowired或者@Autowired+@Qulifier或者@Resource进行userDao的注入</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shubao.service.impl;<br><br><span class="hljs-keyword">import</span> com.shubao.dao.UserDao;<br><span class="hljs-keyword">import</span> com.shubao.domain.User;<br><span class="hljs-keyword">import</span> com.shubao.service.UserService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Scope;<br><span class="hljs-keyword">import</span> org.springframework.dao.EmptyResultDataAccessException;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">//@Component(&quot;userService&quot;)</span><br><span class="hljs-meta">@Service(&quot;userService&quot;)</span><br><span class="hljs-comment">//@Scope(&quot;prototype&quot;) //标注bean的作用范围</span><br><span class="hljs-meta">@Scope(&quot;singleton&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span> <span class="hljs-comment">//按照数据类型从Spring容器中进行匹配</span><br><span class="hljs-comment">//    @Qualifier(&quot;userDao&quot;) //按照id值从容器中进行匹配的，但是此处@Qualifier结合@Autowired一起使用</span><br><span class="hljs-comment">//    @Resource(name = &quot;userDao&quot;) //@Resource相当于@Autowired + @Qualifier</span><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>使用@Value进行字符串的注入</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository(&quot;userDao&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    <span class="hljs-meta">@Value(&quot;注入普通数据&quot;)</span><br>    <span class="hljs-keyword">private</span> String str;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String driver;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(str);<br>        System.out.println(driver);<br>        System.out.println(<span class="hljs-string">&quot;save running... ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>使用@Scope标注Bean的范围</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//@Scope(&quot;prototype&quot;)</span><br><span class="hljs-meta">@Scope(&quot;singleton&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    <span class="hljs-comment">//此处省略代码</span><br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>使用@PostConstruct标注初始化方法，使用@PreDestroy标注销毁方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostConstruct</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;初始化方法....&quot;</span>);<br>&#125;<br><span class="hljs-meta">@PreDestroy</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;销毁方法.....&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-Spring的新注解"><a href="#2-Spring的新注解" class="headerlink" title="2. Spring的新注解"></a>2. Spring的新注解</h3><p>使用上面的注解还不能全部替代xml配置文件，还需要使用Spring的其他注解替代。</p><ul><li>非自定义的Bean的配置：<bean></li><li>加载properties文件的配置：context:property-placeholder</li><li>组件扫描的配置：context:component-scan</li><li>引入其他文件：<import></li></ul><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Configuration</td><td>用于指定当前类是一个Spring配置类，当创建容器时会从该类上加载注解</td></tr><tr><td>@ComponentScan</td><td>用于指定Spring在初始化容器时要扫描的包。<br />作用和在Spring的xml配置文件中的&lt;context:component-scan base-package&#x3D;”com.shubao” &#x2F;&gt;一样</td></tr><tr><td>@Bean</td><td>使用在方法上，标注将该方法的返回值存储到Spring容器中</td></tr><tr><td>@PropertySource</td><td>用于加载properties文件中的配置</td></tr><tr><td>@Import</td><td>用于导入其他配置类</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shubao.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Import;<br><br><span class="hljs-comment">//配置该类是Spring的核心配置类</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> &lt;!--  配置组件扫描  --&gt;</span><br><span class="hljs-comment"> &lt;context:component-scan base-package=&quot;com.shubao&quot;&gt;&lt;/context:component-scan&gt;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@ComponentScan(&quot;com.shubao&quot;)</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">引入子配置文件类</span><br><span class="hljs-comment">&lt;import resource=&quot;xxx.xxx&quot;&gt;&lt;/import&gt;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Import(&#123;DataSourceConfiguration.class&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfiguration</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shubao.config;<br><br><span class="hljs-keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.PropertySource;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><span class="hljs-keyword">import</span> java.beans.PropertyVetoException;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">&lt;!--  加载外部的properties文件  --&gt;</span><br><span class="hljs-comment">    &lt;context:property-placeholder location=&quot;classpath:jdbc.properties&quot;&gt;&lt;/context:property-placeholder&gt;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataSourceConfiguration</span> &#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String driver;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String url;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String username;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-meta">@Bean(&quot;dataSource&quot;)</span> <span class="hljs-comment">//Spring会将当前方法的返回值以指定名称存储到Spring容器中</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">getDataSource</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> PropertyVetoException &#123;<br>        <span class="hljs-type">ComboPooledDataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ComboPooledDataSource</span>();<br>        dataSource.setDriverClass(driver);<br>        dataSource.setJdbcUrl(url);<br>        dataSource.setUser(username);<br>        dataSource.setPassword(password);<br>        <span class="hljs-keyword">return</span> dataSource;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="六、Spring整合Junit"><a href="#六、Spring整合Junit" class="headerlink" title="六、Spring整合Junit"></a>六、Spring整合Junit</h2><h3 id="1-原始Junit测试Spring的问题"><a href="#1-原始Junit测试Spring的问题" class="headerlink" title="1. 原始Junit测试Spring的问题"></a>1. 原始Junit测试Spring的问题</h3><p>在测试类中，每个测试方法都有以下两行代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);<br>UserDao userDao = (UserDao) context.getBean(&quot;userDao&quot;);<br></code></pre></td></tr></table></figure><p>这两行代码的作用是获取容器，如果不写的话，会提示空指针异常，所以不能轻易删掉。</p><h3 id="2-解决思路"><a href="#2-解决思路" class="headerlink" title="2. 解决思路"></a>2. 解决思路</h3><ul><li>让SpringJunit负责创建Spring容器，但是需要将配置文件的名称告诉它</li><li>将需要进行测试的Bean直接在测试类中进行注入</li></ul><h3 id="3-Spring集成Junit的步骤"><a href="#3-Spring集成Junit的步骤" class="headerlink" title="3. Spring集成Junit的步骤"></a>3. Spring集成Junit的步骤</h3><ul><li>导入Spring集成Junit的坐标</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">junit.version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">junit.version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">spring.version</span>&gt;</span>5.0.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">spring.version</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--spring--&gt;</span><br><span class="hljs-comment">&lt;!--此处需要注意的是，spring5 及以上版本要求 junit 的版本必须是 4.12 及以上--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>使用@Runwith注解替换原来的运行器，让测试类运行于Spring测试环境</li><li>使用@ContextConfiguration指定配置文件或配置类</li><li>使用@Autowired注入需要测试的对象</li><li>创建测试方法进行测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shubao.test;<br><br><span class="hljs-keyword">import</span> com.shubao.config.SpringConfiguration;<br><span class="hljs-keyword">import</span> com.shubao.service.UserService;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.test.context.ContextConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> https://blog.csdn.net/weixin_43671497/article/details/90543225</span><br><span class="hljs-comment"> @RunWith作用</span><br><span class="hljs-comment"> @RunWith 就是一个运行器</span><br><span class="hljs-comment"> @RunWith(JUnit4.class) 就是指用JUnit4来运行</span><br><span class="hljs-comment"> @RunWith(SpringJUnit4ClassRunner.class),让测试运行于Spring测试环境</span><br><span class="hljs-comment"> @RunWith(Suite.class) 的话就是一套测试集合，</span><br><span class="hljs-comment"> @ContextConfiguration Spring整合JUnit4测试时，使用注解引入多个配置文件</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="hljs-comment">//@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span><br><span class="hljs-meta">@ContextConfiguration(classes = &#123;SpringConfiguration.class&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringJunitTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DataSource dataSource;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSpringJunitXML</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br><span class="hljs-comment">//        userService.save();</span><br>        System.out.println(dataSource.getConnection());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="七、Spring集成web环境"><a href="#七、Spring集成web环境" class="headerlink" title="七、Spring集成web环境"></a>七、Spring集成web环境</h2><h3 id="1-ApplicationContext应用上下文获取方式"><a href="#1-ApplicationContext应用上下文获取方式" class="headerlink" title="1. ApplicationContext应用上下文获取方式"></a>1. ApplicationContext应用上下文获取方式</h3><p>应用上下文对象是通过new ClasspathXmlApplicationContext(Spring配置文件)方式获取的，但是每次从容器中获得Bean时都要编写new ClasspathXmlApplicationContext(Spring配置文件)，这样的弊端时配置文件加载多次，应用上下文对象创建多次。</p><p>在web项目中，可以使用ServletContextListener监听web应用的启动，我们可以在web应用启动时，就加载Spring的配置文件，创建应用上下文对象ApplicationContext，在将其存储到最大的域ServletContext域中，这样就可以在任意位置从域中获得应用上下文ApplicationContext对象了。</p><h3 id="2-Spring提供获取应用上下文的工具"><a href="#2-Spring提供获取应用上下文的工具" class="headerlink" title="2. Spring提供获取应用上下文的工具"></a>2. Spring提供获取应用上下文的工具</h3><p>上面的分析不用手动实现，Spring提供了一个监听器ContextLoaderListener就是对上述功能的封装，该监听器内部加载Spring配置文件，创建应用上下文对象，并存储到ServletContext域中，提供了一个客户端工具WebApplicationContextUtils供使用者获得应用上下文对象。</p><p>所以我们需要做的只有两件事：</p><ul><li>在web.xml中配置ContextLoaderListener监听器(导入Spring-web坐标)</li><li>使用WebApplicationContextUtils获得应用上下文对象</li></ul><h4 id="1-导入Spring集成web的坐标"><a href="#1-导入Spring集成web的坐标" class="headerlink" title="1) 导入Spring集成web的坐标"></a>1) 导入Spring集成web的坐标</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.14<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-配置ContextLoaderListener监听器"><a href="#2-配置ContextLoaderListener监听器" class="headerlink" title="2) 配置ContextLoaderListener监听器"></a>2) 配置ContextLoaderListener监听器</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 全局初始化参数 --&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br><br> <span class="hljs-comment">&lt;!-- 配置监听器 --&gt;</span><br> <span class="hljs-comment">&lt;!-- 自定义监听器 --&gt;</span><br><span class="hljs-comment">&lt;!--  &lt;listener&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--    &lt;listener-class&gt;com.shubao.listener.ContextLoaderListener&lt;/listener-class&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--  &lt;/listener&gt;--&gt;</span><br><br> <span class="hljs-comment">&lt;!-- 导入spring-web的监听器 --&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-通过工具获得应用上下文对象"><a href="#3-通过工具获得应用上下文对象" class="headerlink" title="3)  通过工具获得应用上下文对象"></a>3)  通过工具获得应用上下文对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">applicationContext</span> <span class="hljs-operator">=</span> WebApplicationContextUtils.getWebApplicationContext(servletContext);<br><span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> applicationContext.getBean(<span class="hljs-string">&quot;id&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="3-知识要点"><a href="#3-知识要点" class="headerlink" title="3. 知识要点"></a>3. 知识要点</h3><p>    Spring集成web环境步骤</p><ul><li><p>①配置ContextLoaderListener监听器</p></li><li><p>②使用WebApplicationContextUtils获得应用上下文</p></li></ul><h2 id="八、SpringMVC简介"><a href="#八、SpringMVC简介" class="headerlink" title="八、SpringMVC简介"></a>八、SpringMVC简介</h2><h3 id="1-SpringMVC概述"><a href="#1-SpringMVC概述" class="headerlink" title="1. SpringMVC概述"></a>1. SpringMVC概述</h3><p>SpringMVC是一种基于Java的实现MVC设计模型的请求驱动类型的轻量级web框架，属于SpringFrameWork的后续产品，已经融合在Spring Web Flow中。</p><p><img src="/images/2022-02-12-23-51-42-image.png"></p><h3 id="2-SpringMVC快速入门"><a href="#2-SpringMVC快速入门" class="headerlink" title="2. SpringMVC快速入门"></a>2. SpringMVC快速入门</h3><p>开发步骤</p><ol><li><p>导入Spring和SpringMVC相关坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">spring.version</span>&gt;</span>5.0.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">spring.version</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--  spring mvc  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p> 导入Servlet和Jsp的坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">jsp-api.version</span>&gt;</span>2.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">jsp-api.version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-api.version</span>&gt;</span>3.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-api.version</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--servlet--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;jsp-api.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;servlet-api.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>配置SpringMVC核心控制器DispathcerServlet</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置Spring MVC的前端控制器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>创建Controller类和视图页面</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: chris<br>  Date: <span class="hljs-number">2022</span>/<span class="hljs-number">1</span>/<span class="hljs-number">8</span> 0008<br>  Time: <span class="hljs-number">16</span>:<span class="hljs-number">36</span><br>  To change <span class="hljs-built_in">this</span> template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Success&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;success...&lt;/h1&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure></li><li><p>使用注解配置Controller类中业务方法的映射地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/quick&quot;, method = RequestMethod.GET, params = &#123;&quot;username&quot;&#125;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">quick</span><span class="hljs-params">(String username)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;UserController.save() running...&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;username = &quot;</span> + username);<br><br>    <span class="hljs-comment">// return &quot;/success.jsp&quot;;//默认方式：forward 转发</span><br>    <span class="hljs-comment">// return &quot;forward:/success.jsp&quot;;//forward 转发</span><br>    <span class="hljs-comment">// return &quot;redirect:/success.jsp&quot;;//redirect 重定向</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<span class="hljs-comment">//配置视图解析器</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>配置SpringMVC核心文件spring-mvc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        &quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  Controller的组件扫描  --&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;context:component-scan base-package=&quot;com.shubao.controller&quot;&gt;&lt;/context:component-scan&gt;--&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  组件扫描：主要扫描Controller  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.shubao.controller&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- include 包括 ， exclude 不包括、排除--&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;context:include-filter type=&quot;annotation&quot; expression=&quot;org.springframework.stereotype.Controller&quot;&gt;&lt;/context:include-filter&gt;--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><br><br>    <span class="hljs-comment">&lt;!--2.配置内部资源视图解析器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;viewResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/pages/&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;property name=&quot;prefix&quot; value=&quot;/jsp/&quot; /&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;property name=&quot;prefix&quot; value=&quot;/&quot; /&gt;--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>客户端发起请求</p></li></ol><p><img src="/images/2022-02-12-23-52-50-image.png"></p><h3 id="3-SpringMVC流程图示"><a href="#3-SpringMVC流程图示" class="headerlink" title="3. SpringMVC流程图示"></a>3. SpringMVC流程图示</h3><p><img src="/images/Snipaste_2022-04-05_23-22-39.png"></p><h2 id="九、SpringMVC组件解析"><a href="#九、SpringMVC组件解析" class="headerlink" title="九、SpringMVC组件解析"></a>九、SpringMVC组件解析</h2><h3 id="1-SpringMVC的执行流程"><a href="#1-SpringMVC的执行流程" class="headerlink" title="1. SpringMVC的执行流程"></a>1. SpringMVC的执行流程</h3><p>① 用户发送请求到前端控制器DispatcherServlet</p><p>② DispatcherServlet收到请求调用HandlerMapping处理器映射器</p><p>③ 处理器映射器找到具体的处理器(可以根据xml配置，注解进行查找)，生成处理器对象及处理器拦截器(如果有则生成)，一并返回给DispatcherServlet。</p><p>④ DispatcherServlet调用HandlerAdapter处理器适配器</p><p>⑤ HandlerAdapter经过适配器调用具体的处理器(Controller，也叫后端控制器)</p><p>⑥ Controller执行完成返回MOdelAndView</p><p>⑦ HandlerAdapter将Controller执行结果ModelAndView返回给DispatcherServlet</p><p>⑧ DispatcherServlet将ModelAndView传给ViewResolver视图解析器</p><p>⑨ ViewResolver解析后返回具体的View</p><p>⑩ DispatcherServlet根据View进行渲染试图(即将模型数据填充至试图中)，DispatcherServlet响应用户。</p><p><img src="/images/Snipaste_2022-04-05_23-23-55.png"></p><ol><li><p>前端控制器：DispatcherServlet</p><p>用户请求到达前端控制器，它就相当于 MVC 模式中的 C，DispatcherServlet 是整个流程控制的中心，由它调用其它组件处理用户的请求，DispatcherServlet 的存在降低了组件之间的耦合性。 </p></li><li><p>处理器映射器：HandlerMapping</p><p>HandlerMapping 负责根据用户请求找到 Handler 即处理器，SpringMVC 提供了不同的映射器实现不同的 映射方式，例如：配置文件方式，实现接口方式，注解方式等。 </p></li><li><p>处理器适配器：HandlerAdapter</p><p>通过 HandlerAdapter 对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理 器进行执行。</p></li><li><p>处理器：Handler</p><p>它就是我们开发中要编写的具体业务控制器。由 DispatcherServlet 把用户请求转发到 Handler。由 Handler 对具体的用户请求进行处理。 </p></li><li><p>视图解析器：View Resolver</p><p>View Resolver 负责将处理结果生成 View 视图，View Resolver 首先根据逻辑视图名解析成物理视图名，即 具体的页面地址，再生成 View 视图对象，最后对 View 进行渲染将处理结果通过页面展示给用户。 </p></li><li><p>视图：View</p><p>SpringMVC 框架提供了很多的 View 视图类型的支持，包括：jstlView、freemarkerView、pdfView等。最 常用的视图就是 jsp。一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由程 序员根据业务需求开发具体的页面。</p></li></ol><h3 id="2-SpringMVC注解解析"><a href="#2-SpringMVC注解解析" class="headerlink" title="2. SpringMVC注解解析"></a>2. SpringMVC注解解析</h3><p>@RequestMapping</p><p>作用：用户建立请求URL和处理请求方法之间的对应关系</p><p>位置：</p><ul><li><p>类上：请求URL的第一级访问目录。此处不写的话，就相当于应用的根目录</p></li><li><p>方法上：请求URL的第二级访问目录，与类上的使用@RequestMapping标注的一级目录一起组成访问虚拟路径</p></li></ul><p>属性：</p><ul><li><p>value：用于指定请求的URL，它和path属性的作用是一样的</p></li><li><p>method：用于指定请求的方式</p></li><li><p>params：用于指定限制请求参数的条件。它支持简单的表达式，要求请求参数的key和value必须配置的一模一样</p></li></ul><p>例如：</p><ul><li><p>params &#x3D; {“username”}，表示请求参数必须要有username</p></li><li><p>params &#x3D; {“money!100”}，表示请求参数中money不能是100</p></li></ul><h4 id="①-MVC的命名空间引入"><a href="#①-MVC的命名空间引入" class="headerlink" title="① MVC的命名空间引入"></a>① MVC的命名空间引入</h4><p>命名空间：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">xmlns:context=&quot;http://www.springframework.org/schema/context&quot;<br>xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;<br></code></pre></td></tr></table></figure><p>约束条件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">http://www.springframework.org/schema/context <br>http://www.springframework.org/schema/context/spring-context.xsd<br>http://www.springframework.org/schema/mvc <br>http://www.springframework.org/schema/mvc/spring-mvc.xsd<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        &quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 相关配置内容 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="②-组件扫描"><a href="#②-组件扫描" class="headerlink" title="② 组件扫描"></a>② 组件扫描</h4><p>SpringMVC基于Spring容器，所以在进行SpringMVC操作时，需要将Controller存储到Spring容器中，如果使用@Controller注解标注的话，就需要使用&lt;context:component-sacn base-package&#x3D;”com.shubao.controller” &#x2F;&gt;进行组件扫描</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.shubao.controller&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- include 包括 ， exclude 不包括、排除--&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;context:include-filter type=&quot;annotation&quot; expression=&quot;org.springframework.stereotype.Controller&quot;&gt;&lt;/context:include-filter&gt;--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-SpringMVC的XML配置解析"><a href="#3-SpringMVC的XML配置解析" class="headerlink" title="3. SpringMVC的XML配置解析"></a>3. SpringMVC的XML配置解析</h3><h4 id="①-视图解析器"><a href="#①-视图解析器" class="headerlink" title="① 视图解析器"></a>① 视图解析器</h4><p>SpringMVC有默认组件配置，默认组件都是DispatcherServlet.properties配置文件中配置的，该配置文件地址为：org&#x2F;springframework&#x2F;web&#x2F;servlet&#x2F;DispatcherServlet.properties，该文件中配置了默认的视图解析器，如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">org.springframework.web.servlet.ViewResolver</span>=<span class="hljs-string">org.springframework.web.servlet.view.InternalResourceViewResolver</span><br></code></pre></td></tr></table></figure><p>翻开该解析器源码，可以看到该解析器的默认配置，如下：</p><blockquote><p>org.springframework.web.servlet.view.UrlBasedViewResolver</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Prefix for special view names that specify a redirect URL (usually</span><br><span class="hljs-comment"> * to a controller after a form has been submitted and processed).</span><br><span class="hljs-comment"> * Such view names will not be resolved in the configured default</span><br><span class="hljs-comment"> * way but rather be treated as special shortcut.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">REDIRECT_URL_PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;redirect:&quot;</span>;<span class="hljs-comment">//重定向前缀</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Prefix for special view names that specify a forward URL (usually</span><br><span class="hljs-comment"> * to a controller after a form has been submitted and processed).</span><br><span class="hljs-comment"> * Such view names will not be resolved in the configured default</span><br><span class="hljs-comment"> * way but rather be treated as special shortcut.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">FORWARD_URL_PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;forward:&quot;</span>;<span class="hljs-comment">//转发前缀（默认值）</span><br><br><span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">prefix</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-comment">//视图名称前缀</span><br><br><span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">suffix</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-comment">//视图名称后缀</span><br></code></pre></td></tr></table></figure><p>我们可以通过属性注入的方式修改视图的的前后缀</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--2.配置内部资源视图解析器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;viewResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/pages/&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;property name=&quot;prefix&quot; value=&quot;/jsp/&quot; /&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;property name=&quot;prefix&quot; value=&quot;/&quot; /&gt;--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-知识要点-1"><a href="#4-知识要点-1" class="headerlink" title="4. 知识要点"></a>4. 知识要点</h3><p><strong>SpringMVC的相关组件</strong></p><ul><li><p>前端控制器：DispatcherServlet</p></li><li><p>处理器映射器：HandlerMapping</p></li><li><p>处理器适配器：HandlerAdapter</p></li><li><p>处理器：Handler</p></li><li><p>视图解析器：ViewResolver</p></li><li><p>视图：View</p></li></ul><p><strong>SpringMVC的注解和配置</strong></p><ul><li><p>请求映射注解：@RequestMapping</p></li><li><p>视图解析器配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--2.配置内部资源视图解析器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;viewResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/pages/&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;property name=&quot;prefix&quot; value=&quot;/jsp/&quot; /&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;property name=&quot;prefix&quot; value=&quot;/&quot; /&gt;--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="十、SpringMVC的数据响应"><a href="#十、SpringMVC的数据响应" class="headerlink" title="十、SpringMVC的数据响应"></a>十、SpringMVC的数据响应</h2><h3 id="1-SpringMVC的数据响应方式"><a href="#1-SpringMVC的数据响应方式" class="headerlink" title="1. SpringMVC的数据响应方式"></a>1. SpringMVC的数据响应方式</h3><h4 id="1-页面跳转"><a href="#1-页面跳转" class="headerlink" title="(1) 页面跳转"></a>(1) 页面跳转</h4><ul><li><p>直接返回字符串</p></li><li><p>通过ModelAndView对象返回</p></li></ul><h4 id="2-回写数据"><a href="#2-回写数据" class="headerlink" title="(2) 回写数据"></a>(2) 回写数据</h4><ul><li><p>直接返回字符串</p></li><li><p>返回对象或集合</p></li></ul><h4 id="3-页面跳转"><a href="#3-页面跳转" class="headerlink" title="(3) 页面跳转"></a>(3) 页面跳转</h4><h5 id="①-返回字符串形式"><a href="#①-返回字符串形式" class="headerlink" title="① 返回字符串形式"></a>① 返回字符串形式</h5><p>直接返回字符串：此种方式会将返回的字符串与视图解析器的前后缀拼接后跳转。</p><p><img src="/images/Snipaste_2022-02-26_16-27-23.png"></p><p>返回带有前缀的字符串：</p><p>转发：forward:&#x2F;WEB-INF&#x2F;view&#x2F;index.jsp</p><p>重定向：redirect:&#x2F;index.jsp</p><h4 id="4-回写数据"><a href="#4-回写数据" class="headerlink" title="(4) 回写数据"></a>(4) 回写数据</h4><h5 id="①-返回对象或集合"><a href="#①-返回对象或集合" class="headerlink" title="① 返回对象或集合"></a>① 返回对象或集合</h5><p>在方法上添加@ResponseBody就可以返回json格式的字符串，但是这样配置比较麻烦，配置的代码比较多，可以使用MVC的注解驱动代替上述配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--1.mvc的注解驱动--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>在SpringMVC的各个组件中，<strong>处理器映射器</strong>、<strong>处理器适配器</strong>、<strong>视图解析器</strong>称为SpringMVC的三大组件。</p><p>使用&lt;mvc:annotation-driven &#x2F;&gt;自动加载RequestMappingHandlerMapping（处理器映射器）和RequestMappingHandlerAdapt（处理器适配器），可以在spring-xml.xml配置文件中使用&lt;mvc:annotation-driven &#x2F;&gt;替代注解处理器和适配器的配置。</p><p>同时，使用&lt;mvc:annotation-driven &#x2F;&gt;默认底层就会集成Jackson进行对象或者集合的json格式字符串的转换。</p><h4 id="5-知识要点-1"><a href="#5-知识要点-1" class="headerlink" title="(5) 知识要点"></a>(5) 知识要点</h4><h5 id="①-页面跳转"><a href="#①-页面跳转" class="headerlink" title="① 页面跳转"></a>① 页面跳转</h5><ul><li><p>直接返回字符串</p></li><li><p>通过ModelAndView对象返回</p></li></ul><h5 id="②-回写数据"><a href="#②-回写数据" class="headerlink" title="② 回写数据"></a>② 回写数据</h5><ul><li><p>直接返回字符串</p></li><li><p>返回对象或集合</p></li></ul><h3 id="2-Spring-MVC获得请求数据"><a href="#2-Spring-MVC获得请求数据" class="headerlink" title="2. Spring MVC获得请求数据"></a>2. Spring MVC获得请求数据</h3><h4 id="1-获得请求参数"><a href="#1-获得请求参数" class="headerlink" title="(1) 获得请求参数"></a>(1) 获得请求参数</h4><p>客户端请求参数的格式是：name&#x3D;value1&amp;age&#x3D;value2…</p><p>服务器端要获得请求的参数，有时还需要进行数据的封装，SpringMVC可以接收如下类型的参数：</p><ul><li><p>基本数据类型参数</p></li><li><p>POJO类型参数</p></li><li><p>数据类型参数</p></li><li><p>集合类型参数</p></li></ul><h4 id="2-获得基本类型参数"><a href="#2-获得基本类型参数" class="headerlink" title="(2) 获得基本类型参数"></a>(2) 获得基本类型参数</h4><p>Controller中业务方法的参数名称要与请求参数的name一致，参数值会自动映射匹配。</p><blockquote><p>请求地址：<a href="http://localhost:8080/user/quick11?username=zhangsan&amp;age=12">http://localhost:8080/user/quick11?username=zhangsan&amp;age=12</a></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 请求参数类型为普通数据类型</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> username 用户名</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> age 年龄</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/quick11&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quick11</span><span class="hljs-params">(String username, <span class="hljs-type">int</span> age)</span> &#123;<br>    System.out.println(username);<br>    System.out.println(age);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-获得POJO类型参数"><a href="#3-获得POJO类型参数" class="headerlink" title="(3) 获得POJO类型参数"></a>(3) 获得POJO类型参数</h4><p>Controller中的业务方法的POJO参数的属性名与请求参数的name一致，参数值会自动映射匹配。</p><blockquote><p>请求地址：<a href="http://localhost:8080/user/quick12?username=zhangsan&amp;age=12">http://localhost:8080/user/quick12?username=zhangsan&amp;age=12</a></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String username;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-comment">//getting&amp;setting</span><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 请求参数类型为POJO对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> user 请求参数对象</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/quick12&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quick12</span><span class="hljs-params">(User user)</span> &#123;<br>    System.out.println(user);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-获得数据类型参数"><a href="#4-获得数据类型参数" class="headerlink" title="(4) 获得数据类型参数"></a>(4) 获得数据类型参数</h4><p>Controller中的业务方法数据名称与请求参数的name一致，参数值会自动映射匹配。</p><blockquote><p>请求地址：<a href="http://localhost:8080/user/quick13?strs=11&amp;strs=22&amp;strs=33">http://localhost:8080/user/quick13?strs=11&amp;strs=22&amp;strs=33</a></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 请求参数类型为数组</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> strs 请求参数数组</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/quick13&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quick13</span><span class="hljs-params">(String[] strs)</span> &#123;<br>    System.out.println(Arrays.asList(strs));<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-获得集合类型参数"><a href="#5-获得集合类型参数" class="headerlink" title="(5) 获得集合类型参数"></a>(5) 获得集合类型参数</h4><p>获得集合参数时，要将集合参数包装到一个POJO中才可以</p><p>当使用Ajax提交时，可以指定contentType为json形式，那么在方法参数位置使用@RequestBody可以直接接收集合数据而无需使用POJO进行包装。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> userList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();</span><br><span class="language-javascript">userList.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">username</span>: <span class="hljs-string">&quot;zhangsan&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">18</span> &#125;);</span><br><span class="language-javascript">userList.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">username</span>: <span class="hljs-string">&quot;lisi&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span> &#125;);</span><br><span class="language-javascript">$.<span class="hljs-title function_">ajax</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;POST&quot;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/user/quick15&quot;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(userList),</span><br><span class="language-javascript">    <span class="hljs-attr">contentType</span>: <span class="hljs-string">&quot;application/json;charset=utf-8&quot;</span></span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="6-请求数据乱码问题"><a href="#6-请求数据乱码问题" class="headerlink" title="(6) 请求数据乱码问题"></a>(6) 请求数据乱码问题</h4><p>当post请求时，数据会出现乱码，我们可以配置一个过滤器来进行编码的过滤。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置全局过滤器filter--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="7-参数绑定注解-requestParam"><a href="#7-参数绑定注解-requestParam" class="headerlink" title="(7) 参数绑定注解@requestParam"></a>(7) 参数绑定注解@requestParam</h4><p>当请求的参数名称与Controller的业务方法参数名称不一致时，需要通过@RequestParam注解显式的绑定。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/user/quick14&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/quick16&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quick16</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;name&quot;)</span> String username)</span> &#123;<br>    System.out.println(username);<br>&#125;<br></code></pre></td></tr></table></figure><p>注解@RequestParam有如下参数可以使用：</p><ul><li><p>value：请求参数名称</p></li><li><p>required：表示在该请求中指定的请求参数是否必须包括，默认是true，提交时如果没有此参数则报错</p></li><li><p>defaultValue：当没有指定请求参数时，则使用指定的默认值赋值</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/quick16&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quick16</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;username&quot;, required = false, defaultValue = &quot;tom&quot;)</span> String username)</span> &#123;<br>    System.out.println(username);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="8-获得Restful风格的参数"><a href="#8-获得Restful风格的参数" class="headerlink" title="(8) 获得Restful风格的参数"></a>(8) 获得Restful风格的参数</h4><p>Restful是一种软件架构风格、设计风格，而不是标准，只是提供了一组设计原则和约束条件。主要用于客户端和服务器交互类的软件，基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存机制等。</p><p>Restful风格的请求是使用“url+请求方式”表示一次i请求目的的，HTTP协议里面四个表示操作方式的动词如下：</p><ul><li><p>GET：用于获取资源</p></li><li><p>POST：用于新建资源</p></li><li><p>PUT：用于更新资源</p></li><li><p>DELETE：用于删除资源</p></li></ul><p>例如：</p><ul><li><p>&#x2F;user&#x2F;1 GET：得到id&#x3D;1的user</p></li><li><p>&#x2F;user&#x2F;1 DELETE：删除id&#x3D;1的user</p></li><li><p>&#x2F;user&#x2F;1 PUT：更新id&#x3D;1的user</p></li><li><p>&#x2F;user POST：新增user</p></li></ul><p>上面的url地址&#x2F;user&#x2F;1中的1就是要获得的请求参数，在SpringMVC中可以使用占位符进行参数绑定。地址&#x2F;user&#x2F;1可以写成&#x2F;user&#x2F;{id}，占位符{id}对应的就是1的值。在业务方法中，我们可以使用@PathVariable注解进行占位符的匹配获取工作。</p><blockquote><p>请求地址：<a href="http://localhost:8080/user/quick17/zhangsan">http://localhost:8080/user/quick17/zhangsan</a></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Restful风格</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> username 用户名</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/quick17/&#123;username&#125;&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quick17</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;username&quot;)</span> String username)</span> &#123;<br>    System.out.println(username);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="9-自定义类型转换器"><a href="#9-自定义类型转换器" class="headerlink" title="(9) 自定义类型转换器"></a>(9) 自定义类型转换器</h4><p>SpringMVC默认已经提供了一些常用的类型转换器，例如客户端提交的字符串转换成int类型进行参数设置。</p><p>但是不是所有的数据类型都提供了转换器，没有提供的就需要自定义转换器，例如：日期类型就需要自定义转换器。</p><p>自定义类型转换器的开发步骤：</p><h5 id="①-定义转换器类实现Converter接口"><a href="#①-定义转换器类实现Converter接口" class="headerlink" title="① 定义转换器类实现Converter接口"></a>① 定义转换器类实现Converter接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shubao.converter;<br><br><br><span class="hljs-keyword">import</span> org.springframework.core.convert.converter.Converter;<br><br><span class="hljs-keyword">import</span> java.text.ParseException;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DateConverter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Converter</span>&lt;String, Date&gt; &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Date <span class="hljs-title function_">convert</span><span class="hljs-params">(String source)</span> &#123;<br>        <span class="hljs-comment">//将日期字符串转换成日期对象，返回</span><br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">format</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>);<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            date = format.parse(source);<br>        &#125; <span class="hljs-keyword">catch</span> (ParseException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> date;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="②-在配置文件中申明转换器"><a href="#②-在配置文件中申明转换器" class="headerlink" title="② 在配置文件中申明转换器"></a>② 在配置文件中申明转换器</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  申明转换器  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;conversionService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.context.support.ConversionServiceFactoryBean&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;converters&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.shubao.converter.DateConverter&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="③-在-lt-mvc-annotation-driven-conversion-service-x3D-”conversionService”-x2F-gt-中引用转换器"><a href="#③-在-lt-mvc-annotation-driven-conversion-service-x3D-”conversionService”-x2F-gt-中引用转换器" class="headerlink" title="③ 在&lt;mvc:annotation-driven conversion-service&#x3D;”conversionService” &#x2F;&gt;中引用转换器"></a>③ 在&lt;mvc:annotation-driven conversion-service&#x3D;”conversionService” &#x2F;&gt;中引用转换器</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--1.mvc的注解驱动--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span> <span class="hljs-attr">conversion-service</span>=<span class="hljs-string">&quot;conversionService&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h4 id="10-获得Servlet相关API"><a href="#10-获得Servlet相关API" class="headerlink" title="(10) 获得Servlet相关API"></a>(10) 获得Servlet相关API</h4><p>SpringMVC支持使用原始Servlet API对象作为控制器方法的参数进行注入，常用的对象如下：</p><ul><li><p>HttpServletRequest</p></li><li><p>HttpServletResponse</p></li><li><p>HttpSession</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取Servlet相关API</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> request request对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> response response对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> session session对象</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/quick19&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quick19</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, HttpSession session)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;request = &quot;</span> + request);<br>    System.out.println(<span class="hljs-string">&quot;response = &quot;</span> + response);<br>    System.out.println(<span class="hljs-string">&quot;session = &quot;</span> + session);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="11-获得请求头"><a href="#11-获得请求头" class="headerlink" title="(11) 获得请求头"></a>(11) 获得请求头</h4><h5 id="①-RequestHeader"><a href="#①-RequestHeader" class="headerlink" title="① @RequestHeader"></a>① @RequestHeader</h5><p>使用@RequestHeader可以获取请求头信息，相当于web阶段的request.getHeader(name)</p><p>@RequestHeader注解的属性如下：</p><ul><li><p>value：请求头的名称</p></li><li><p>required：是否必须携带此请求头</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用注解<span class="hljs-doctag">@RequestHead</span>获取请求头</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> user_agent user_agent对象</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/quick20&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quick20</span><span class="hljs-params">(<span class="hljs-meta">@RequestHeader(value = &quot;User-Agent&quot;, required = false)</span> String user_agent)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;user_agent = &quot;</span> + user_agent);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="②-CookieValue"><a href="#②-CookieValue" class="headerlink" title="② @CookieValue"></a>② @CookieValue</h5><p>使用@CookieValue可以获得指定Cookie的值</p><p>@CookieValue注解的属性如下：  </p><ul><li><p>value：指定cookie的名称</p></li><li><p>required：是否必须携带此cookie</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用<span class="hljs-doctag">@CookieValue</span>获取cookie的value</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> jsessionId JSESSIONID对象</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/quick21&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quick21</span><span class="hljs-params">(<span class="hljs-meta">@CookieValue(value = &quot;JSESSIONID&quot;, required = false)</span> String jsessionId)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;jsessionId = &quot;</span> + jsessionId);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="12-文件上传"><a href="#12-文件上传" class="headerlink" title="(12) 文件上传"></a>(12) 文件上传</h4><h5 id="①-文件上传客户端三要素"><a href="#①-文件上传客户端三要素" class="headerlink" title="① 文件上传客户端三要素"></a>① 文件上传客户端三要素</h5><ul><li><p>表单项type &#x3D; “file”</p></li><li><p>表单的提交方式是post</p></li><li><p>表单的enctype属性是多部份表单形式，及enctype&#x3D;”multipart&#x2F;form-data”</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/user/quick22&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>    名称<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    文件<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="②-文件上传原理"><a href="#②-文件上传原理" class="headerlink" title="② 文件上传原理"></a>② 文件上传原理</h5><ul><li><p>当form表单修改为多部份表单时，request.getParameter()将失效。</p></li><li><p>enctype&#x3D;”application&#x2F;x-www-form-urlencoded”时，form表单的正文内容格式是：key&#x3D;value1&amp;key&#x3D;value2&amp;key&#x3D;value3</p></li><li><p>当form表单的enctype取值为multipart&#x2F;form-data时，请求正文内容就变成多部份形式：</p></li></ul><p><img src="/images/Snipaste_2022-02-26_18-22-40.png"></p><h4 id="13-单文件上传步骤"><a href="#13-单文件上传步骤" class="headerlink" title="(13) 单文件上传步骤"></a>(13) 单文件上传步骤</h4><h5 id="①-导入fileupload和io坐标"><a href="#①-导入fileupload和io坐标" class="headerlink" title="① 导入fileupload和io坐标"></a>① 导入fileupload和io坐标</h5><h5 id="②-配置文件上传解析器"><a href="#②-配置文件上传解析器" class="headerlink" title="② 配置文件上传解析器"></a>② 配置文件上传解析器</h5><h5 id="③-编写文件上传代码"><a href="#③-编写文件上传代码" class="headerlink" title="③ 编写文件上传代码"></a>③ 编写文件上传代码</h5><h4 id="14-单文件上传实现"><a href="#14-单文件上传实现" class="headerlink" title="(14) 单文件上传实现"></a>(14) 单文件上传实现</h4><p>① 导入fileupload和io坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--   文件上传坐标   --&gt;</span><br><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;commons-fileupload.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;commons-io.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>② 配置文件上传解析器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  配置文件上传解析器  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;multipartResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--    上传文件的编码类型    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!--    上传文件总大小    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxUploadSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;524800&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!--    上传单个文件的大小    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxUploadSizePerFile&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;5242800&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="③-编写文件上传代码-1"><a href="#③-编写文件上传代码-1" class="headerlink" title="③ 编写文件上传代码"></a>③ 编写文件上传代码</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: chris<br>  Date: 2022/1/23 0023<br>  Time: 19:22<br>  To change this template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/user/quick22&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>        名称<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>        文件<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 单文件上传</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> username 用户名</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> file 文件</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> Exception IO异常</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/quick22&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quick22</span><span class="hljs-params">(String username, MultipartFile file)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    System.out.println(<span class="hljs-string">&quot;username = &quot;</span> + username);<br>    <span class="hljs-comment">//获得上传文件的名称</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">originalFilename</span> <span class="hljs-operator">=</span> file.getOriginalFilename();<br>    System.out.println(<span class="hljs-string">&quot;originalFilename = &quot;</span> + originalFilename);<br>    file.transferTo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\logs\\&quot;</span> + originalFilename));<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="15-知识要点"><a href="#15-知识要点" class="headerlink" title="(15) 知识要点"></a>(15) 知识要点</h4><p><strong>MVC实现数据请求方式</strong></p><ul><li><p>基本类型参数</p></li><li><p>POJO类型参数</p></li><li><p>数组类型参数</p></li><li><p>集合类型参数</p></li></ul><p><strong>MVC获取数据细节</strong></p><ul><li><p>中文乱码问题</p></li><li><p>@RequestParam和@PathVariable</p></li><li><p>自定义类型转换器</p></li><li><p>获得Servlet相关API</p></li><li><p>@RequestHeader和@CookieValue</p></li><li><p>文件上传</p></li></ul><h2 id="十一、Spring-JdbcTemplate基本使用"><a href="#十一、Spring-JdbcTemplate基本使用" class="headerlink" title="十一、Spring JdbcTemplate基本使用"></a>十一、Spring JdbcTemplate基本使用</h2><h3 id="1-JdbcTemplate概述"><a href="#1-JdbcTemplate概述" class="headerlink" title="1. JdbcTemplate概述"></a>1. JdbcTemplate概述</h3><p>它是spring框架中提供的一个对象，是对原始繁琐的Jdbc API对象的简单封装，spring框架为我们提供了很多的操作模板类，例如：操作关系型数据库的JdbcTemplate，操作nosql数据库的RedisTemplate，操作消息队列的JmsTemplate等等。</p><h3 id="2-JdbcTemplate开发步骤"><a href="#2-JdbcTemplate开发步骤" class="headerlink" title="2. JdbcTemplate开发步骤"></a>2. JdbcTemplate开发步骤</h3><h4 id="①-导入spring-jdbc和spring-tx坐标"><a href="#①-导入spring-jdbc和spring-tx坐标" class="headerlink" title="① 导入spring-jdbc和spring-tx坐标"></a>① 导入spring-jdbc和spring-tx坐标</h4><h4 id="②-创建数据库表和实体"><a href="#②-创建数据库表和实体" class="headerlink" title="② 创建数据库表和实体"></a>② 创建数据库表和实体</h4><h4 id="③-创建JdbcTemplate对象"><a href="#③-创建JdbcTemplate对象" class="headerlink" title="③ 创建JdbcTemplate对象"></a>③ 创建JdbcTemplate对象</h4><h4 id="④-执行数据库操作"><a href="#④-执行数据库操作" class="headerlink" title="④ 执行数据库操作"></a>④ 执行数据库操作</h4><h3 id="3-Spring产生JdbcTemplate对象"><a href="#3-Spring产生JdbcTemplate对象" class="headerlink" title="3. Spring产生JdbcTemplate对象"></a>3. Spring产生JdbcTemplate对象</h3><p>我们可以将JdbcTemplate的创建权交给spring，将数据源DataSource的创建权也交给Spring，在Spring容器内部将数据源DataSource注入到JdbcTemplate模板对象中，配置如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># jdbc.properties</span><br><span class="hljs-attr">jdbc.driver</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-comment">#jdbc.url=jdbc:mysql://localhost:3306/wollo</span><br><span class="hljs-attr">jdbc.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/wollo?characterEncoding=utf8</span><br><span class="hljs-attr">jdbc.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">jdbc.password</span>=<span class="hljs-string">1106135</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  1.加载外部的properties文件  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:jdbc.properties&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  2.配置数据源bean  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClass&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbcUrl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  3.jdbc模板对象  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jdbcTemplate&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-JdbcTemplate的常用操作"><a href="#4-JdbcTemplate的常用操作" class="headerlink" title="4. JdbcTemplate的常用操作"></a>4. JdbcTemplate的常用操作</h3><p>修改操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shubao.test;<br><br><span class="hljs-keyword">import</span> com.shubao.domain.Account;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;<br><span class="hljs-keyword">import</span> org.springframework.test.context.ContextConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="hljs-meta">@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdbcTemplateCRUDTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JdbcTemplate jdbcTemplate;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUpdate</span><span class="hljs-params">()</span>&#123;<br>        jdbcTemplate.update(<span class="hljs-string">&quot;update account set money = ? where name = ?&quot;</span>, <span class="hljs-number">15000</span>, <span class="hljs-string">&quot;zhangsan&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDelete</span><span class="hljs-params">()</span>&#123;<br>        jdbcTemplate.update(<span class="hljs-string">&quot;delete from account where name = ?&quot;</span>, <span class="hljs-string">&quot;tom&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testQueryAll</span><span class="hljs-params">()</span>&#123;<br>        List&lt;Account&gt; list = jdbcTemplate.query(<span class="hljs-string">&quot;select * from account&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanPropertyRowMapper</span>&lt;Account&gt;(Account.class));<br>        System.out.println(<span class="hljs-string">&quot;list = &quot;</span> + list);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testQueryOne</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Account</span> <span class="hljs-variable">account</span> <span class="hljs-operator">=</span> jdbcTemplate.queryForObject(<span class="hljs-string">&quot;select * from account where name = ?&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanPropertyRowMapper</span>&lt;Account&gt;(Account.class), <span class="hljs-string">&quot;zhangsan&quot;</span>);<br><span class="hljs-comment">//        Account account = jdbcTemplate.queryForObject(&quot;select * from account where money = ?&quot;, new BeanPropertyRowMapper&lt;Account&gt;(Account.class), 8000);</span><br>        System.out.println(<span class="hljs-string">&quot;account = &quot;</span> + account);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testQueryCount</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> jdbcTemplate.queryForObject(<span class="hljs-string">&quot;select count(*) from account&quot;</span>, Long.class);<br>        System.out.println(<span class="hljs-string">&quot;count = &quot;</span> + count);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-知识要点-2"><a href="#5-知识要点-2" class="headerlink" title="5. 知识要点"></a>5. 知识要点</h3><h4 id="①-导入spring-jdbc和spring-tx坐标-1"><a href="#①-导入spring-jdbc和spring-tx坐标-1" class="headerlink" title="① 导入spring-jdbc和spring-tx坐标"></a>① 导入spring-jdbc和spring-tx坐标</h4><h4 id="②-创建数据库表和实体-1"><a href="#②-创建数据库表和实体-1" class="headerlink" title="② 创建数据库表和实体"></a>② 创建数据库表和实体</h4><h4 id="③-创建JdbcTemplate对象-1"><a href="#③-创建JdbcTemplate对象-1" class="headerlink" title="③ 创建JdbcTemplate对象"></a>③ 创建JdbcTemplate对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">JdbcTemplate</span> <span class="hljs-variable">jdbcTemplate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcTemplate</span>();<br><span class="hljs-comment">//设置数据源对象，知道数据库在哪</span><br>jdbcTemplate.setDataSource(dataSource);<br></code></pre></td></tr></table></figure><h4 id="④-执行数据库操作-1"><a href="#④-执行数据库操作-1" class="headerlink" title="④ 执行数据库操作"></a>④ 执行数据库操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//更新操作：</span><br>jdbcTemplate.update(sql, params)<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//查询操作：</span><br>jdbcTemplate.query(sql, Mapper, params)<br>jdbcTemplate.queryForObject(sql, Mapper, params)<br></code></pre></td></tr></table></figure><h2 id="十二、Spring练习环境搭建"><a href="#十二、Spring练习环境搭建" class="headerlink" title="十二、Spring练习环境搭建"></a>十二、Spring练习环境搭建</h2><h2 id="十二、SpringMVC拦截器"><a href="#十二、SpringMVC拦截器" class="headerlink" title="十二、SpringMVC拦截器"></a>十二、SpringMVC拦截器</h2><h3 id="1-拦截器-interceptor-的作用"><a href="#1-拦截器-interceptor-的作用" class="headerlink" title="1.拦截器(interceptor)的作用"></a>1.拦截器(interceptor)的作用</h3><p>        Spring MVC的拦截器类似于Servlet开发中的过滤器Filter，用于对处理器进行预处理和后处理</p><p>        将拦截器按一定的顺序联结成一条链，这条链称为拦截器链（Interceptor Chain）。在访问被拦截的方法或字段时，拦截器链中的拦截器就会按之前定义的顺序被调用。拦截器也是AOP思想的具体实现。</p><h3 id="2-拦截器和过滤器的区别"><a href="#2-拦截器和过滤器的区别" class="headerlink" title="2.拦截器和过滤器的区别"></a>2.拦截器和过滤器的区别</h3><table><thead><tr><th>区别</th><th>过滤器(Filter)</th><th>拦截器(Interceptor)</th></tr></thead><tbody><tr><td>使用范围</td><td>是Servlet规范中的一部分，任何Java Web工程都可以使用</td><td>是SpringMVC框架自己的，只有使用了SpringMVC框架的工程才可以用</td></tr><tr><td>拦截范围</td><td>在url-pattern中配置了&#x2F;*之后，可以对所有要访问的资源拦截</td><td>在&lt;mvc:mapping path&#x3D;”” &#x2F;&gt;中配置了&#x2F;**之后，也可以对所有资源进行拦截，但是可以通过&lt;mvc:exclude-mapping path&#x3D;”” &#x2F;&gt;标签排除不需要拦截的资源</td></tr></tbody></table><h3 id="3-拦截器快速入门"><a href="#3-拦截器快速入门" class="headerlink" title="3. 拦截器快速入门"></a>3. 拦截器快速入门</h3><p>自定义拦截器的三步：</p><h4 id="①-创建拦截器类实现HandlerInterceptor"><a href="#①-创建拦截器类实现HandlerInterceptor" class="headerlink" title="① 创建拦截器类实现HandlerInterceptor"></a>① 创建拦截器类实现HandlerInterceptor</h4><h4 id="②-配置拦截器"><a href="#②-配置拦截器" class="headerlink" title="② 配置拦截器"></a>② 配置拦截器</h4><h4 id="③-测试拦截器的拦截效果"><a href="#③-测试拦截器的拦截效果" class="headerlink" title="③ 测试拦截器的拦截效果"></a>③ 测试拦截器的拦截效果</h4><h3 id="4-拦截器方法说明"><a href="#4-拦截器方法说明" class="headerlink" title="4. 拦截器方法说明"></a>4. 拦截器方法说明</h3><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>preHandle()</td><td>方法将在请求处理之前进行调用，该方法的返回值是布尔值Boolean类型的，当它返回为false时，表示请求结束，后续的Interceptor和Controller都不会再执行；当返回值为true时，就会继续调用下一个Interceptor的preHandle方法。（返回true表示放行，返回false表示不放行）</td></tr><tr><td>postHandle()</td><td>该方法是当前请求进行处理之后被调用，前提是preHandle方法的返回值为true时才能被调用，且它会在DispatcherServlet进行视图返回渲染之前被调用，所以我们可以在这个方法中对Controller处理之后的ModelAndView对象进行操作。</td></tr><tr><td>afterCompletion()</td><td>该方法将在整个请求结束之后，也就是在DispatcherServlet渲染了对应的视图之后执行，前提是preHandle方法的返回值为true时才能被调用。</td></tr></tbody></table><h3 id="5-知识要点-3"><a href="#5-知识要点-3" class="headerlink" title="5. 知识要点"></a>5. 知识要点</h3><p>自定义拦截器的步骤：</p><h4 id="①-创建拦截器类实现HandlerInterceptor接口"><a href="#①-创建拦截器类实现HandlerInterceptor接口" class="headerlink" title="① 创建拦截器类实现HandlerInterceptor接口"></a>① 创建拦截器类实现HandlerInterceptor接口</h4><h4 id="②-配置拦截器-1"><a href="#②-配置拦截器-1" class="headerlink" title="② 配置拦截器"></a>② 配置拦截器</h4><h4 id="③-测试拦截器的拦截效果-1"><a href="#③-测试拦截器的拦截效果-1" class="headerlink" title="③ 测试拦截器的拦截效果"></a>③ 测试拦截器的拦截效果</h4><h3 id="6-案例：用户登录权限控制"><a href="#6-案例：用户登录权限控制" class="headerlink" title="6. 案例：用户登录权限控制"></a>6. 案例：用户登录权限控制</h3><p>需求：用户在没有登录的情况下，不能对后台菜单进行访问，点击菜单跳转到登录页面，只有用户登录成功后才能进行后台功能的操作。</p><p><img src="/images/Snipaste_2022-02-26_14-59-00.png" alt="用户登录权限控制流程图"></p><h2 id="十三、Spring-MVC异常处理"><a href="#十三、Spring-MVC异常处理" class="headerlink" title="十三、Spring MVC异常处理"></a>十三、Spring MVC异常处理</h2><h3 id="1-异常处理的思路"><a href="#1-异常处理的思路" class="headerlink" title="1.异常处理的思路"></a>1.异常处理的思路</h3><p>系统中异常包括两类：预期异常和运行时异常RuntimeException，前者通过捕获异常从而获取异常信息，后者主要通过规范代码开发，测试等手段减少运行时异常的发生。</p><p>系统的Dao、Service、Controller出现都通过throws Exception向上抛出，最后由SpringMVC前端控制器交由异常处理器进行异常处理，如下图：</p><p><img src="/images/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B.png" alt="异常处理流程"></p><h3 id="2-异常处理两种方式"><a href="#2-异常处理两种方式" class="headerlink" title="2. 异常处理两种方式"></a>2. 异常处理两种方式</h3><ul><li><p>使用SpringMVC提供的简单异常处理器SimpleMappingExceptionResolver</p></li><li><p>实现Spring的异常处理接口HandlerExceptionResolver自定义自己的异常处理器</p></li></ul><h3 id="3-简单异常处理器SimpleMappingExceptionResolver"><a href="#3-简单异常处理器SimpleMappingExceptionResolver" class="headerlink" title="3. 简单异常处理器SimpleMappingExceptionResolver"></a>3. 简单异常处理器SimpleMappingExceptionResolver</h3><p>SpringMVC已经定义好了该类型转换器，在使用时可以根据项目情况进行相应异常与视图的映射配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  配置异常处理器  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultErrorView&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;error&quot;</span> /&gt;</span><span class="hljs-comment">&lt;!--  默认错误视图  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;exceptionMappings&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;java.lang.ClassCastException&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;error1&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;com.shubao.exception.MyException&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;error2&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-自定义异常处理步骤"><a href="#4-自定义异常处理步骤" class="headerlink" title="4. 自定义异常处理步骤"></a>4. 自定义异常处理步骤</h3><h4 id="①创建异常处理类实现HandleExceptionResolver"><a href="#①创建异常处理类实现HandleExceptionResolver" class="headerlink" title="①创建异常处理类实现HandleExceptionResolver"></a>①创建异常处理类实现HandleExceptionResolver</h4><h4 id="②配置异常处理器"><a href="#②配置异常处理器" class="headerlink" title="②配置异常处理器"></a>②配置异常处理器</h4><h4 id="③编写异常页面"><a href="#③编写异常页面" class="headerlink" title="③编写异常页面"></a>③编写异常页面</h4><h4 id="④测试异常跳转"><a href="#④测试异常跳转" class="headerlink" title="④测试异常跳转"></a>④测试异常跳转</h4><h3 id="5-知识要点-4"><a href="#5-知识要点-4" class="headerlink" title="5. 知识要点"></a>5. 知识要点</h3><h4 id="1-异常处理方式"><a href="#1-异常处理方式" class="headerlink" title="(1) 异常处理方式"></a>(1) 异常处理方式</h4><ul><li><p>配置简单异常处理器SimpleMappingExceptionResolver</p></li><li><p>自定义异常处理器</p></li></ul><h4 id="2-自定义异常处理步骤"><a href="#2-自定义异常处理步骤" class="headerlink" title="(2) 自定义异常处理步骤"></a>(2) 自定义异常处理步骤</h4><h5 id="①-创建异常处理类实现HandleExceptionResolver"><a href="#①-创建异常处理类实现HandleExceptionResolver" class="headerlink" title="① 创建异常处理类实现HandleExceptionResolver"></a>① 创建异常处理类实现HandleExceptionResolver</h5><h5 id="②-配置异常处理器"><a href="#②-配置异常处理器" class="headerlink" title="② 配置异常处理器"></a>② 配置异常处理器</h5><h5 id="③-编写异常页面"><a href="#③-编写异常页面" class="headerlink" title="③ 编写异常页面"></a>③ 编写异常页面</h5><h5 id="④-测试异常跳转"><a href="#④-测试异常跳转" class="headerlink" title="④ 测试异常跳转"></a>④ 测试异常跳转</h5><h2 id="十四、Spring-AOP"><a href="#十四、Spring-AOP" class="headerlink" title="十四、Spring AOP"></a>十四、Spring AOP</h2><h3 id="1-Spring的AOP简介"><a href="#1-Spring的AOP简介" class="headerlink" title="1. Spring的AOP简介"></a>1. Spring的AOP简介</h3><h4 id="1-什么是AOP"><a href="#1-什么是AOP" class="headerlink" title="(1) 什么是AOP"></a>(1) 什么是AOP</h4><p>AOP(Aspect Oriented Programming)，意思为面向切面编程，是通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。</p><p>AOP是OOP（面向对象编程）的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><h4 id="2-AOP的作用及其优势"><a href="#2-AOP的作用及其优势" class="headerlink" title="(2) AOP的作用及其优势"></a>(2) AOP的作用及其优势</h4><ul><li><p>作用：在程序运行期间在不修改源码的情况下对方法进行功能增强</p></li><li><p>优势：减少重复代码，提高开发效率，并且便于维护</p></li></ul><p><img src="/images/image-202200405224409481.png" alt="AOP装配原理"></p><h4 id="3-AOP的底层实现"><a href="#3-AOP的底层实现" class="headerlink" title="(3) AOP的底层实现"></a>(3) AOP的底层实现</h4><p>实际上，AOP的底层是通过Spring提供的动态代理技术实现的。在运行期间，Spring通过动态代理技术动态的生成代理对象，代理对象方法执行时进行增强功能的介入，在去调佣目标对象的方法，从而完成功能的增强。</p><h4 id="4-AOP的动态代理技术"><a href="#4-AOP的动态代理技术" class="headerlink" title="(4) AOP的动态代理技术"></a>(4) AOP的动态代理技术</h4><p>常用的动态代理技术：</p><ul><li><p>JDK代理：基于接口的动态代理技术</p></li><li><p>cglib代理：基于父类的动态代理技术</p></li></ul><p><img src="/images/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF.png" alt="常用的动态代理技术"></p><h4 id="5-AOP的相关概念"><a href="#5-AOP的相关概念" class="headerlink" title="(5) AOP的相关概念"></a>(5) AOP的相关概念</h4><p>Spring的AOP实现底层就是对上述的动态代理的代码进行了封装，封装后我们只需要对需要关注的部分进行代码编写，并通过配置的方式完成指定目标的方法增强。</p><p>AOP的常用术语：</p><ul><li><p>Target（目标对象）：代理的目标对象</p></li><li><p>Proxy（代理）：一个类被AOP织入增强后，就产生一个结果代理类</p></li><li><p>Joinpoint（连接点）：是指那些被拦截到的点。在Spring中，这些点指的是方法，因为Spring只支持方法类型的连接点。</p></li><li><p>Pointcut（切入点）：是指我们要对哪些Joinpoint进行拦截的定义</p></li><li><p>Advice（通知&#x2F;增强）：拦截到Joinpoint之后所要做的事情就是通知</p></li><li><p>Aspect（切面）：是切入点和通知（引介）的结合</p></li><li><p>Weaving（织入）：是指把增强应用到目标对象来创建新的代码的代理对象的过程。Spring采用动态代理织入，而Aspect采用编译期织入和类装载期织入</p></li></ul><h4 id="6-AOP开发明确的事项"><a href="#6-AOP开发明确的事项" class="headerlink" title="(6) AOP开发明确的事项"></a>(6) AOP开发明确的事项</h4><h5 id="①-需要编写的内容"><a href="#①-需要编写的内容" class="headerlink" title="① 需要编写的内容"></a>① 需要编写的内容</h5><ul><li><p>编写核心业务代码（目标类的目标方法）</p></li><li><p>编写切面类，切面类中有通知（增强功能方法）</p></li><li><p>在配置文件中，配置织入关系，即将哪些通知与哪些连接点进行结合</p></li></ul><h5 id="②-AOP技术实现的内容"><a href="#②-AOP技术实现的内容" class="headerlink" title="② AOP技术实现的内容"></a>② AOP技术实现的内容</h5><p>Spring框架监控切入点方法的执行，一旦检测到切入点方法被运行，使用代理机制，动态创建目标对象的代理对象，根据通知类别，在代理对象的对应位置，将通知对应的功能织入，完成完整的代码逻辑运行。</p><h5 id="③-AOP底层使用了哪代理方式"><a href="#③-AOP底层使用了哪代理方式" class="headerlink" title="③ AOP底层使用了哪代理方式"></a>③ AOP底层使用了哪代理方式</h5><p>在Spring中，框架会根据目标类是否实现了接口来决定采用哪种动态代理的方式</p><h4 id="7-知识要点"><a href="#7-知识要点" class="headerlink" title="(7) 知识要点"></a>(7) 知识要点</h4><ul><li><p>AOP：面向切面编程</p></li><li><p>AOP底层实现：基于JDK的动态代理和基于cglib的动态代理</p></li><li><p>AOP的重点概念</p></li><li><p>开发明确事项：</p><p>谁是切点（切点表达式配置）</p><p>谁是通知（切面类中的增强方法）</p><p>将切点和通知进行织入配置</p></li></ul><h3 id="2-基于XML的AOP开发"><a href="#2-基于XML的AOP开发" class="headerlink" title="2. 基于XML的AOP开发"></a>2. 基于XML的AOP开发</h3><h4 id="1-快速入门"><a href="#1-快速入门" class="headerlink" title="1) 快速入门"></a>1) 快速入门</h4><h5 id="①-导入AOP相关坐标"><a href="#①-导入AOP相关坐标" class="headerlink" title="① 导入AOP相关坐标"></a>① 导入AOP相关坐标</h5><h5 id="②-创建目标接口和目标类（内部有切点）"><a href="#②-创建目标接口和目标类（内部有切点）" class="headerlink" title="② 创建目标接口和目标类（内部有切点）"></a>② 创建目标接口和目标类（内部有切点）</h5><h5 id="③-创建切面类（内部有增强方法）"><a href="#③-创建切面类（内部有增强方法）" class="headerlink" title="③ 创建切面类（内部有增强方法）"></a>③ 创建切面类（内部有增强方法）</h5><h5 id="④-将目标类和切面类的对象创建权交给Spring"><a href="#④-将目标类和切面类的对象创建权交给Spring" class="headerlink" title="④ 将目标类和切面类的对象创建权交给Spring"></a>④ 将目标类和切面类的对象创建权交给Spring</h5><h5 id="⑤-在applicationContext-xml中配置织入关系"><a href="#⑤-在applicationContext-xml中配置织入关系" class="headerlink" title="⑤ 在applicationContext.xml中配置织入关系"></a>⑤ 在applicationContext.xml中配置织入关系</h5><h5 id="⑥-测试代码"><a href="#⑥-测试代码" class="headerlink" title="⑥ 测试代码"></a>⑥ 测试代码</h5><h4 id="2-XML配置AOP详解"><a href="#2-XML配置AOP详解" class="headerlink" title="2) XML配置AOP详解"></a>2) XML配置AOP详解</h4><h5 id="1-切点表达式的写法"><a href="#1-切点表达式的写法" class="headerlink" title="(1) 切点表达式的写法"></a>(1) 切点表达式的写法</h5><p>表达式语法</p><blockquote><p>execution([修饰符] 返回值类型 包名.类名.方法名(参数))</p></blockquote><ul><li><p>访问修饰符可以省略</p></li><li><p>返回值类型、包名、类名、方法名可以使用星号*代表任意</p></li><li><p>包名与类名之间一个点.代表当前包下的类，两个点.表示当前包及其子包下的类</p></li><li><p>参数列表可以使用两个点..表示任意个数，任意类型的参数列表</p></li></ul><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">execution(<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> com.shubao.aop.Target.save())<br>execution(<span class="hljs-keyword">void</span> com.shubao.aop.Target.*(..))<br>execution(* com.shubao.aop.*.*(..))<br>execution(* com.shubao.aop..*.*(..))<br>execution(* *..*.*(..))<br></code></pre></td></tr></table></figure><h5 id="②-通知的类型"><a href="#②-通知的类型" class="headerlink" title="② 通知的类型"></a>② 通知的类型</h5><p>通知的配置语法：</p><p>&lt;aop:通知类型 method&#x3D;”切面类中的方法名” pointcut&#x3D;”切点表达式”&gt;&lt;&#x2F;aop:通知类型&gt;</p><table><thead><tr><th>名称</th><th>标签</th><th>说明</th></tr></thead><tbody><tr><td>前置通知</td><td>&lt;aop:before&gt;</td><td>用于配置前置通知，指定增强的方法在切入点方法之前执行</td></tr><tr><td>后置通知</td><td>&lt;aop:after-returning&gt;</td><td>用于配置后置通知，指定增强的方法在切入点方法之后执行</td></tr><tr><td>环绕通知</td><td>&lt;aop:around&gt;</td><td>用于配置环绕通知，指定增强的方法在切入点方法之前和之后都执行</td></tr><tr><td>异常抛出通知</td><td>&lt;aop:throwing&gt;</td><td>用于配置异常抛出通知，指定增强的方法在出现异常时执行</td></tr><tr><td>最终通知</td><td>&lt;aop:after&gt;</td><td>用于配置最终通知，无论增强方式执行是否有异常都会执行</td></tr></tbody></table><h5 id="③-切点表达式的抽取"><a href="#③-切点表达式的抽取" class="headerlink" title="③ 切点表达式的抽取"></a>③ 切点表达式的抽取</h5><p>有多个增强的切点表达式相同时，可以将切点表达式进行抽取，在增强中使用pointcut-ref属性代替pointcut属性来引用抽取后的切点表达式。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  配置织入：告诉Spring框架，哪些方法(切点)需要进行哪些增强(前置、后置。。。)  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--    申明切面    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;myAspect&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 切面：切点+通知 --&gt;</span><br>        <span class="hljs-comment">&lt;!--抽取切点表达式--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myPointcut&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.shubao.aop.*.*(..))&quot;</span> /&gt;</span><br><br>        <span class="hljs-comment">&lt;!--前置增强--&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;aop:before method=&quot;before&quot; pointcut=&quot;execution(public void com.shubao.aop.Target.save())&quot; /&gt;--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;before&quot;</span> <span class="hljs-attr">pointcut</span>=<span class="hljs-string">&quot;execution(* com.shubao.aop.*.*(..))&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!--后置增强--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:after-returning</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;afterReturning&quot;</span> <span class="hljs-attr">pointcut</span>=<span class="hljs-string">&quot;execution(* com.shubao.aop.*.*(..))&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!--环绕增强--&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;aop:around method=&quot;around&quot; pointcut=&quot;execution(* com.shubao.aop.*.*(..))&quot; /&gt;--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:around</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;around&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;myPointcut&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!--异常抛出增强--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:after-throwing</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;afterThrowing&quot;</span> <span class="hljs-attr">pointcut</span>=<span class="hljs-string">&quot;execution(* com.shubao.aop.*.*(..))&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!--最终增强--&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;aop:after method=&quot;after&quot; pointcut=&quot;execution(* com.shubao.aop.*.*(..))&quot; /&gt;--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:after</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;after&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;myPointcut&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="④-知识要点"><a href="#④-知识要点" class="headerlink" title="④ 知识要点"></a>④ 知识要点</h5><ul><li>AOP织入的配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--    申明切面    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;切面类&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;通知方法名称&quot;</span> <span class="hljs-attr">pointcut</span>=<span class="hljs-string">&quot;切点表达式&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>通知的类型：前置通知、后置通知、环绕通知、异常抛出通知和最终通知</p></li><li><p>切点表达式的写法：</p></li></ul><blockquote><p>execution([修饰符] 返回值类型 包名.类名.方法名(参数))</p></blockquote><h4 id="3-基于注解的AOP开发"><a href="#3-基于注解的AOP开发" class="headerlink" title="3) 基于注解的AOP开发"></a>3) 基于注解的AOP开发</h4><h5 id="1-快速入门-1"><a href="#1-快速入门-1" class="headerlink" title="(1) 快速入门"></a>(1) 快速入门</h5><p>基于注解的AOP开发步骤：</p><h6 id="a-创建目标接口和目标类（内部有切点）"><a href="#a-创建目标接口和目标类（内部有切点）" class="headerlink" title="a. 创建目标接口和目标类（内部有切点）"></a>a. 创建目标接口和目标类（内部有切点）</h6><h6 id="b-创建切面类（内部有增强方法）"><a href="#b-创建切面类（内部有增强方法）" class="headerlink" title="b. 创建切面类（内部有增强方法）"></a>b. 创建切面类（内部有增强方法）</h6><h6 id="c-将目标类和切面类的对象创建权交给Spring"><a href="#c-将目标类和切面类的对象创建权交给Spring" class="headerlink" title="c. 将目标类和切面类的对象创建权交给Spring"></a>c. 将目标类和切面类的对象创建权交给Spring</h6><h6 id="d-在切面类中使用注解配置织入关系"><a href="#d-在切面类中使用注解配置织入关系" class="headerlink" title="d. 在切面类中使用注解配置织入关系"></a>d. 在切面类中使用注解配置织入关系</h6><h6 id="e-在配置文件中开启组件扫描和AOP的自动代理"><a href="#e-在配置文件中开启组件扫描和AOP的自动代理" class="headerlink" title="e. 在配置文件中开启组件扫描和AOP的自动代理"></a>e. 在配置文件中开启组件扫描和AOP的自动代理</h6><h6 id="f-测试"><a href="#f-测试" class="headerlink" title="f. 测试"></a>f. 测试</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  配置组件扫描  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.shubao.anno&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!--aop自动代理--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span> /&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shubao.anno;<br><br><span class="hljs-keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.*;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 输出顺序：</span><br><span class="hljs-comment">     前置增强。。。。</span><br><span class="hljs-comment">     环绕前增强。。。。</span><br><span class="hljs-comment">     save() running...</span><br><span class="hljs-comment">     最终增强</span><br><span class="hljs-comment">     环绕后增强。。。。</span><br><span class="hljs-comment">     后置增强。。。。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component(&quot;myAspect&quot;)</span><br><span class="hljs-meta">@Aspect</span> <span class="hljs-comment">//表示当前MyAspect是一个切面类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAspect</span> &#123;<br><br>    <span class="hljs-comment">//定义切点表达式方法</span><br>    <span class="hljs-meta">@Pointcut(&quot;execution(* com.shubao.anno.*.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">myPointcut</span><span class="hljs-params">()</span>&#123;&#125;<br><br>    <span class="hljs-comment">//配置前置通知</span><br>    <span class="hljs-meta">@Before(&quot;execution(* com.shubao.anno.*.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;前置增强。。。。&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterReturning</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;后置增强。。。。&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//Proceeding JoinPoint 正在执行的连接点</span><br><span class="hljs-comment">//    @Around(&quot;execution(* com.shubao.anno.*.*(..))&quot;)</span><br>    <span class="hljs-meta">@Around(&quot;myPointcut()&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        System.out.println(<span class="hljs-string">&quot;环绕前增强。。。。&quot;</span>);<br>        <span class="hljs-comment">//切点方法</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">proceed</span> <span class="hljs-operator">=</span> proceedingJoinPoint.proceed();<br>        System.out.println(<span class="hljs-string">&quot;环绕后增强。。。。&quot;</span>);<br>        <span class="hljs-keyword">return</span> proceed;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterThrowing</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;异常抛出增强。。。。&quot;</span>);<br>    &#125;<br><br><span class="hljs-comment">//    @After(&quot;execution(* com.shubao.anno.*.*(..))&quot;)</span><br>    <span class="hljs-meta">@After(&quot;MyAspect.myPointcut()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;最终增强&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-注解配置AOP开发"><a href="#2-注解配置AOP开发" class="headerlink" title="(2) 注解配置AOP开发"></a>(2) 注解配置AOP开发</h5><h6 id="①-注解通知的类型"><a href="#①-注解通知的类型" class="headerlink" title="① 注解通知的类型"></a>① 注解通知的类型</h6><p>通知的配置语法：@通知注解(“切点表达式”)</p><table><thead><tr><th>名称</th><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>前置通知</td><td>@Before</td><td>用于配置前置通知，指定增强的方法在切入点方法之前执行</td></tr><tr><td>后置通知</td><td>@AfterReturning</td><td>用于配置后置通知，指定增强的方法在切入点方法之后执行</td></tr><tr><td>环绕通知</td><td>@Around</td><td>用于配置环绕通知，指定增强的方法在切入点之前和之后都执行</td></tr><tr><td>异常抛出通知</td><td>@AfterThrowing</td><td>用于配置异常抛出通知，指定增强的方法在出现异常时执行</td></tr><tr><td>最终通知</td><td>@After</td><td>用于配置最终通知，无论增强方法执行是否有异常都会执行</td></tr></tbody></table><h6 id="②-切点表达式的抽取"><a href="#②-切点表达式的抽取" class="headerlink" title="② 切点表达式的抽取"></a>② 切点表达式的抽取</h6><p>同XML配置AOP一样，我们可以将切点表达式抽取。抽取的方式是在切面内定义一个方法，在该方法上使用@Pointcut注解定义切点表达式，然后在增强注解中进行引用。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shubao.anno;<br><br><span class="hljs-keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.*;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component(&quot;myAspect&quot;)</span><br><span class="hljs-meta">@Aspect</span> <span class="hljs-comment">//表示当前MyAspect是一个切面类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAspect</span> &#123;<br><br>    <span class="hljs-comment">//定义切点表达式方法</span><br>    <span class="hljs-meta">@Pointcut(&quot;execution(* com.shubao.anno.*.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">myPointcut</span><span class="hljs-params">()</span>&#123;&#125;<br><br>    <span class="hljs-comment">//Proceeding JoinPoint 正在执行的连接点</span><br><span class="hljs-comment">//    @Around(&quot;execution(* com.shubao.anno.*.*(..))&quot;)</span><br>    <span class="hljs-meta">@Around(&quot;myPointcut()&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        System.out.println(<span class="hljs-string">&quot;环绕前增强。。。。&quot;</span>);<br>        <span class="hljs-comment">//切点方法</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">proceed</span> <span class="hljs-operator">=</span> proceedingJoinPoint.proceed();<br>        System.out.println(<span class="hljs-string">&quot;环绕后增强。。。。&quot;</span>);<br>        <span class="hljs-keyword">return</span> proceed;<br>    &#125;<br><br><span class="hljs-comment">//    @After(&quot;execution(* com.shubao.anno.*.*(..))&quot;)</span><br>    <span class="hljs-meta">@After(&quot;MyAspect.myPointcut()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;最终增强&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="③-知识要点"><a href="#③-知识要点" class="headerlink" title="③ 知识要点"></a>③ 知识要点</h6><ul><li><p>注解AOP开发步骤</p><p>  a. 使用@Aspect注解标注切面类</p><p>  b. 使用@通知标注(@Before)</p><p>  c. 在配置文件中配置AOP自动代理&lt;aop:aspectj-autoproxy &#x2F;&gt;</p></li><li><p>通知注解类型</p></li></ul><table><thead><tr><th>名称</th><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>前置通知</td><td>@Before</td><td>用于配置前置通知，指定增强的方法在切入点方法之前执行</td></tr><tr><td>后置通知</td><td>@AfterReturning</td><td>用于配置后置通知，指定增强的方法在切入点方法之后执行</td></tr><tr><td>环绕通知</td><td>@Around</td><td>用于配置环绕通知，指定增强的方法在切入点之前和之后都执行</td></tr><tr><td>异常抛出通知</td><td>@AfterThrowing</td><td>用于配置异常抛出通知，指定增强的方法在出现异常时执行</td></tr><tr><td>最终通知</td><td>@After</td><td>用于配置最终通知，无论增强方法执行是否有异常都会执行</td></tr></tbody></table><p><img src="/images/2022-03-02-20-03-09-image.png"></p><h2 id="十五、Spring事务管理"><a href="#十五、Spring事务管理" class="headerlink" title="十五、Spring事务管理"></a>十五、Spring事务管理</h2><blockquote><p><a href="https://www.jpxzm.com/2020/08/06/%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E5%92%8CSpirng%E4%BA%8B%E5%8A%A1%E4%BC%A0%E6%92%AD%E7%BA%A7%E5%88%AB/">事务隔离级别和Spirng事务传播级别 - 极品小芝麻</a></p></blockquote><h3 id="1-编程式事务控制相关对象"><a href="#1-编程式事务控制相关对象" class="headerlink" title="1. 编程式事务控制相关对象"></a>1. 编程式事务控制相关对象</h3><h4 id="1-PlatformTransactionManager"><a href="#1-PlatformTransactionManager" class="headerlink" title="1) PlatformTransactionManager"></a>1) PlatformTransactionManager</h4><p>PlatformTransactionManager接口是Spring的事务管理器，它里面提供了我们常用的操作事务的方法。</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>TransactionStatus getTransaction(@Nullable TransactionDefinition definition) throws TransactionException;</td><td>获取事务的状态信息</td></tr><tr><td>void commit(TransactionStatus status) throws TransactionException;</td><td>提交事务</td></tr><tr><td>void rollback(TransactionStatus status) throws TransactionException;</td><td>回滚事务</td></tr></tbody></table><p>注意：</p><p>PlatformTransactionManager是接口类型，不同的Dao层技术有不同的实现类，</p><p>例如：Dao层的技术是jdbc或mybatis时，org.springframework.jdbc.datasource.DataSourceTransactionManager;</p><p>Dao层技术是hibernate时，org.springframework.orm.hibernate5.HibernateTransactionManager.</p><h4 id="2-TransactionDefinition"><a href="#2-TransactionDefinition" class="headerlink" title="2) TransactionDefinition"></a>2) TransactionDefinition</h4><p>TransactionDefinition是事务的定义信息对象，里面有如下方法：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>int getIsolationLevel();</td><td>获得事务的隔离级别</td></tr><tr><td>int getPropagationBehavior();</td><td>获得事务的传播行为</td></tr><tr><td>int getTimeout();</td><td>获得超时时间</td></tr><tr><td>boolean isReadOnly();</td><td>是否只读</td></tr></tbody></table><h5 id="①-事务隔离级别"><a href="#①-事务隔离级别" class="headerlink" title="① 事务隔离级别"></a>① 事务隔离级别</h5><p>设置隔离级别，可以解决事务并发产生的问题，如脏读、不可重复读和虚读。</p><ul><li><p>ISOLATION_DEFAULT</p></li><li><p>ISOLATION_READ_UNCOMMITTED</p></li><li><p>ISOLATION_READ_COMMITTED</p></li><li><p>ISOLATION_REPEATABLE_READ</p></li><li><p>ISOLATION_SERIALIZABLE</p></li></ul><h5 id="②-事务传播行为"><a href="#②-事务传播行为" class="headerlink" title="② 事务传播行为"></a>② 事务传播行为</h5><p>例如：a业务调用b业务（理解）</p><ul><li>REQUIRED：(required)如果当前没有事务，就新建一个事务，如果已经存在一个事务，就加入到这个事务中，一般的选择（默认值）</li><li>SUPPORTS：(supports)支持当前事务，如果当前没有事务，就以非事务方式执行（没有事务）</li><li>MANDATORY：(mandatory)使用当前的事务，如果当前没有事务，就抛出异常</li><li>REQUERS_NEW：(requers_new)新建事务，如果当前在事务中，把当前事务挂起</li><li>NOT_SUPPORTED：(not_supported)以非事务方式执行操作，如果当前存在事务，就把当前事务挂起</li><li>NEVER：(never)以非事务方式运行，如果当前存在事务，抛出异常</li><li>NESTED：(nested：嵌套)如果当前存在事务，则在嵌套事务内执行，如果当前没有事务，则执行REQUIRED类似的操作</li><li>超时时间：默认值是-1，没有超时限制。如果有，以秒为单位进行设置</li><li>是否只读：建议查询时设置为只读</li></ul><p><img src="/images/%E4%BA%8B%E5%8A%A1%E4%BC%A0%E6%92%AD%E7%BA%A7%E5%88%AB.png" alt="事务传播级别"></p><h4 id="3-TransactionStatus"><a href="#3-TransactionStatus" class="headerlink" title="3) TransactionStatus"></a>3) TransactionStatus</h4><p>TransactionStatus接口提供的是事务具体的运行状态，方法介绍如下。</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>boolean hasSavepoint();</td><td>是否存储回滚点</td></tr><tr><td>boolean isCompleted();</td><td>事务是否完成</td></tr><tr><td>boolean isNewTransaction();</td><td>是否是新事务</td></tr><tr><td>boolean isRollbackOnly();</td><td>事务是否回滚</td></tr></tbody></table><h4 id="4-知识要点-2"><a href="#4-知识要点-2" class="headerlink" title="4) 知识要点"></a>4) 知识要点</h4><p>编程式事务控制三大对象</p><ul><li><p>PlatformTransactionManager</p></li><li><p>TransactionDefinition</p></li><li><p>TransactionStatus</p></li></ul><h3 id="2-基于XML的声明式事务控制"><a href="#2-基于XML的声明式事务控制" class="headerlink" title="2. 基于XML的声明式事务控制"></a>2. 基于XML的声明式事务控制</h3><h4 id="1-什么是声明式事务控制"><a href="#1-什么是声明式事务控制" class="headerlink" title="1)  什么是声明式事务控制"></a>1)  什么是声明式事务控制</h4><p>Spring的声明式事务顾名思义就是采用声明的方式来处理事务。这里所说的声明，就是指在配置文件中声明，用在Spring配置文件中声明式的处理事务来代替代码式的处理事务。</p><p>声明式事务处理的作用</p><ul><li><p>事务管理不侵入开发的组件。具体来说，业务逻辑对象就不会意识到正在事务管理之中，事实上也应该如此，因为事务管理是属于系统层面的服务，而不是业务逻辑的一部分，如果想要改变事务管理策划的话，也只需要在定义文件中重新配置即可。</p></li><li><p>在不需要事务管理的时候，只要在设定文件上修改一下，即可移去事务管理事务，无需改变代码重新编译，这样维护起来极其方便。</p></li></ul><p>注意：Spring声明式事务控制底层就是AOP。</p><h4 id="2-声明式事务控制的实现"><a href="#2-声明式事务控制的实现" class="headerlink" title="2) 声明式事务控制的实现"></a>2) 声明式事务控制的实现</h4><p>声明式事务控制明确事项：</p><ul><li><p>谁是切点？</p></li><li><p>谁是通知？</p></li><li><p>配置切面</p></li></ul><h4 id="3-切点方法的事务参数的配置"><a href="#3-切点方法的事务参数的配置" class="headerlink" title="3) 切点方法的事务参数的配置"></a>3) 切点方法的事务参数的配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  2.配置数据源bean  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClass&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbcUrl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  通知 事务的增强  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txAdvice&quot;</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;transfer&quot;</span> <span class="hljs-attr">isolation</span>=<span class="hljs-string">&quot;REPEATABLE_READ&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;false&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;save&quot;</span> <span class="hljs-attr">isolation</span>=<span class="hljs-string">&quot;REPEATABLE_READ&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;false&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;find&quot;</span> <span class="hljs-attr">isolation</span>=<span class="hljs-string">&quot;REPEATABLE_READ&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;tx:method name=&quot;*&quot; /&gt;--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  配置事务的aop的织入  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txPointcut&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.shubao.service.impl.*.*(..))&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;txAdvice&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;txPointcut&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其中，&lt;tx:method name&#x3D;”*” &#x2F;&gt;代表切点方法的事务参数的配置，例如：</p><p>&lt;tx:method name&#x3D;”transfer” isolation&#x3D;”REPEATABLE_READ” propagation&#x3D;”REQUIRED” read-only&#x3D;”false” &#x2F;&gt;</p><ul><li><p>name：切点方法名称</p></li><li><p>isolation：事务的隔离级别</p></li><li><p>propagation：事务的传播行为</p></li><li><p>timeout：超时时间</p></li><li><p>read-only：是否只读</p></li></ul><h4 id="4-知识要点-3"><a href="#4-知识要点-3" class="headerlink" title="4) 知识要点"></a>4) 知识要点</h4><p>声明式事务控制的配置要点</p><ul><li><p>平台事务管理器配置</p></li><li><p>事务通知的配置</p></li><li><p>事务AOP织入的配置</p></li></ul><h3 id="3-基于注解的声明式事务控制"><a href="#3-基于注解的声明式事务控制" class="headerlink" title="3. 基于注解的声明式事务控制"></a>3. 基于注解的声明式事务控制</h3><h4 id="1-注解配置声明式事务控制解析"><a href="#1-注解配置声明式事务控制解析" class="headerlink" title="1) 注解配置声明式事务控制解析"></a>1) 注解配置声明式事务控制解析</h4><p>① 使用@Transactional在需要进行事务控制的类或是方法上修饰，注解可用的属性同XML配置方式，例如：隔离级别(isolation)、传播行为(propagation)</p><p>② 注解使用在类上，那么该类下的所有方法都使用同一套注解参数配置</p><p>③ 使用在方法上，不同的方法可以采用不同的事务参数配置</p><p>④ XML配置文件中要开启事务的注解驱动</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  事务的注解驱动  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:annotation-driven</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shubao.service.impl;<br><br><span class="hljs-keyword">import</span> com.shubao.dao.AccountDao;<br><span class="hljs-keyword">import</span> com.shubao.service.AccountService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.Isolation;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.Propagation;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.Transactional;<br><br><span class="hljs-meta">@Service(&quot;accountService&quot;)</span><br><span class="hljs-comment">//@Transactional(isolation = Isolation.REPEATABLE_READ)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AccountService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AccountDao accountDao;<br><br><span class="hljs-comment">//    public void setAccountDao(AccountDao accountDao) &#123;</span><br><span class="hljs-comment">//        this.accountDao = accountDao;</span><br><span class="hljs-comment">//    &#125;</span><br><br>    <span class="hljs-meta">@Transactional(isolation = Isolation.READ_COMMITTED, propagation = Propagation.REQUIRED)</span> <span class="hljs-comment">//配置在方法上优先级最高</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transfer</span><span class="hljs-params">(String outName, String inName, <span class="hljs-type">double</span> money)</span> &#123;<br>        accountDao.out(outName, money);<br><span class="hljs-comment">//        int i = 1/0;</span><br>        accountDao.in(inName, money);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-知识要点"><a href="#2-知识要点" class="headerlink" title="2) 知识要点"></a>2) 知识要点</h4><p>注解声明式事务控制的配置要点</p><ul><li><p>平台事务管理器配置（XML方式）</p></li><li><p>事务通知的配置（@Transactional注解配置）</p></li><li><p>事务注解驱动的配置&lt;tx:annotion-driven &#x2F;&gt;</p></li></ul><h2 id="十六、MyBatis"><a href="#十六、MyBatis" class="headerlink" title="十六、MyBatis"></a>十六、MyBatis</h2><ul><li>MyBatis的简介</li><li>MyBatis的快速入门</li><li>MyBatis的映射文件概述</li><li>MyBatis的增删改查操作</li><li>MyBatis的核心配置文件概述</li><li>MyBatis的相应API</li></ul><h3 id="1-MyBatis的简介"><a href="#1-MyBatis的简介" class="headerlink" title="1. MyBatis的简介"></a>1. MyBatis的简介</h3><h4 id="1-原始Jdbc操作（查询数据）"><a href="#1-原始Jdbc操作（查询数据）" class="headerlink" title="1) 原始Jdbc操作（查询数据）"></a>1) 原始Jdbc操作（查询数据）</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">省略。。。<br></code></pre></td></tr></table></figure><h4 id="2-原始Jdbc操作（插入数据）"><a href="#2-原始Jdbc操作（插入数据）" class="headerlink" title="2) 原始Jdbc操作（插入数据）"></a>2) 原始Jdbc操作（插入数据）</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">省略。。。<br></code></pre></td></tr></table></figure><h4 id="3-原始Jdbc操作的分析"><a href="#3-原始Jdbc操作的分析" class="headerlink" title="3) 原始Jdbc操作的分析"></a>3) 原始Jdbc操作的分析</h4><p>原始Jdbc开发存在的问题如下：</p><p>① 数据库的连接创建、释放频繁造成系统资源浪费从而影响系统性能</p><p>② SQL语句在代码中硬编码，造成代码不易维护，实际应用SQL变化的可能较大，SQL变动需要改变Java代码</p><p>③ 查询操作时，需要手动将结果集中的数据封装到实体中；插入操作时，需要手动将实体的数据设置到SQL语句的占位符位置</p><p>解决方案：</p><p>① 使用数据库连接池初始化连接资源</p><p>② 将SQL语句抽取到XML配置文件中</p><p>③ 使用反射、内省等底层技术，自动将实体与表进行属性与字段的自动映射</p><h4 id="4-什么是MyBatis"><a href="#4-什么是MyBatis" class="headerlink" title="4) 什么是MyBatis"></a>4) 什么是MyBatis</h4><ul><li>MyBatis是一个优秀的基于Java的持久层框架，它内部封装了Jdbc，使开发者只需要关注SQL语句本身，而不需要花费精力去处理加载驱动、创建连接、创建statement等繁杂的过程。</li><li>MyBatis通过XML或注解的方式将要执行的各种statement配置起来，并通过Java对象和statement中SQL的动态参数进行映射生成最终执行的SQL语句</li><li>MyBatis框架执行SQL并将结果映射为Java对象并返回，采用ORM思想解决了实体和数据库映射的问题，对Jdbc进行了封装，屏蔽了Jdbc API底层访问细节，使我们不用与Jdbc API打交道，就可以完成对数据库的持久化操作。</li></ul><h3 id="2-MyBatis的快速入门"><a href="#2-MyBatis的快速入门" class="headerlink" title="2. MyBatis的快速入门"></a>2. MyBatis的快速入门</h3><h4 id="MyBatis开发步骤"><a href="#MyBatis开发步骤" class="headerlink" title="MyBatis开发步骤"></a>MyBatis开发步骤</h4><h5 id="①-添加MyBatis的坐标"><a href="#①-添加MyBatis的坐标" class="headerlink" title="① 添加MyBatis的坐标"></a>① 添加MyBatis的坐标</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--   MyBatis   --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mybatis.version</span>&gt;</span>3.5.9<span class="hljs-tag">&lt;/<span class="hljs-name">mybatis.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--   MyBatis   --&gt;</span><br><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="②-创建数据表"><a href="#②-创建数据表" class="headerlink" title="② 创建数据表"></a>② 创建数据表</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Table structure for `sys_user`</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `sys_user`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `sys_user` (<br>  `id` <span class="hljs-type">bigint</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `username` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `email` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `password` <span class="hljs-type">varchar</span>(<span class="hljs-number">80</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `phoneNum` <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `birthday` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">5</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb3;<br></code></pre></td></tr></table></figure><h5 id="③-编写实体类"><a href="#③-编写实体类" class="headerlink" title="③ 编写实体类"></a>③ 编写实体类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shubao.domain;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Long id;<br><br>    <span class="hljs-keyword">private</span> String username;<br><br>    <span class="hljs-keyword">private</span> String email;<br><br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-keyword">private</span> String phoneNum;<br><br>    <span class="hljs-keyword">private</span> Date birthday;<br><br>    <span class="hljs-comment">//当前用户具备哪些角色</span><br>    <span class="hljs-keyword">private</span> List&lt;Role&gt; roles;<br><br>    <span class="hljs-comment">//当前用户存在那些订单：一对多</span><br>    <span class="hljs-keyword">private</span> List&lt;Order&gt; orderList;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(Long id, String username, String email, String password, String phoneNum, Date birthday, List&lt;Role&gt; roles, List&lt;Order&gt; orderList)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.username = username;<br>        <span class="hljs-built_in">this</span>.email = email;<br>        <span class="hljs-built_in">this</span>.password = password;<br>        <span class="hljs-built_in">this</span>.phoneNum = phoneNum;<br>        <span class="hljs-built_in">this</span>.birthday = birthday;<br>        <span class="hljs-built_in">this</span>.roles = roles;<br>        <span class="hljs-built_in">this</span>.orderList = orderList;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Long <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Long id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUsername</span><span class="hljs-params">(String username)</span> &#123;<br>        <span class="hljs-built_in">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getEmail</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> email;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEmail</span><span class="hljs-params">(String email)</span> &#123;<br>        <span class="hljs-built_in">this</span>.email = email;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPhoneNum</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> phoneNum;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPhoneNum</span><span class="hljs-params">(String phoneNum)</span> &#123;<br>        <span class="hljs-built_in">this</span>.phoneNum = phoneNum;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Date <span class="hljs-title function_">getBirthday</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> birthday;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBirthday</span><span class="hljs-params">(Date birthday)</span> &#123;<br>        <span class="hljs-built_in">this</span>.birthday = birthday;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> List&lt;Role&gt; <span class="hljs-title function_">getRoles</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> roles;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRoles</span><span class="hljs-params">(List&lt;Role&gt; roles)</span> &#123;<br>        <span class="hljs-built_in">this</span>.roles = roles;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> List&lt;Order&gt; <span class="hljs-title function_">getOrderList</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> orderList;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setOrderList</span><span class="hljs-params">(List&lt;Order&gt; orderList)</span> &#123;<br>        <span class="hljs-built_in">this</span>.orderList = orderList;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, username=&#x27;&quot;</span> + username + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, email=&#x27;&quot;</span> + email + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, password=&#x27;&quot;</span> + password + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, phoneNum=&#x27;&quot;</span> + phoneNum + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, birthday=&quot;</span> + birthday +<br>                <span class="hljs-string">&quot;, roles=&quot;</span> + roles +<br>                <span class="hljs-string">&quot;, orderList=&quot;</span> + orderList +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="④-编写映射文件XXXMapper-xml"><a href="#④-编写映射文件XXXMapper-xml" class="headerlink" title="④ 编写映射文件XXXMapper.xml"></a>④ 编写映射文件XXXMapper.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot; http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 配置mapper标签,namespace属性，作用：唯一的 标识一个Mapper配置文件，保护文件中的标签ID不被污染。注意值不能重复--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.shubao.mapper.UserMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--配置SQL资源：</span><br><span class="hljs-comment">     查询:select标签</span><br><span class="hljs-comment">        属性：</span><br><span class="hljs-comment">         id:唯一标识一个SQL语句参数</span><br><span class="hljs-comment">         resultType:声明使用哪个实体类存储查询的结果。一条结果一个实体类对象存储。</span><br><span class="hljs-comment">         parameterType:声明实参类型。</span><br><span class="hljs-comment">     增加:insert标签</span><br><span class="hljs-comment">     修改:update标签</span><br><span class="hljs-comment">     删除:delete标签</span><br><span class="hljs-comment">     注意：</span><br><span class="hljs-comment">        同一个文件内的标签ID不能重复。</span><br><span class="hljs-comment">    --&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  sql语句抽取  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectUser&quot;</span>&gt;</span><br>        select * from sys_user<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span><br><br><br>    <span class="hljs-comment">&lt;!--  查询操作  --&gt;</span><br><span class="hljs-comment">&lt;!--    &lt;select id=&quot;findAllForMybatis&quot; resultType=&quot;user&quot;&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        select * from sys_user--&gt;</span><br><span class="hljs-comment">&lt;!--    &lt;/select&gt;--&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  插入操作  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertForMybatis&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.shubao.domain.User&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--    #&#123;实体属性名&#125;：里面传入的是实体对象的属性名    --&gt;</span><br>        insert into sys_user values(#&#123;id&#125;, #&#123;username&#125;, #&#123;email&#125;, #&#123;password&#125;, #&#123;phoneNum&#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  修改操作  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateForMybatis&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.shubao.domain.User&quot;</span>&gt;</span><br>        update sys_user set email = #&#123;email&#125; where username = #&#123;username&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  删除操作  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteForMybatis&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;java.lang.Integer&quot;</span>&gt;</span><br>        delete from sys_user where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  根据id查询  --&gt;</span><br><span class="hljs-comment">&lt;!--    &lt;select id=&quot;findOneForMybatis&quot; resultType=&quot;user&quot; parameterType=&quot;int&quot;&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        select * from sys_user where id = #&#123;id&#125;--&gt;</span><br><span class="hljs-comment">&lt;!--    &lt;/select&gt;--&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  多条件查询  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findByCondition&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>        select * from sys_user<br>        <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;id != 0&quot;</span>&gt;</span><br>                and id = #&#123;id&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;username != null&quot;</span>&gt;</span><br>                and username = #&#123;username&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;password != null&quot;</span>&gt;</span><br>                and password = #&#123;password&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findByIds&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;selectUser&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;id in(&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br>                #&#123;id&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--    &lt;insert id=&quot;save&quot; parameterType=&quot;user&quot;&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        insert into sys_user values(#&#123;id&#125;, #&#123;username&#125;, #&#123;email&#125;, #&#123;password&#125;, #&#123;phoneNum&#125;, #&#123;birthday&#125;)--&gt;</span><br><span class="hljs-comment">&lt;!--    &lt;/insert&gt;--&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findByid&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;selectUser&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;id != 0&quot;</span>&gt;</span><br>                and id = #&#123;id&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;uid&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;username&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;email&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;password&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;phoneNum&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;phoneNum&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;birthday&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;birthday&quot;</span> /&gt;</span><br><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            配置集合信息</span><br><span class="hljs-comment">                property: 集合名称</span><br><span class="hljs-comment">                ofType: 当前集合中的数据类型</span><br><span class="hljs-comment">         --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;orderList&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;order&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 封装order的数据 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;oid&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;ordertime&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;ordertime&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;total&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;total&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAll&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;userMap&quot;</span>&gt;</span><br>        select *, o.id oid from sys_user u, sys_order o where u.id = o.uid<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userRoleMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- user的信息 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;userId&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;username&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;email&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;password&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;phoneNum&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;phoneNum&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;birthday&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;birthday&quot;</span> /&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- user内部的roleList的信息 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;roles&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;role&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;roleId&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;roleName&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;roleName&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;roleDesc&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;roleDesc&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findUserAndRole&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;userRoleMap&quot;</span>&gt;</span><br>        select * from sys_user u, sys_user_role ur, sys_role r where u.id = ur.userId and ur.roleId = r.id<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="⑤-编写核心文件mybatis-xml"><a href="#⑤-编写核心文件mybatis-xml" class="headerlink" title="⑤ 编写核心文件mybatis.xml"></a>⑤ 编写核心文件mybatis.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  通过properties标签加载外部properties文件  --&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;properties resource=&quot;jdbc.properties&quot; /&gt;--&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  自定义别名  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;typeAlias type=&quot;com.shubao.domain.User&quot; alias=&quot;user&quot; /&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;typeAlias type=&quot;com.shubao.domain.Order&quot; alias=&quot;order&quot; /&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;typeAlias type=&quot;com.shubao.domain.Role&quot; alias=&quot;role&quot; /&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;typeAlias type=&quot;com.shubao.domain.Account&quot; alias=&quot;account&quot; /&gt;--&gt;</span><br>        <span class="hljs-comment">&lt;!--    扫描domain下所有实体类    --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.shubao.domain&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  注册自定义类型处理器  --&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;typeHandlers&gt;--&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;typeHandler handler=&quot;com.shubao.handler.DateTypeHandler&quot; /&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;/typeHandlers&gt;--&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--  配置分页插件助手  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span> <span class="hljs-attr">interceptor</span>=<span class="hljs-string">&quot;com.github.pagehelper.PageHelper&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 指定方言 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dialect&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mysql&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  数据源环境  --&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;environments default=&quot;developement&quot;&gt;--&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;environment id=&quot;developement&quot;&gt;--&gt;</span><br>            <span class="hljs-comment">&lt;!--&lt;transactionManager type=&quot;JDBC&quot; /&gt;--&gt;</span><br>            <span class="hljs-comment">&lt;!--&lt;dataSource type=&quot;POOLED&quot;&gt;--&gt;</span><br>                <span class="hljs-comment">&lt;!--&lt;property name=&quot;driver&quot; value=&quot;$&#123;jdbc.driver&#125;&quot; /&gt;--&gt;</span><br>                <span class="hljs-comment">&lt;!--&lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot; /&gt;--&gt;</span><br>                <span class="hljs-comment">&lt;!--&lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot; /&gt;--&gt;</span><br>                <span class="hljs-comment">&lt;!--&lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot; /&gt;--&gt;</span><br>            <span class="hljs-comment">&lt;!--&lt;/dataSource&gt;--&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;/environment&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;/environments&gt;--&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  加载映射文件  --&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;mappers&gt;--&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;mapper resource=&quot;com/shubao/mapper/UserMapper.xml&quot; /&gt;--&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;mapper resource=&quot;com/shubao/mapper/OrderMapper.xml&quot; /&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;/mappers&gt;--&gt;</span><br><br>    <span class="hljs-comment">&lt;!--加载映射关系--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--指定接口所在的包--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.shubao.mapper&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="⑥-编写测试类"><a href="#⑥-编写测试类" class="headerlink" title="⑥ 编写测试类"></a>⑥ 编写测试类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shubao.test;<br><br><span class="hljs-keyword">import</span> com.github.pagehelper.PageHelper;<br><span class="hljs-keyword">import</span> com.github.pagehelper.PageInfo;<br><span class="hljs-keyword">import</span> com.shubao.domain.Order;<br><span class="hljs-keyword">import</span> com.shubao.domain.User;<br><span class="hljs-keyword">import</span> com.shubao.mapper.OrderMapper;<br><span class="hljs-keyword">import</span> com.shubao.mapper.UserMapper;<br><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><span class="hljs-keyword">import</span> org.junit.Before;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBatisTest</span> &#123;<br><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-keyword">private</span> OrderMapper orderMapper;<br><br>    <span class="hljs-meta">@Before</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">resourceAsStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis.xml&quot;</span>);<br>        <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);<br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession(<span class="hljs-literal">true</span>);<br>        userMapper = sqlSession.getMapper(UserMapper.class);<br>        orderMapper = sqlSession.getMapper(OrderMapper.class);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询操作</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//获取核心配置文件</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">resourceAsStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis.xml&quot;</span>);<br>        <span class="hljs-comment">//获得session工厂对象</span><br>        <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);<br>        <span class="hljs-comment">//获得session会话对象</span><br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>        <span class="hljs-comment">//执行操作，参数：namespace + id</span><br>        List&lt;User&gt; userList = sqlSession.selectList(<span class="hljs-string">&quot;userMapper.findAllForMybatis&quot;</span>);<br>        <span class="hljs-comment">//打印数据</span><br>        System.out.println(<span class="hljs-string">&quot;userList = &quot;</span> + userList);<br>        <span class="hljs-comment">//释放资源</span><br>        sqlSession.close();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 插入操作</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//创建User对象</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setUsername(<span class="hljs-string">&quot;tom&quot;</span>);<br>        user.setEmail(<span class="hljs-string">&quot;tom@@sinosoft.com.cn&quot;</span>);<br>        user.setPassword(<span class="hljs-string">&quot;123&quot;</span>);<br>        user.setPhoneNum(<span class="hljs-string">&quot;19911001122&quot;</span>);<br><br>        <span class="hljs-comment">//打印数据</span><br>        System.out.println(<span class="hljs-string">&quot;user = &quot;</span> + user);<br><br>        <span class="hljs-comment">//获取核心配置文件</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">resourceAsStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis.xml&quot;</span>);<br>        <span class="hljs-comment">//获得session工厂对象</span><br>        <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);<br>        <span class="hljs-comment">//获得session会话对象</span><br><span class="hljs-comment">//        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession(<span class="hljs-literal">true</span>);<span class="hljs-comment">//true表示不需要手动提交事务</span><br>        <span class="hljs-comment">//执行操作，参数：namespace + id</span><br>        sqlSession.insert(<span class="hljs-string">&quot;userMapper.insertForMybatis&quot;</span>, user);<br>        <span class="hljs-comment">//mybatis如果执行更新操作，需要手动提交事务</span><br><span class="hljs-comment">//        sqlSession.commit();</span><br>        <span class="hljs-comment">//释放资源</span><br>        sqlSession.close();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 更新操作</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//创建User对象</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setUsername(<span class="hljs-string">&quot;tom&quot;</span>);<br>        user.setEmail(<span class="hljs-string">&quot;tom@@sinosoft.com.cn&quot;</span>);<br><br>        <span class="hljs-comment">//打印数据</span><br>        System.out.println(<span class="hljs-string">&quot;user = &quot;</span> + user);<br><br>        <span class="hljs-comment">//获取核心配置文件</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">resourceAsStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis.xml&quot;</span>);<br>        <span class="hljs-comment">//获得session工厂对象</span><br>        <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);<br>        <span class="hljs-comment">//获得session会话对象</span><br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>        <span class="hljs-comment">//执行操作，参数：namespace + id</span><br>        sqlSession.update(<span class="hljs-string">&quot;userMapper.updateForMybatis&quot;</span>, user);<br>        <span class="hljs-comment">//mybatis如果执行更新操作，需要手动提交事务</span><br>        sqlSession.commit();<br>        <span class="hljs-comment">//释放资源</span><br>        sqlSession.close();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除操作</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test4</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//获取核心配置文件</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">resourceAsStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis.xml&quot;</span>);<br>        <span class="hljs-comment">//获得session工厂对象</span><br>        <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);<br>        <span class="hljs-comment">//获得session会话对象</span><br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>        <span class="hljs-comment">//执行操作，参数：namespace + id</span><br>        sqlSession.delete(<span class="hljs-string">&quot;userMapper.deleteForMybatis&quot;</span>, <span class="hljs-number">11</span>);<br>        <span class="hljs-comment">//mybatis如果执行更新操作，需要手动提交事务</span><br>        sqlSession.commit();<br>        <span class="hljs-comment">//释放资源</span><br>        sqlSession.close();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询一个对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test5</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//获取核心配置文件</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">resourceAsStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis.xml&quot;</span>);<br>        <span class="hljs-comment">//获得session工厂对象</span><br>        <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);<br>        <span class="hljs-comment">//获得session会话对象</span><br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>        <span class="hljs-comment">//执行操作，参数：namespace + id</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> sqlSession.selectOne(<span class="hljs-string">&quot;userMapper.findOneForMybatis&quot;</span>, <span class="hljs-number">1</span>);<br>        <span class="hljs-comment">//打印数据</span><br>        System.out.println(<span class="hljs-string">&quot;user = &quot;</span> + user);<br>        <span class="hljs-comment">//释放资源</span><br>        sqlSession.close();<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 自定义类型转换器：保存一个对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test6</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//获取核心配置文件</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">resourceAsStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis.xml&quot;</span>);<br>        <span class="hljs-comment">//获得session工厂对象</span><br>        <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);<br>        <span class="hljs-comment">//获得session会话对象</span><br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>        <span class="hljs-comment">//执行操作，参数：namespace + id</span><br>        <span class="hljs-type">UserMapper</span> <span class="hljs-variable">userMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br><br>        <span class="hljs-comment">//创建User对象</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setUsername(<span class="hljs-string">&quot;sakura&quot;</span>);<br>        user.setPassword(<span class="hljs-string">&quot;123456&quot;</span>);<br>        user.setEmail(<span class="hljs-string">&quot;sakura@gmail.com&quot;</span>);<br>        user.setPhoneNum(<span class="hljs-string">&quot;18899523266&quot;</span>);<br>        user.setBirthday(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&quot;2002/05/20&quot;</span>));<br><br>        <span class="hljs-comment">//执行保存操作</span><br>        userMapper.save(user);<br>        <span class="hljs-comment">//提交事务</span><br>        sqlSession.commit();<br>        <span class="hljs-comment">//释放资源</span><br>        sqlSession.close();<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 自定义类型转换器：查询</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test7</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//获取核心配置文件</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">resourceAsStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis.xml&quot;</span>);<br>        <span class="hljs-comment">//获得session工厂对象</span><br>        <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);<br>        <span class="hljs-comment">//获得session会话对象</span><br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>        <span class="hljs-comment">//执行操作，参数：namespace + id</span><br>        <span class="hljs-type">UserMapper</span> <span class="hljs-variable">userMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.findByid(<span class="hljs-number">15</span>);<br>        System.out.println(<span class="hljs-string">&quot;user = &quot;</span> + user);<br><br>        <span class="hljs-comment">//释放资源</span><br>        sqlSession.close();<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 分页插件：PageHelper</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test8</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//获取核心配置文件</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">resourceAsStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis.xml&quot;</span>);<br>        <span class="hljs-comment">//获得session工厂对象</span><br>        <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);<br>        <span class="hljs-comment">//获得session会话对象</span><br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>        <span class="hljs-comment">//执行操作，参数：namespace + id</span><br>        <span class="hljs-type">UserMapper</span> <span class="hljs-variable">userMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br><br>        <span class="hljs-comment">//设置分页的相关参数  当前页、每页显示的条数</span><br>        PageHelper.startPage(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>);<br><br>        List&lt;User&gt; userList = userMapper.findAllForMybatis();<br>        <span class="hljs-keyword">for</span> (User user : userList) &#123;<br>            System.out.println(<span class="hljs-string">&quot;user = &quot;</span> + user);<br>        &#125;<br><br>        <span class="hljs-comment">//获得与分页相关的数据</span><br>        PageInfo&lt;User&gt; pageInfo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageInfo</span>&lt;&gt;(userList);<br>        System.out.println(<span class="hljs-string">&quot;当前页：&quot;</span> + pageInfo.getPageNum());<br>        System.out.println(<span class="hljs-string">&quot;每页显示的条数：&quot;</span> + pageInfo.getPageSize());<br>        System.out.println(<span class="hljs-string">&quot;总条数：&quot;</span> + pageInfo.getTotal());<br>        System.out.println(<span class="hljs-string">&quot;总页数：&quot;</span> + pageInfo.getPages());<br>        System.out.println(<span class="hljs-string">&quot;上一页：&quot;</span> + pageInfo.getPrePage());<br>        System.out.println(<span class="hljs-string">&quot;下一页：&quot;</span> + pageInfo.getNextPage());<br>        System.out.println(<span class="hljs-string">&quot;是否是第一页：&quot;</span> + pageInfo.isIsFirstPage());<br>        System.out.println(<span class="hljs-string">&quot;是否是最后一页：&quot;</span> + pageInfo.isIsLastPage());<br><br><br>        <span class="hljs-comment">//释放资源</span><br>        sqlSession.close();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 多表联合查询：一对一</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test9</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//获取核心配置文件</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">resourceAsStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis.xml&quot;</span>);<br>        <span class="hljs-comment">//获得session工厂对象</span><br>        <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);<br>        <span class="hljs-comment">//获得session会话对象</span><br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>        <span class="hljs-comment">//执行操作，参数：namespace + id</span><br>        <span class="hljs-type">OrderMapper</span> <span class="hljs-variable">orderMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(OrderMapper.class);<br><br>        List&lt;Order&gt; orderList = orderMapper.findAll();<br>        <span class="hljs-keyword">for</span> (Order order : orderList) &#123;<br>            System.out.println(<span class="hljs-string">&quot;order = &quot;</span> + order);<br>        &#125;<br><br>        <span class="hljs-comment">//释放资源</span><br>        sqlSession.close();<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 多表联合查询：一对多</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test10</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//获取核心配置文件</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">resourceAsStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis.xml&quot;</span>);<br>        <span class="hljs-comment">//获得session工厂对象</span><br>        <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);<br>        <span class="hljs-comment">//获得session会话对象</span><br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>        <span class="hljs-comment">//执行操作，参数：namespace + id</span><br>        <span class="hljs-type">UserMapper</span> <span class="hljs-variable">userMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br><br>        List&lt;User&gt; userList = userMapper.findAll();<br>        <span class="hljs-keyword">for</span> (User user : userList) &#123;<br>            System.out.println(<span class="hljs-string">&quot;user = &quot;</span> + user);<br>        &#125;<br><br>        <span class="hljs-comment">//释放资源</span><br>        sqlSession.close();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 多表联合查询：多对多  三表</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test11</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//获取核心配置文件</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">resourceAsStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis.xml&quot;</span>);<br>        <span class="hljs-comment">//获得session工厂对象</span><br>        <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);<br>        <span class="hljs-comment">//获得session会话对象</span><br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>        <span class="hljs-comment">//执行操作，参数：namespace + id</span><br>        <span class="hljs-type">UserMapper</span> <span class="hljs-variable">userMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br><br>        List&lt;User&gt; userList = userMapper.findUserAndRole();<br>        <span class="hljs-keyword">for</span> (User user : userList) &#123;<br>            System.out.println(<span class="hljs-string">&quot;user = &quot;</span> + user);<br>        &#125;<br><br>        <span class="hljs-comment">//释放资源</span><br>        sqlSession.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test12</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setUsername(<span class="hljs-string">&quot;wangwu&quot;</span>);<br>        user.setEmail(<span class="hljs-string">&quot;wangwu@gmail.com&quot;</span>);<br>        user.setPassword(<span class="hljs-string">&quot;123&quot;</span>);<br>        user.setPhoneNum(<span class="hljs-string">&quot;110119120&quot;</span>);<br><br>        userMapper.save(user);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test13</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        List&lt;User&gt; userList = userMapper.findAllForMybatis();<br>        <span class="hljs-keyword">for</span> (User user : userList) &#123;<br>            System.out.println(<span class="hljs-string">&quot;user = &quot;</span> + user);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test14</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        List&lt;Order&gt; orderList = orderMapper.findAll();<br>        <span class="hljs-keyword">for</span> (Order order : orderList) &#123;<br>            System.out.println(<span class="hljs-string">&quot;order = &quot;</span> + order);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test15</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        List&lt;User&gt; userList = userMapper.findUserAndOrderAll();<br>        <span class="hljs-keyword">for</span> (User user : userList) &#123;<br>            System.out.println(<span class="hljs-string">&quot;user = &quot;</span> + user);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test16</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        List&lt;User&gt; userList = userMapper.findUserAndRoleAll();<br>        <span class="hljs-keyword">for</span> (User user : userList) &#123;<br>            System.out.println(<span class="hljs-string">&quot;user = &quot;</span> + user);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-MyBatis的映射文件概述"><a href="#3-MyBatis的映射文件概述" class="headerlink" title="3. MyBatis的映射文件概述"></a>3. MyBatis的映射文件概述</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-comment">&lt;!-- 映射文件DTO约束头 --&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot; http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 配置mapper标签,namespace属性，作用：唯一的 标识一个Mapper配置文件，保护文件中的标签ID不被污染。注意值不能重复 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.shubao.mapper.UserMapper&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- select：查询操作，还有insert、update、delete --&gt;</span><br>    <span class="hljs-comment">&lt;!-- resultType：查询结果对应的实体类型 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.shubao.domain.User&quot;</span>&gt;</span><br>        select * from sys_user<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-MyBatis的增删改查操作"><a href="#4-MyBatis的增删改查操作" class="headerlink" title="4. MyBatis的增删改查操作"></a>4. MyBatis的增删改查操作</h3><h4 id="1-MyBatis的插入数据操作"><a href="#1-MyBatis的插入数据操作" class="headerlink" title="1) MyBatis的插入数据操作"></a>1) MyBatis的插入数据操作</h4><h5 id="1-插入操作注意问题"><a href="#1-插入操作注意问题" class="headerlink" title="(1) 插入操作注意问题"></a>(1) 插入操作注意问题</h5><ul><li>插入语句使用insert标签</li><li>在映射文件中使用parameterType属性指定要插入的数据类型</li><li>SQL语句中使用#{实体属性名}方式引用实体中的属性值</li><li>插入操作使用的API是SqlSession.insert(“命名空间.id”, 实体对象)</li><li>插入操作涉及数据库数据的变化，所以要使用SqlSession对象显式的提交事务，即sqlSession.commit();</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;userMapper&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--  插入操作  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertForMybatis&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.shubao.domain.User&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--    #&#123;实体属性名&#125;：里面传入的是实体对象的属性名    --&gt;</span><br>        insert into sys_user values(#&#123;id&#125;, #&#123;username&#125;, #&#123;email&#125;, #&#123;password&#125;, #&#123;phoneNum&#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 插入操作</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//创建User对象</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    user.setUsername(<span class="hljs-string">&quot;tom&quot;</span>);<br>    user.setEmail(<span class="hljs-string">&quot;tom@@sinosoft.com.cn&quot;</span>);<br>    user.setPassword(<span class="hljs-string">&quot;123&quot;</span>);<br>    user.setPhoneNum(<span class="hljs-string">&quot;19911001122&quot;</span>);<br><br>    <span class="hljs-comment">//打印数据</span><br>    System.out.println(<span class="hljs-string">&quot;user = &quot;</span> + user);<br><br>    <span class="hljs-comment">//获取核心配置文件</span><br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">resourceAsStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis.xml&quot;</span>);<br>    <span class="hljs-comment">//获得session工厂对象</span><br>    <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);<br>    <span class="hljs-comment">//获得session会话对象</span><br>    <span class="hljs-comment">//        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession(<span class="hljs-literal">true</span>);<span class="hljs-comment">//true表示不需要手动提交事务</span><br>    <span class="hljs-comment">//执行操作，参数：namespace + id</span><br>    sqlSession.insert(<span class="hljs-string">&quot;userMapper.insertForMybatis&quot;</span>, user);<br>    <span class="hljs-comment">//mybatis如果执行更新操作，需要手动提交事务</span><br>    <span class="hljs-comment">//        sqlSession.commit();</span><br>    <span class="hljs-comment">//释放资源</span><br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-MyBatis的修改数据操作"><a href="#2-MyBatis的修改数据操作" class="headerlink" title="2) MyBatis的修改数据操作"></a>2) MyBatis的修改数据操作</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;userMapper&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--  修改操作  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateForMybatis&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.shubao.domain.User&quot;</span>&gt;</span><br>        update sys_user set email = #&#123;email&#125; where username = #&#123;username&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 更新操作</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//创建User对象</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    user.setUsername(<span class="hljs-string">&quot;tom&quot;</span>);<br>    user.setEmail(<span class="hljs-string">&quot;tom@@sinosoft.com.cn&quot;</span>);<br><br>    <span class="hljs-comment">//打印数据</span><br>    System.out.println(<span class="hljs-string">&quot;user = &quot;</span> + user);<br><br>    <span class="hljs-comment">//获取核心配置文件</span><br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">resourceAsStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis.xml&quot;</span>);<br>    <span class="hljs-comment">//获得session工厂对象</span><br>    <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);<br>    <span class="hljs-comment">//获得session会话对象</span><br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>    <span class="hljs-comment">//执行操作，参数：namespace + id</span><br>    sqlSession.update(<span class="hljs-string">&quot;userMapper.updateForMybatis&quot;</span>, user);<br>    <span class="hljs-comment">//mybatis如果执行更新操作，需要手动提交事务</span><br>    sqlSession.commit();<br>    <span class="hljs-comment">//释放资源</span><br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-修改操作注意问题"><a href="#1-修改操作注意问题" class="headerlink" title="(1) 修改操作注意问题"></a>(1) 修改操作注意问题</h5><ul><li>修改语句使用update标签</li><li>修改操作使用的API是sqlSession.update(“命名空间.id”, 实体对象);</li></ul><h4 id="3-MyBatis的删除操作"><a href="#3-MyBatis的删除操作" class="headerlink" title="3) MyBatis的删除操作"></a>3) MyBatis的删除操作</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;userMapper&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--  删除操作  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteForMybatis&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;java.lang.Integer&quot;</span>&gt;</span><br>        delete from sys_user where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 删除操作</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test4</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//获取核心配置文件</span><br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">resourceAsStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis.xml&quot;</span>);<br>    <span class="hljs-comment">//获得session工厂对象</span><br>    <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);<br>    <span class="hljs-comment">//获得session会话对象</span><br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>    <span class="hljs-comment">//执行操作，参数：namespace + id</span><br>    sqlSession.delete(<span class="hljs-string">&quot;userMapper.deleteForMybatis&quot;</span>, <span class="hljs-number">11</span>);<br>    <span class="hljs-comment">//mybatis如果执行更新操作，需要手动提交事务</span><br>    sqlSession.commit();<br>    <span class="hljs-comment">//释放资源</span><br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-删除操作注意问题"><a href="#1-删除操作注意问题" class="headerlink" title="(1) 删除操作注意问题"></a>(1) 删除操作注意问题</h5><ul><li>删除语句使用delete标签</li><li>SQL语句中使用#{任意字符串}方式引用传递的单个参数</li><li>删除操作使用的API是sqlSession.delete(“命名空间.id”, Object);</li></ul><h4 id="4-MyBatis的查询操作"><a href="#4-MyBatis的查询操作" class="headerlink" title="4) MyBatis的查询操作"></a>4) MyBatis的查询操作</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;userMapper&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--  查询操作  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAllForMybatis&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>        select * from sys_user<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询操作</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//获取核心配置文件</span><br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">resourceAsStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis.xml&quot;</span>);<br>    <span class="hljs-comment">//获得session工厂对象</span><br>    <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);<br>    <span class="hljs-comment">//获得session会话对象</span><br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>    <span class="hljs-comment">//执行操作，参数：namespace + id</span><br>    List&lt;User&gt; userList = sqlSession.selectList(<span class="hljs-string">&quot;userMapper.findAllForMybatis&quot;</span>);<br>    <span class="hljs-comment">//打印数据</span><br>    System.out.println(<span class="hljs-string">&quot;userList = &quot;</span> + userList);<br>    <span class="hljs-comment">//释放资源</span><br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-MyBatis的核心配置文件概述"><a href="#5-MyBatis的核心配置文件概述" class="headerlink" title="5. MyBatis的核心配置文件概述"></a>5. MyBatis的核心配置文件概述</h3><h4 id="1-层级关系"><a href="#1-层级关系" class="headerlink" title="1) 层级关系"></a>1) 层级关系</h4><ul><li>configuration配置<ul><li>properties属性</li><li>setting设置</li><li>typeAliases类型别名<ul><li>typeAlias</li></ul></li><li>typeHandlers类型处理器</li><li>objectFactory对象工厂</li><li>plugins插件</li><li>environments环境<ul><li>environment环境变量<ul><li>transactionManager事务管理器</li><li>dataSource数据源</li></ul></li></ul></li><li>databaseProvider数据库厂商标识</li><li>mappers映射器</li></ul></li></ul><h4 id="2-MyBatis常用配置解析"><a href="#2-MyBatis常用配置解析" class="headerlink" title="2) MyBatis常用配置解析"></a>2) MyBatis常用配置解析</h4><h5 id="1-environments标签"><a href="#1-environments标签" class="headerlink" title="(1) environments标签"></a>(1) environments标签</h5><p>数据库环境的配置，支持多环境配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># jdbc.properties</span><br><span class="hljs-attr">jdbc.driver</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-comment">#jdbc.url=jdbc:mysql://localhost:3306/wollo</span><br><span class="hljs-attr">jdbc.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/wollo?characterEncoding=utf8</span><br><span class="hljs-attr">jdbc.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">jdbc.password</span>=<span class="hljs-string">1106135</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  通过properties标签加载外部properties文件  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;jdbc.properties&quot;</span> /&gt;</span><br><br><span class="hljs-comment">&lt;!--  数据源环境  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;developement&quot;</span>&gt;</span><span class="hljs-comment">&lt;!-- 指定默认的环境名称 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;developement&quot;</span>&gt;</span><span class="hljs-comment">&lt;!-- 指定当前的环境名称 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span> /&gt;</span><span class="hljs-comment">&lt;!-- 指定事务管理类型是JDBC --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><span class="hljs-comment">&lt;!-- 指定当前数据源类型是连接池 --&gt;</span><br>            <span class="hljs-comment">&lt;!-- 数据源配置的基本信息 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其中，事务管理器(transactionManager)类型有两种：</p><ul><li>JDBC：这个配置就是直接使用了JDBC的提交和回滚设置，它依赖于从数据源得到的连接来管理事务作用域。</li><li>MANAGED：这个配置几乎没做什么。它从来不提交或回滚一个连接，而是让容器来管理事务的整个生命周期(比如JEE应用服务器的上下文)。默认情况下它会关闭连接，然而一些容器并不希望这样，因此需要将closeConnection属性设置为false来阻止它默认的关闭行为。</li></ul><blockquote><p>注：JEE服务器就是一些拦截器的整合，你的EJB存在于这些拦截器之后，容器帮你完成了很多预定义的工作，通过你的接口（2.1）或注解（3.0）来帮你拦截，帮你完成工作。</p><p><a href="https://www.cnblogs.com/yecllsl/articles/574147.html">https://www.cnblogs.com/yecllsl/articles/574147.html</a></p></blockquote><p>其中，数据源(dataSource)类型有三种：</p><ul><li>UNPOOLED：这个数据源的实现只是每次被请求时打开和关闭连接</li><li>POOLED：这种数据源的实现利用“池”的概念将JDBC连接对象组织起来</li><li>JNDI：这个数据源的实现是为了能在如EJB或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个JNDI上下文的引用</li></ul><h5 id="2-mapper标签"><a href="#2-mapper标签" class="headerlink" title="(2) mapper标签"></a>(2) mapper标签</h5><p>该标签的作用是加载映射的，加载方式有如下几种：</p><ul><li>使用相对于类路径的资源引用，例如：<mapper resource="org/mybatis/builder/AuthorMapper.xml"/></li><li>使用完全限定资源定位符（URL），例如：<mapper url="file:///var/mappers/AuthorMapper.xml"/></li><li>使用映射器接口实现类的完全限定类名，例如：<mapper class="org.mybatis.builder.AuthorMapper"/></li><li>将包内的映射器接口实现全部注册为映射器，例如：<package name="org.mybatis.builder"/></li></ul><h5 id="3-Properties标签"><a href="#3-Properties标签" class="headerlink" title="(3) Properties标签"></a>(3) Properties标签</h5><p>将数据源的配置信息单独抽取成一个properties文件，该标签可以加载额外配置的properties文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  通过properties标签加载外部properties文件  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;jdbc.properties&quot;</span> /&gt;</span><br><br><span class="hljs-comment">&lt;!--  数据源环境  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;developement&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;developement&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="4-typeAliases标签"><a href="#4-typeAliases标签" class="headerlink" title="(4) typeAliases标签"></a>(4) typeAliases标签</h5><p>类型别名是为Java类型设置的一个短的名字，原来的类型名称配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.shubao.domain.User&quot;</span>&gt;</span><br>select * from User<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置typeAliases，为全限定名(com.shubao.domain.User)定义别名为：user</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  自定义别名  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;typeAlias type=&quot;com.shubao.domain.User&quot; alias=&quot;user&quot; /&gt; --&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;typeAlias type=&quot;com.shubao.domain.Order&quot; alias=&quot;order&quot; /&gt; --&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;typeAlias type=&quot;com.shubao.domain.Role&quot; alias=&quot;role&quot; /&gt; --&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;typeAlias type=&quot;com.shubao.domain.Account&quot; alias=&quot;account&quot; /&gt; --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 扫描domain下所有实体类 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.shubao.domain&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--  查询操作  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAllForMybatis&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>    select * from sys_user<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>除了自定义的别名，mybatis框架自带的一些常用的数据类型的别名</p><table><thead><tr><th>别名</th><th>数据类型</th></tr></thead><tbody><tr><td>string</td><td>String</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>boolean</td><td>Boolean</td></tr><tr><td>…</td><td>…</td></tr></tbody></table><h3 id="6-MyBatis的相应API"><a href="#6-MyBatis的相应API" class="headerlink" title="6. MyBatis的相应API"></a>6. MyBatis的相应API</h3><h4 id="1-SqlSession工厂构建器SqlSessionFactoryBuilder"><a href="#1-SqlSession工厂构建器SqlSessionFactoryBuilder" class="headerlink" title="(1) SqlSession工厂构建器SqlSessionFactoryBuilder"></a>(1) SqlSession工厂构建器SqlSessionFactoryBuilder</h4><p>常用API：SqlSessionFactory build(InputStream inputStream)</p><p>通过加载mybatis的核心文件的输入流的形式，构建一个SQLSessionFactory对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取核心配置文件</span><br><span class="hljs-type">InputStream</span> <span class="hljs-variable">resourceAsStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis.xml&quot;</span>);<br><span class="hljs-comment">//获得session工厂对象</span><br><span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);<br><span class="hljs-comment">//获得session会话对象</span><br><span class="hljs-comment">//SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession(<span class="hljs-literal">true</span>);<span class="hljs-comment">//true表示不需要手动提交事务</span><br></code></pre></td></tr></table></figure><p>其中，Resources工具类，在org.apache.ibatis.io包中。Resources类可以从类路径下、文件系统或者一个web URL中加载资源文件。</p><h4 id="2-SqlSession工厂对象SqlSessionFactory"><a href="#2-SqlSession工厂对象SqlSessionFactory" class="headerlink" title="(2) SqlSession工厂对象SqlSessionFactory"></a>(2) SqlSession工厂对象SqlSessionFactory</h4><p>SqlSessionFactory有多个方法创建SQLSession实例。常用的有如下两个：</p><table><thead><tr><th>方法</th><th>解释</th></tr></thead><tbody><tr><td>SqlSession openSession()</td><td>会默认开启一个事务，但事务不会自动提交，也就意味着需要手动提交该事务，更新操作数据才会持久化到数据库中</td></tr><tr><td>SqlSession openSession(boolean autoCommit)</td><td>参数为是否自动提交，如果设置为true，那么不需要手动提交事务</td></tr></tbody></table><h4 id="3-SqlSession会话对象"><a href="#3-SqlSession会话对象" class="headerlink" title="(3) SqlSession会话对象"></a>(3) SqlSession会话对象</h4><p>SqlSession类中有执行语句、提交或回滚事务和获取映射器实例的方法。执行语句的方法主要有：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// org.apache.ibatis.session.SqlSession</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * Retrieve a single row mapped from the statement key.</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> &lt;T&gt; the returned object type</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> statement</span><br><span class="hljs-comment">  *          the statement</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@return</span> Mapped object</span><br><span class="hljs-comment">  */</span><br>&lt;T&gt; T <span class="hljs-title function_">selectOne</span><span class="hljs-params">(String statement)</span>;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* Retrieve a single row mapped from the statement key and parameter.</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> &lt;T&gt; the returned object type</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> statement Unique identifier matching the statement to use.</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> parameter A parameter object to pass to the statement.</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span> Mapped object</span><br><span class="hljs-comment">*/</span><br>&lt;T&gt; T <span class="hljs-title function_">selectOne</span><span class="hljs-params">(String statement, Object parameter)</span>;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Retrieve a list of mapped objects from the statement key.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;E&gt; the returned list element type</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> statement Unique identifier matching the statement to use.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> List of mapped object</span><br><span class="hljs-comment"> */</span><br>&lt;E&gt; List&lt;E&gt; <span class="hljs-title function_">selectList</span><span class="hljs-params">(String statement)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Retrieve a list of mapped objects from the statement key and parameter.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;E&gt; the returned list element type</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> statement Unique identifier matching the statement to use.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> parameter A parameter object to pass to the statement.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> List of mapped object</span><br><span class="hljs-comment"> */</span><br>&lt;E&gt; List&lt;E&gt; <span class="hljs-title function_">selectList</span><span class="hljs-params">(String statement, Object parameter)</span>;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Execute an insert statement with the given parameter object. Any generated</span><br><span class="hljs-comment"> * autoincrement values or selectKey entries will modify the given parameter</span><br><span class="hljs-comment"> * object properties. Only the number of rows affected will be returned.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> statement Unique identifier matching the statement to execute.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> parameter A parameter object to pass to the statement.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> int The number of rows affected by the insert.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(String statement, Object parameter)</span>;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Execute an update statement. The number of rows affected will be returned.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> statement Unique identifier matching the statement to execute.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> parameter A parameter object to pass to the statement.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> int The number of rows affected by the update.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">update</span><span class="hljs-params">(String statement, Object parameter)</span>;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Execute a delete statement. The number of rows affected will be returned.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> statement Unique identifier matching the statement to execute.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> parameter A parameter object to pass to the statement.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> int The number of rows affected by the delete.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(String statement, Object parameter)</span>;<br></code></pre></td></tr></table></figure><p>操作事务的方法主要有：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Flushes batch statements and commits database connection.</span><br><span class="hljs-comment"> * Note that database connection will not be committed if no updates/deletes/inserts were called.</span><br><span class="hljs-comment"> * To force the commit call &#123;<span class="hljs-doctag">@link</span> SqlSession#commit(boolean)&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">commit</span><span class="hljs-params">()</span>;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Discards pending batch statements and rolls database connection back.</span><br><span class="hljs-comment"> * Note that database connection will not be rolled back if no updates/deletes/inserts were called.</span><br><span class="hljs-comment"> * To force the rollback call &#123;<span class="hljs-doctag">@link</span> SqlSession#rollback(boolean)&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">rollback</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><h3 id="7-MyBatis的Dao层实现"><a href="#7-MyBatis的Dao层实现" class="headerlink" title="7. MyBatis的Dao层实现"></a>7. MyBatis的Dao层实现</h3><h4 id="1-代理开发方式"><a href="#1-代理开发方式" class="headerlink" title="1) 代理开发方式"></a>1) 代理开发方式</h4><h5 id="1-代理开发方式介绍"><a href="#1-代理开发方式介绍" class="headerlink" title="(1) 代理开发方式介绍"></a>(1) 代理开发方式介绍</h5><p>采用 Mybatis 的代理开发方式实现 DAO 层的开发，这种方式是我们后面进入企业的主流。 </p><p>Mapper 接口开发方法只需要程序员编写Mapper 接口（相当于Dao 接口），由Mybatis 框架根据接口定义创建接 口的动态代理对象，代理对象的方法体同上边Dao接口实现类方法。 </p><p>Mapper 接口开发需要遵循以下规范： </p><p>1、 Mapper.xml文件中的namespace与mapper接口的全限定名相同 </p><p>2、 Mapper接口方法名和Mapper.xml中定义的每个statement的id相同 </p><p>3、 Mapper接口方法的输入参数类型和mapper.xml中定义的每个sql的parameterType的类型相同 </p><p>4、 Mapper接口方法的输出参数类型和mapper.xml中定义的每个sql的resultType的类型相同</p><h5 id="2-示例"><a href="#2-示例" class="headerlink" title="(2) 示例"></a>(2) 示例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shubao.mapper;<br><br><span class="hljs-keyword">import</span> com.shubao.domain.User;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">findByid</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot; http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 配置mapper标签,namespace属性，作用：唯一的 标识一个Mapper配置文件，保护文件中的标签ID不被污染。注意值不能重复--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.shubao.mapper.UserMapper&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--配置SQL资源：</span><br><span class="hljs-comment">     查询:select标签</span><br><span class="hljs-comment">        属性：</span><br><span class="hljs-comment">         id:唯一标识一个SQL语句参数</span><br><span class="hljs-comment">         resultType:声明使用哪个实体类存储查询的结果。一条结果一个实体类对象存储。</span><br><span class="hljs-comment">         parameterType:声明实参类型。</span><br><span class="hljs-comment">     增加:insert标签</span><br><span class="hljs-comment">     修改:update标签</span><br><span class="hljs-comment">     删除:delete标签</span><br><span class="hljs-comment">     注意：</span><br><span class="hljs-comment">        同一个文件内的标签ID不能重复。</span><br><span class="hljs-comment">    --&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  sql语句抽取  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectUser&quot;</span>&gt;</span><br>        select * from sys_user<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findByid&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;selectUser&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;id != 0&quot;</span>&gt;</span><br>                and id = #&#123;id&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test7</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//获取核心配置文件</span><br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">resourceAsStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis.xml&quot;</span>);<br>    <span class="hljs-comment">//获得session工厂对象</span><br>    <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);<br>    <span class="hljs-comment">//获得session会话对象</span><br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>    <span class="hljs-comment">//执行操作，参数：namespace + id</span><br>    <span class="hljs-type">UserMapper</span> <span class="hljs-variable">userMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.findByid(<span class="hljs-number">15</span>);<br>    System.out.println(<span class="hljs-string">&quot;user = &quot;</span> + user);<br><br>    <span class="hljs-comment">//释放资源</span><br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-MyBatis映射文件深入"><a href="#8-MyBatis映射文件深入" class="headerlink" title="8. MyBatis映射文件深入"></a>8. MyBatis映射文件深入</h3><h4 id="1-动态sql语句"><a href="#1-动态sql语句" class="headerlink" title="1) 动态sql语句"></a>1) 动态sql语句</h4><h5 id="1-动态sql语句概述"><a href="#1-动态sql语句概述" class="headerlink" title="(1) 动态sql语句概述"></a>(1) 动态sql语句概述</h5><blockquote><p><a href="https://mybatis.org/mybatis-3/dynamic-sql.html">https://mybatis.org/mybatis-3/dynamic-sql.html</a></p><p><a href="https://mybatis.org/mybatis-3/zh/dynamic-sql.html">https://mybatis.org/mybatis-3/zh/dynamic-sql.html</a></p><h2 id="Dynamic-SQL"><a href="#Dynamic-SQL" class="headerlink" title="Dynamic SQL"></a>Dynamic SQL</h2><p>One of the most powerful features of MyBatis has always been its Dynamic SQL capabilities. If you have any experience with JDBC or any similar framework, you understand how painful it is to conditionally concatenate strings of SQL together, making sure not to forget spaces or to omit a comma at the end of a list of columns. Dynamic SQL can be downright painful to deal with.</p><p>While working with Dynamic SQL will never be a party, MyBatis certainly improves the situation with a powerful Dynamic SQL language that can be used within any mapped SQL statement.</p><p>The Dynamic SQL elements should be familiar to anyone who has used JSTL or any similar XML based text processors. In previous versions of MyBatis, there were a lot of elements to know and understand. MyBatis 3 greatly improves upon this, and now there are less than half of those elements to work with. MyBatis employs powerful OGNL based expressions to eliminate most of the other elements:</p><ul><li>if</li><li>choose (when, otherwise)</li><li>trim (where, set)</li><li>foreach</li></ul></blockquote><h5 id="2-动态sql之-lt-if-gt"><a href="#2-动态sql之-lt-if-gt" class="headerlink" title="(2) 动态sql之&lt;if&gt;"></a>(2) 动态sql之&lt;if&gt;</h5><p>我们根据实体类的不同取值，使用不同的sql语句来进行查询。比如在id如果不为空时可以根据id查询，如果username不为空时还要加入用户名作为调节。常见于多条件组合查询中。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  多条件查询  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findByCondition&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>    select * from sys_user<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;id != 0&quot;</span>&gt;</span><br>            and id = #&#123;id&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;username != null&quot;</span>&gt;</span><br>            and username = #&#123;username&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;password != null&quot;</span>&gt;</span><br>            and password = #&#123;password&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="3-动态sql之-lt-foreach-gt"><a href="#3-动态sql之-lt-foreach-gt" class="headerlink" title="(3) 动态sql之&lt;foreach&gt;"></a>(3) 动态sql之&lt;foreach&gt;</h5><p>循环执行sql的拼接操作，例如：select * from sys_user where id in (1,2,3);</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findByIds&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;selectUser&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;id in(&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br>            #&#123;id&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-sql片段抽取"><a href="#2-sql片段抽取" class="headerlink" title="2) sql片段抽取"></a>2) sql片段抽取</h4><p>sql中可将重复的sql提取出来，使用时用include引用。达到sql重用的目的。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  sql语句抽取  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectUser&quot;</span>&gt;</span><br>    select * from sys_user<br><span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findByid&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;selectUser&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;id != 0&quot;</span>&gt;</span><br>            and id = #&#123;id&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-typeHandlers标签"><a href="#3-typeHandlers标签" class="headerlink" title="3) typeHandlers标签"></a>3) typeHandlers标签</h4><p>无论是mybatis在预处理语句(PreparedStatement)中设置一个参数时，还是从结果集中取出一个值时，都会用类型处理器将获取的值以合适的方式转换成Java类型。下面是一些默认的类型处理器。</p><table><thead><tr><th>类型处理器</th><th>Java类型</th><th>JDBC类型</th></tr></thead><tbody><tr><td>org.apache.ibatis.type.BooleanTypeHandler</td><td>java.lang.Boolean, boolean</td><td>数据库兼容的BOOLEAN</td></tr><tr><td>org.apache.ibatis.type.ByteTypeHandler</td><td>java.lang.Byte, byte</td><td>数据库兼容的NUMERIC或BYTE</td></tr><tr><td>org.apache.ibatis.type.ShortTypeHandler</td><td>java.lang.Short, short</td><td>数据库兼容的NUMERIC或SHORT INTEGER</td></tr><tr><td>org.apache.ibatis.type.IntegerTypeHandler</td><td>java.lang.Integer, int</td><td>数据库兼容的NUMERIC或INTEGER</td></tr><tr><td>org.apache.ibatis.type.LongTypeHandler</td><td>java.lang.Long, long</td><td>数据库兼容的NUMERIC或LONG INTEGER</td></tr></tbody></table><p>可以重新类型处理器或者创建自己的类型处理器来处理不支持的或非标准的类型。具体做法为：实现org.apache.ibatis.type.TypeHandler接口，或者继承org.apache.ibatis.type.BaseTypeHandler，然后可以选择性的将它映射到一个JDBC类型。例如：一个Java中的Date数据类型，将之存储数据库的时候转换成一个时间戳(1970年至今的毫秒数)，取出来时转换成Java的Date类型，即Java的Date类型与数据库的varchar毫秒值之间的转换。</p><p>开发步骤：</p><p>① 定义一个转换类继承类BaseTypeHandler&lt;T&gt;</p><p>② 覆盖4个未实现的方法，其中setNonNullParameter为Java程序设置数据到数据库的回调方法，getNullableResult为查询时MySQL的字符串类型转换成Java的Type类型中的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNonNullParameter</span><span class="hljs-params">(PreparedStatement ps, <span class="hljs-type">int</span> i, T parameter, JdbcType jdbcType)</span> <span class="hljs-keyword">throws</span> SQLException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Gets the nullable result.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> rs</span><br><span class="hljs-comment"> *          the rs</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> columnName</span><br><span class="hljs-comment"> *          Column name, when configuration &lt;code&gt;useColumnLabel&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> the nullable result</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> SQLException</span><br><span class="hljs-comment"> *           the SQL exception</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> T <span class="hljs-title function_">getNullableResult</span><span class="hljs-params">(ResultSet rs, String columnName)</span> <span class="hljs-keyword">throws</span> SQLException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> T <span class="hljs-title function_">getNullableResult</span><span class="hljs-params">(ResultSet rs, <span class="hljs-type">int</span> columnIndex)</span> <span class="hljs-keyword">throws</span> SQLException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> T <span class="hljs-title function_">getNullableResult</span><span class="hljs-params">(CallableStatement cs, <span class="hljs-type">int</span> columnIndex)</span> <span class="hljs-keyword">throws</span> SQLException;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shubao.handler;<br><br><span class="hljs-keyword">import</span> org.apache.commons.logging.Log;<br><span class="hljs-keyword">import</span> org.apache.commons.logging.LogFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.type.BaseTypeHandler;<br><span class="hljs-keyword">import</span> org.apache.ibatis.type.JdbcType;<br><br><span class="hljs-keyword">import</span> java.sql.CallableStatement;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DateTypeHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseTypeHandler</span>&lt;Date&gt; &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * log.debug(&quot;debug&quot;); //调试</span><br><span class="hljs-comment">     * log.info(&quot;information&quot;); //信息</span><br><span class="hljs-comment">     * log.warn(&quot;warning&quot;); //警告</span><br><span class="hljs-comment">     * log.error(&quot;error&quot;); //错误</span><br><span class="hljs-comment">     * log.fatal(&quot;fatal&quot;); //致命错误</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Log</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LogFactory.getLog(DateTypeHandler.class);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将Java类型转换成数据库需要的类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> ps</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> i</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> parameter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> jdbcType</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> SQLException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNonNullParameter</span><span class="hljs-params">(PreparedStatement ps, <span class="hljs-type">int</span> i, Date parameter, JdbcType jdbcType)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> parameter.getTime();<br>        ps.setLong(i, time);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将数据中类型转换为Java类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> rs 查询出的结果集</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> columnName 要转换的字段名称</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> SQLException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Date <span class="hljs-title function_">getNullableResult</span><span class="hljs-params">(ResultSet rs, String columnName)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-comment">//获得结果集中的数据，将需要转换的数据(long)转换成Date类型，返回</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">aLong</span> <span class="hljs-operator">=</span> rs.getLong(columnName);<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(aLong);<br>        <span class="hljs-keyword">return</span> date;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将数据库中的类型，转换成Java类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> rs</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> columnIndex</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> SQLException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Date <span class="hljs-title function_">getNullableResult</span><span class="hljs-params">(ResultSet rs, <span class="hljs-type">int</span> columnIndex)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-comment">//获得结果集中的数据，将需要转换的数据(long)转换成Date类型，返回</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">aLong</span> <span class="hljs-operator">=</span> rs.getLong(columnIndex);<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(aLong);<br>        <span class="hljs-keyword">return</span> date;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将数据库中的类型，转换成Java类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> cs</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> columnIndex</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> SQLException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Date <span class="hljs-title function_">getNullableResult</span><span class="hljs-params">(CallableStatement cs, <span class="hljs-type">int</span> columnIndex)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">aLong</span> <span class="hljs-operator">=</span> cs.getLong(columnIndex);<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(aLong);<br>        <span class="hljs-keyword">return</span> date;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>⑤ 在mybatis核心配置文件中进行注册</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  注册自定义类型处理器  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">typeHandlers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeHandler</span> <span class="hljs-attr">handler</span>=<span class="hljs-string">&quot;com.shubao.handler.DateTypeHandler&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeHandlers</span>&gt;</span><br></code></pre></td></tr></table></figure><p>⑥ 测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义类型转换器：保存一个对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test6</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//获取核心配置文件</span><br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">resourceAsStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis.xml&quot;</span>);<br>    <span class="hljs-comment">//获得session工厂对象</span><br>    <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);<br>    <span class="hljs-comment">//获得session会话对象</span><br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>    <span class="hljs-comment">//执行操作，参数：namespace + id</span><br>    <span class="hljs-type">UserMapper</span> <span class="hljs-variable">userMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br><br>    <span class="hljs-comment">//创建User对象</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    user.setUsername(<span class="hljs-string">&quot;sakura&quot;</span>);<br>    user.setPassword(<span class="hljs-string">&quot;123456&quot;</span>);<br>    user.setEmail(<span class="hljs-string">&quot;sakura@gmail.com&quot;</span>);<br>    user.setPhoneNum(<span class="hljs-string">&quot;18899523266&quot;</span>);<br>    user.setBirthday(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&quot;2002/05/20&quot;</span>));<br><br>    <span class="hljs-comment">//执行保存操作</span><br>    userMapper.save(user);<br>    <span class="hljs-comment">//提交事务</span><br>    sqlSession.commit();<br>    <span class="hljs-comment">//释放资源</span><br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义类型转换器：查询</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test7</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//获取核心配置文件</span><br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">resourceAsStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis.xml&quot;</span>);<br>    <span class="hljs-comment">//获得session工厂对象</span><br>    <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);<br>    <span class="hljs-comment">//获得session会话对象</span><br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>    <span class="hljs-comment">//执行操作，参数：namespace + id</span><br>    <span class="hljs-type">UserMapper</span> <span class="hljs-variable">userMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.findByid(<span class="hljs-number">15</span>);<br>    System.out.println(<span class="hljs-string">&quot;user = &quot;</span> + user);<br><br>    <span class="hljs-comment">//释放资源</span><br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-plugins标签"><a href="#4-plugins标签" class="headerlink" title="4) plugins标签"></a>4) plugins标签</h4><p>MyBatis可以使用第三方的插件来对功能进行扩展，分页助手PageHelper是将分页的复杂操作进行封装，使用简单的方式即可获得分页的相关数据。</p><p>开发步骤：</p><p>① 导入通用的PageHelper的坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- PageHelper --&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;pagehelper.version&gt;5.3.0&lt;/pagehelper.version&gt; --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">pagehelper.version</span>&gt;</span>3.7.5<span class="hljs-tag">&lt;/<span class="hljs-name">pagehelper.version</span>&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;jsqlparser.version&gt;4.3&lt;/jsqlparser.version&gt; --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">jsqlparser.version</span>&gt;</span>0.9.1<span class="hljs-tag">&lt;/<span class="hljs-name">jsqlparser.version</span>&gt;</span><br><br><br><span class="hljs-comment">&lt;!--  PageHelper插件    --&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment"> https://blog.csdn.net/IPI715718/article/details/83384131</span><br><span class="hljs-comment"> 异常：</span><br><span class="hljs-comment">    org.apache.ibatis.exceptions.PersistenceException:</span><br><span class="hljs-comment">    ### Error building SqlSession.</span><br><span class="hljs-comment">    ### The error may exist in SQL Mapper Configuration</span><br><span class="hljs-comment">    ### Cause: org.apache.ibatis.builder.BuilderException: Error parsing SQL Mapper Configuration. Cause: java.lang.ClassCastException: com.github.pagehelper.PageHelper cannot be cast to org.apache.ibatis.plugin.Interceptor</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> 解决：</span><br><span class="hljs-comment">    我使用的pagehelper的版本是5.1，5.0之后的版本使用com.github.pagehelper.PageInterceptor这个类。</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;pagehelper.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.jsqlparser<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsqlparser<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;jsqlparser.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>② 在MyBatis核心配置文件中配置PageHelper插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  配置分页插件助手  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span> <span class="hljs-attr">interceptor</span>=<span class="hljs-string">&quot;com.github.pagehelper.PageHelper&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 指定方言 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dialect&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mysql&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br></code></pre></td></tr></table></figure><p>③ 测试分页</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 分页插件：PageHelper</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test8</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//获取核心配置文件</span><br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">resourceAsStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis.xml&quot;</span>);<br>    <span class="hljs-comment">//获得session工厂对象</span><br>    <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);<br>    <span class="hljs-comment">//获得session会话对象</span><br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>    <span class="hljs-comment">//执行操作，参数：namespace + id</span><br>    <span class="hljs-type">UserMapper</span> <span class="hljs-variable">userMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br><br>    <span class="hljs-comment">//设置分页的相关参数  当前页、每页显示的条数</span><br>    PageHelper.startPage(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>);<br><br>    List&lt;User&gt; userList = userMapper.findAllForMybatis();<br>    <span class="hljs-keyword">for</span> (User user : userList) &#123;<br>        System.out.println(<span class="hljs-string">&quot;user = &quot;</span> + user);<br>    &#125;<br><br>    <span class="hljs-comment">//获得与分页相关的数据</span><br>    PageInfo&lt;User&gt; pageInfo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageInfo</span>&lt;&gt;(userList);<br>    System.out.println(<span class="hljs-string">&quot;当前页：&quot;</span> + pageInfo.getPageNum());<br>    System.out.println(<span class="hljs-string">&quot;每页显示的条数：&quot;</span> + pageInfo.getPageSize());<br>    System.out.println(<span class="hljs-string">&quot;总条数：&quot;</span> + pageInfo.getTotal());<br>    System.out.println(<span class="hljs-string">&quot;总页数：&quot;</span> + pageInfo.getPages());<br>    System.out.println(<span class="hljs-string">&quot;上一页：&quot;</span> + pageInfo.getPrePage());<br>    System.out.println(<span class="hljs-string">&quot;下一页：&quot;</span> + pageInfo.getNextPage());<br>    System.out.println(<span class="hljs-string">&quot;是否是第一页：&quot;</span> + pageInfo.isIsFirstPage());<br>    System.out.println(<span class="hljs-string">&quot;是否是最后一页：&quot;</span> + pageInfo.isIsLastPage());<br><br>    <span class="hljs-comment">//释放资源</span><br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-MyBatis多表操作"><a href="#9-MyBatis多表操作" class="headerlink" title="9. MyBatis多表操作"></a>9. MyBatis多表操作</h3><h4 id="1-一对一配置：使用-lt-resultMap-gt-做配置"><a href="#1-一对一配置：使用-lt-resultMap-gt-做配置" class="headerlink" title="1) 一对一配置：使用&lt;resultMap&gt;做配置"></a>1) 一对一配置：使用&lt;resultMap&gt;做配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot; http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 配置mapper标签,namespace属性，作用：唯一的 标识一个Mapper配置文件，保护文件中的标签ID不被污染。注意值不能重复--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.shubao.mapper.OrderMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;orderMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;order&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            手动指定字段与实体属性的映射关系</span><br><span class="hljs-comment">                column: 数据表的字段名称</span><br><span class="hljs-comment">                property: 实体的属性名称</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;oid&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;ordertime&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;ordertime&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;total&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;total&quot;</span> /&gt;</span><br><br><span class="hljs-comment">&lt;!--        &lt;result column=&quot;uid&quot; property=&quot;user.id&quot; /&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;result column=&quot;username&quot; property=&quot;user.username&quot; /&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;result column=&quot;email&quot; property=&quot;user.email&quot; /&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;result column=&quot;password&quot; property=&quot;user.password&quot; /&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;result column=&quot;phoneNum&quot; property=&quot;user.phoneNum&quot; /&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;result column=&quot;birthday&quot; property=&quot;user.birthday&quot; /&gt;--&gt;</span><br><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            property：当前实体（order）中的属性名称（private User user）</span><br><span class="hljs-comment">            javaType：当前实体（order）中的属性的类型(User)</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;uid&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;username&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;email&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;password&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;phoneNum&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;phoneNum&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;birthday&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;birthday&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAll&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;orderMap&quot;</span>&gt;</span><br>        select *, o.id oid from sys_order o, sys_user u where o.uid = u.id<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 多表联合查询：一对一</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test9</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//获取核心配置文件</span><br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">resourceAsStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis.xml&quot;</span>);<br>    <span class="hljs-comment">//获得session工厂对象</span><br>    <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);<br>    <span class="hljs-comment">//获得session会话对象</span><br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>    <span class="hljs-comment">//执行操作，参数：namespace + id</span><br>    <span class="hljs-type">OrderMapper</span> <span class="hljs-variable">orderMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(OrderMapper.class);<br><br>    List&lt;Order&gt; orderList = orderMapper.findAll();<br>    <span class="hljs-keyword">for</span> (Order order : orderList) &#123;<br>        System.out.println(<span class="hljs-string">&quot;order = &quot;</span> + order);<br>    &#125;<br><br>    <span class="hljs-comment">//释放资源</span><br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-一对多：使用-lt-resultMap-gt-lt-collection-gt-做配置"><a href="#2-一对多：使用-lt-resultMap-gt-lt-collection-gt-做配置" class="headerlink" title="2) 一对多：使用&lt;resultMap&gt; + &lt;collection&gt;做配置"></a>2) 一对多：使用&lt;resultMap&gt; + &lt;collection&gt;做配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;uid&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;username&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;email&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;password&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;phoneNum&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;phoneNum&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;birthday&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;birthday&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        配置集合信息</span><br><span class="hljs-comment">            property: 集合名称</span><br><span class="hljs-comment">            ofType: 当前集合中的数据类型</span><br><span class="hljs-comment">     --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;orderList&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;order&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 封装order的数据 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;oid&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;ordertime&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;ordertime&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;total&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;total&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAll&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;userMap&quot;</span>&gt;</span><br>    select *, o.id oid from sys_user u, sys_order o where u.id = o.uid<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 多表联合查询：一对多</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test10</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//获取核心配置文件</span><br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">resourceAsStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis.xml&quot;</span>);<br>    <span class="hljs-comment">//获得session工厂对象</span><br>    <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);<br>    <span class="hljs-comment">//获得session会话对象</span><br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>    <span class="hljs-comment">//执行操作，参数：namespace + id</span><br>    <span class="hljs-type">UserMapper</span> <span class="hljs-variable">userMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br><br>    List&lt;User&gt; userList = userMapper.findAll();<br>    <span class="hljs-keyword">for</span> (User user : userList) &#123;<br>        System.out.println(<span class="hljs-string">&quot;user = &quot;</span> + user);<br>    &#125;<br><br>    <span class="hljs-comment">//释放资源</span><br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-多对多：使用-lt-resultMap-gt-lt-collection-gt-做配置"><a href="#3-多对多：使用-lt-resultMap-gt-lt-collection-gt-做配置" class="headerlink" title="3) 多对多：使用&lt;resultMap&gt; + &lt;collection&gt;做配置"></a>3) 多对多：使用&lt;resultMap&gt; + &lt;collection&gt;做配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userRoleMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- user的信息 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;userId&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;username&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;email&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;password&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;phoneNum&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;phoneNum&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;birthday&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;birthday&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- user内部的roleList的信息 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;roles&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;role&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;roleId&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;roleName&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;roleName&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;roleDesc&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;roleDesc&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findUserAndRole&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;userRoleMap&quot;</span>&gt;</span><br>    select * from sys_user u, sys_user_role ur, sys_role r where u.id = ur.userId and ur.roleId = r.id<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 多表联合查询：多对多  三表</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test11</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//获取核心配置文件</span><br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">resourceAsStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis.xml&quot;</span>);<br>    <span class="hljs-comment">//获得session工厂对象</span><br>    <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);<br>    <span class="hljs-comment">//获得session会话对象</span><br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>    <span class="hljs-comment">//执行操作，参数：namespace + id</span><br>    <span class="hljs-type">UserMapper</span> <span class="hljs-variable">userMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br><br>    List&lt;User&gt; userList = userMapper.findUserAndRole();<br>    <span class="hljs-keyword">for</span> (User user : userList) &#123;<br>        System.out.println(<span class="hljs-string">&quot;user = &quot;</span> + user);<br>    &#125;<br><br>    <span class="hljs-comment">//释放资源</span><br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="10-MyBatis的注解开发"><a href="#10-MyBatis的注解开发" class="headerlink" title="10. MyBatis的注解开发"></a>10. MyBatis的注解开发</h3><h4 id="1-常用注解"><a href="#1-常用注解" class="headerlink" title="1) 常用注解"></a>1) 常用注解</h4><ul><li>@Insert：实现新增</li><li>@Update：实现更新</li><li>@Delete：实现删除</li><li>@Select：实现查询</li><li>@Result：实现结果集封装</li><li>@Results：可以与@Result一起使用，封装多个结果集</li><li>@One：实现一对一结果集封装</li><li>@Many：实现一对多结果集封装</li></ul><h4 id="2-MyBatis的增删改查"><a href="#2-MyBatis的增删改查" class="headerlink" title="2) MyBatis的增删改查"></a>2) MyBatis的增删改查</h4><p>修改MyBatis的核心配置文件，我们使用了注解替代的映射文件，所以我们只需要加载使用了注解的Mapper接口即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  加载映射文件  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/shubao/mapper/UserMapper.xml&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/shubao/mapper/OrderMapper.xml&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><p>或者指定扫描包含映射关系的接口所在的包也可以</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--加载映射关系--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--指定接口所在的包--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.shubao.mapper&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Insert(&quot;insert into sys_user values(#&#123;id&#125;, #&#123;username&#125;, #&#123;email&#125;, #&#123;password&#125;, #&#123;phoneNum&#125;, #&#123;birthday&#125;)&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">(User user)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Select(&quot;select * from sys_user&quot;)</span><br>List&lt;User&gt; <span class="hljs-title function_">findAllForMybatis</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException;<br><br><span class="hljs-meta">@Select(&quot;select * from sys_user where id = #&#123;id&#125;&quot;)</span><br>User <span class="hljs-title function_">findOneForMybatis</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> <span class="hljs-keyword">throws</span> IOException;<br><br><span class="hljs-meta">@Select(&quot;select * from sys_order where uid = #&#123;uid&#125;&quot;)</span><br><span class="hljs-keyword">public</span> List&lt;Order&gt; <span class="hljs-title function_">findByUid</span><span class="hljs-params">(<span class="hljs-type">int</span> uid)</span>;<br></code></pre></td></tr></table></figure><h4 id="3-MyBatis的注解实现复杂映射开发"><a href="#3-MyBatis的注解实现复杂映射开发" class="headerlink" title="3) MyBatis的注解实现复杂映射开发"></a>3) MyBatis的注解实现复杂映射开发</h4><p>实现复杂关系映射之前我们可以在映射文件中通过配置&lt;resultMap&gt;来实现，使用注解开发后，可以使用@Results注解，@Result注解，@One注解，@Many注解组合完成复杂关系的配置</p><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Results</td><td>代替的是标签<resultMap>。该注解中可以使用单个@Result注解，也可以使用@Result集合。使用格式：@Results({@Result(), @Result()})或@Results(@Result())</td></tr><tr><td>@Result</td><td>代替了<id>标签和<result>标签<br>@Result中属性介绍：<br>column：数据库的列名<br>property：需要装配的属性名<br>one：需要使用的@One注解（@Result(one&#x3D;@One())）<br>many：需要使用的@Many注解（@Result(many&#x3D;@many())）</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Select(&quot;select * from sys_user&quot;)</span><br><span class="hljs-meta">@Results(&#123;</span><br><span class="hljs-meta">    @Result(id = true, column = &quot;id&quot;, property = &quot;id&quot;),</span><br><span class="hljs-meta">    @Result(column = &quot;username&quot;, property = &quot;username&quot;),</span><br><span class="hljs-meta">    @Result(column = &quot;email&quot;, property = &quot;email&quot;),</span><br><span class="hljs-meta">    @Result(column = &quot;password&quot;, property = &quot;password&quot;),</span><br><span class="hljs-meta">    @Result(column = &quot;phoneNum&quot;, property = &quot;phoneNum&quot;),</span><br><span class="hljs-meta">    @Result(column = &quot;birthday&quot;, property = &quot;birthday&quot;),</span><br><span class="hljs-meta">    @Result(</span><br><span class="hljs-meta">        property = &quot;orderList&quot;,</span><br><span class="hljs-meta">        column = &quot;id&quot;,</span><br><span class="hljs-meta">        javaType = List.class,</span><br><span class="hljs-meta">        many = @Many(select = &quot;com.shubao.mapper.OrderMapper.findByUid&quot;)</span><br><span class="hljs-meta">    )</span><br><span class="hljs-meta">&#125;)</span><br><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">findUserAndOrderAll</span><span class="hljs-params">()</span>;<br><br><br><span class="hljs-meta">@Select(&quot;SELECT * FROM sys_user&quot;)</span><br><span class="hljs-meta">@Results(&#123;</span><br><span class="hljs-meta">    @Result(id = true, column = &quot;id&quot;, property = &quot;id&quot;),</span><br><span class="hljs-meta">    @Result(column = &quot;username&quot;, property = &quot;username&quot;),</span><br><span class="hljs-meta">    @Result(column = &quot;email&quot;, property = &quot;email&quot;),</span><br><span class="hljs-meta">    @Result(column = &quot;password&quot;, property = &quot;password&quot;),</span><br><span class="hljs-meta">    @Result(column = &quot;phoneNum&quot;, property = &quot;phoneNum&quot;),</span><br><span class="hljs-meta">    @Result(column = &quot;birthday&quot;, property = &quot;birthday&quot;),</span><br><span class="hljs-meta">    @Result(</span><br><span class="hljs-meta">        property = &quot;roles&quot;,</span><br><span class="hljs-meta">        column = &quot;id&quot;,</span><br><span class="hljs-meta">        javaType = List.class,</span><br><span class="hljs-meta">        many = @Many(select = &quot;com.shubao.mapper.RoleMapper.findByUid&quot;)</span><br><span class="hljs-meta">    )</span><br><span class="hljs-meta">&#125;)</span><br><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">findUserAndRoleAll</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//    @Select(&quot;select *, o.id oid from sys_order o, sys_user u where o.uid = u.id&quot;)</span><br><span class="hljs-comment">//    @Results(&#123;</span><br><span class="hljs-comment">//            @Result(column = &quot;oid&quot;, property = &quot;id&quot;),</span><br><span class="hljs-comment">//            @Result(column = &quot;ordertime&quot;, property = &quot;ordertime&quot;),</span><br><span class="hljs-comment">//            @Result(column = &quot;total&quot;, property = &quot;total&quot;),</span><br><span class="hljs-comment">//            @Result(column = &quot;uid&quot;, property = &quot;user.id&quot;),</span><br><span class="hljs-comment">//            @Result(column = &quot;username&quot;, property = &quot;user.username&quot;),</span><br><span class="hljs-comment">//            @Result(column = &quot;email&quot;, property = &quot;user.email&quot;),</span><br><span class="hljs-comment">//            @Result(column = &quot;password&quot;, property = &quot;user.password&quot;),</span><br><span class="hljs-comment">//            @Result(column = &quot;phoneNum&quot;, property = &quot;user.phoneNum&quot;),</span><br><span class="hljs-comment">//            @Result(column = &quot;birthday&quot;, property = &quot;user.birthday&quot;)</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//    &#125;)</span><br><span class="hljs-comment">//    public List&lt;Order&gt; findAll();</span><br><br>    <span class="hljs-meta">@Select(&quot;select * from sys_order o, sys_user u where o.uid = u.id&quot;)</span><br>    <span class="hljs-meta">@Results(&#123;</span><br><span class="hljs-meta">            @Result(column = &quot;oid&quot;, property = &quot;id&quot;),</span><br><span class="hljs-meta">            @Result(column = &quot;ordertime&quot;, property = &quot;ordertime&quot;),</span><br><span class="hljs-meta">            @Result(column = &quot;total&quot;, property = &quot;total&quot;),</span><br><span class="hljs-meta">            @Result(</span><br><span class="hljs-meta">                    property = &quot;user&quot;,  //要封装的属性名</span><br><span class="hljs-meta">                    column = &quot;uid&quot;,  //根据哪个字段查询user表的数据</span><br><span class="hljs-meta">                    javaType = User.class,  //要封装的实体类型</span><br><span class="hljs-meta">                    //select属性，代表查询哪个接口的方法获得数据</span><br><span class="hljs-meta">                    one = @One(select = &quot;com.shubao.mapper.UserMapper.findOneForMybatis&quot;)</span><br><span class="hljs-meta">            )</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">    &#125;)</span><br>    <span class="hljs-keyword">public</span> List&lt;Order&gt; <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@One(一对一)</td><td>代替了标签，是多表查询的关键，在注解中用来指定子查询返回单一对象。<br>@One注解属性介绍： <br/>select: 指定用来多表查询的 sqlmapper<br/>使用格式：@Result(column&#x3D;” “,property&#x3D;””,one&#x3D;@One(select&#x3D;””))</td></tr><tr><td>@Many(多对多)</td><td>代替了标签, 是多表查询的关键，在注解中用来指定子查询返回对象集合。 <br/>使用格式：@Result(property&#x3D;””,column&#x3D;””,many&#x3D;@Many(select&#x3D;””))</td></tr></tbody></table><h2 id="十七、SSM框架整合"><a href="#十七、SSM框架整合" class="headerlink" title="十七、SSM框架整合"></a>十七、SSM框架整合</h2><h3 id="1-整合思路"><a href="#1-整合思路" class="headerlink" title="1. 整合思路"></a>1. 整合思路</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询操作</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//获取核心配置文件</span><br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">resourceAsStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis.xml&quot;</span>);<br>    <span class="hljs-comment">//获得session工厂对象</span><br>    <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);<br>    <span class="hljs-comment">//获得session会话对象</span><br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>    <span class="hljs-comment">//执行操作，参数：namespace + id</span><br>    List&lt;User&gt; userList = sqlSession.selectList(<span class="hljs-string">&quot;userMapper.findAllForMybatis&quot;</span>);<br>    <span class="hljs-comment">//打印数据</span><br>    System.out.println(<span class="hljs-string">&quot;userList = &quot;</span> + userList);<br>    <span class="hljs-comment">//释放资源</span><br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>将Session工厂交给Spring容器管理，从容器中获得执行操作的Mapper实例即可</li><li>将事务的控制权交给Spring容器进行声明式事务控制</li></ul><h4 id="1-将SqlSessionFactory配置到Spring容器中"><a href="#1-将SqlSessionFactory配置到Spring容器中" class="headerlink" title="(1) 将SqlSessionFactory配置到Spring容器中"></a>(1) 将SqlSessionFactory配置到Spring容器中</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  1.加载外部的properties文件  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:jdbc.properties&quot;</span> /&gt;</span><br><br><span class="hljs-comment">&lt;!--  2.配置数据源bean  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClass&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbcUrl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--配置MyBatis的SqlSessionFactory--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!--加载MyBatis核心配置你文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mybatis.xml&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-扫描Mapper，让Spring容器产生Mapper实现类-applicationContext-xml"><a href="#2-扫描Mapper，让Spring容器产生Mapper实现类-applicationContext-xml" class="headerlink" title="(2) 扫描Mapper，让Spring容器产生Mapper实现类(applicationContext.xml)"></a>(2) 扫描Mapper，让Spring容器产生Mapper实现类(applicationContext.xml)</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--扫描mapper所在的包，为mapper创建实现类--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;basePackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.shubao.mapper&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-配置声明式事务控制"><a href="#3-配置声明式事务控制" class="headerlink" title="(3) 配置声明式事务控制"></a>(3) 配置声明式事务控制</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  Spring声明式事务管理  --&gt;</span><br>    <span class="hljs-comment">&lt;!--  目标对象、内部的方式就是切点(bean注入见applicationContext-service.xml)  --&gt;</span><br><span class="hljs-comment">&lt;!--    &lt;bean id=&quot;accountService&quot; class=&quot;com.shubao.service.impl.AccountServiceImpl&quot;&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;property name=&quot;accountDao&quot; ref=&quot;accountDao&quot; /&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--    &lt;/bean&gt;--&gt;</span><br><br><span class="hljs-comment">&lt;!--  配置平台事务管理器  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--  通知 事务的增强  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txAdvice&quot;</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;transfer&quot;</span> <span class="hljs-attr">isolation</span>=<span class="hljs-string">&quot;REPEATABLE_READ&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;false&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;save&quot;</span> <span class="hljs-attr">isolation</span>=<span class="hljs-string">&quot;REPEATABLE_READ&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;false&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;find&quot;</span> <span class="hljs-attr">isolation</span>=<span class="hljs-string">&quot;REPEATABLE_READ&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;tx:method name=&quot;*&quot; /&gt;--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--  配置事务的aop的织入  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txPointcut&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.shubao.service.impl.*.*(..))&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;txAdvice&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;txPointcut&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--  事务的注解驱动  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:annotation-driven</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-完整配置"><a href="#2-完整配置" class="headerlink" title="2. 完整配置"></a>2. 完整配置</h3><blockquote><p><a href="https://github.com/Chris-z-su/spring">https://github.com/Chris-z-su/spring</a></p></blockquote><p>applicationContex.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:tx</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/tx&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       &quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  注入方式采用注解的方式  --&gt;</span><br>    <span class="hljs-comment">&lt;!--  引入service配置文件  --&gt;</span><br><span class="hljs-comment">&lt;!--    &lt;import resource=&quot;applicationContext-user-service.xml&quot; /&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!--  引入dao配置文件  --&gt;</span><br><span class="hljs-comment">&lt;!--    &lt;import resource=&quot;applicationContext-user-dao.xml&quot; /&gt;--&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  配置组件扫描  --&gt;</span><br><span class="hljs-comment">&lt;!--    &lt;context:component-scan base-package=&quot;com.shubao.service,com.shubao.dao&quot; /&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--    &lt;context:component-scan base-package=&quot;com.shubao&quot; /&gt;--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.shubao&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 排除controller的扫描：因为controller会被SpringMVC管理，被SpringMVC扫描 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">context:exclude-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Controller&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  1.加载外部的properties文件  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:jdbc.properties&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  2.配置数据源bean  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClass&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbcUrl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  3.jdbc模板对象  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jdbcTemplate&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  Spring声明式事务管理  --&gt;</span><br>    <span class="hljs-comment">&lt;!--  目标对象、内部的方式就是切点(bean注入见applicationContext-service.xml)  --&gt;</span><br><span class="hljs-comment">&lt;!--    &lt;bean id=&quot;accountService&quot; class=&quot;com.shubao.service.impl.AccountServiceImpl&quot;&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;property name=&quot;accountDao&quot; ref=&quot;accountDao&quot; /&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--    &lt;/bean&gt;--&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  配置平台事务管理器  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  通知 事务的增强  --&gt;</span><br><span class="hljs-comment">&lt;!--    &lt;tx:advice id=&quot;txAdvice&quot; transaction-manager=&quot;transactionManager&quot;&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;tx:attributes&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;tx:method name=&quot;transfer&quot; isolation=&quot;REPEATABLE_READ&quot; propagation=&quot;REQUIRED&quot; read-only=&quot;false&quot; /&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;tx:method name=&quot;save&quot; isolation=&quot;REPEATABLE_READ&quot; propagation=&quot;REQUIRED&quot; read-only=&quot;false&quot; /&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;tx:method name=&quot;find&quot; isolation=&quot;REPEATABLE_READ&quot; propagation=&quot;REQUIRED&quot; read-only=&quot;true&quot; /&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--            &amp;lt;!&amp;ndash;&lt;tx:method name=&quot;*&quot; /&gt;&amp;ndash;&amp;gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;/tx:attributes&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--    &lt;/tx:advice&gt;--&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  配置事务的aop的织入  --&gt;</span><br><span class="hljs-comment">&lt;!--    &lt;aop:config&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;aop:pointcut id=&quot;txPointcut&quot; expression=&quot;execution(* com.shubao.service.impl.*.*(..))&quot; /&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;aop:advisor advice-ref=&quot;txAdvice&quot; pointcut-ref=&quot;txPointcut&quot; /&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--    &lt;/aop:config&gt;--&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  事务的注解驱动  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:annotation-driven</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!--配置sessionFactory--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!--加载MyBatis核心配置你文件--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mybatis.xml&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--扫描mapper所在的包，为mapper创建实现类--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;basePackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.shubao.mapper&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>mybatis.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  通过properties标签加载外部properties文件  --&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;properties resource=&quot;jdbc.properties&quot; /&gt;--&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  自定义别名  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;typeAlias type=&quot;com.shubao.domain.User&quot; alias=&quot;user&quot; /&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;typeAlias type=&quot;com.shubao.domain.Order&quot; alias=&quot;order&quot; /&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;typeAlias type=&quot;com.shubao.domain.Role&quot; alias=&quot;role&quot; /&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;typeAlias type=&quot;com.shubao.domain.Account&quot; alias=&quot;account&quot; /&gt;--&gt;</span><br>        <span class="hljs-comment">&lt;!--    扫描domain下所有实体类    --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.shubao.domain&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  注册自定义类型处理器  --&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;typeHandlers&gt;--&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;typeHandler handler=&quot;com.shubao.handler.DateTypeHandler&quot; /&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;/typeHandlers&gt;--&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--  配置分页插件助手  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span> <span class="hljs-attr">interceptor</span>=<span class="hljs-string">&quot;com.github.pagehelper.PageHelper&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 指定方言 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dialect&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mysql&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  数据源环境  --&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;environments default=&quot;developement&quot;&gt;--&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;environment id=&quot;developement&quot;&gt;--&gt;</span><br>            <span class="hljs-comment">&lt;!--&lt;transactionManager type=&quot;JDBC&quot; /&gt;--&gt;</span><br>            <span class="hljs-comment">&lt;!--&lt;dataSource type=&quot;POOLED&quot;&gt;--&gt;</span><br>                <span class="hljs-comment">&lt;!--&lt;property name=&quot;driver&quot; value=&quot;$&#123;jdbc.driver&#125;&quot; /&gt;--&gt;</span><br>                <span class="hljs-comment">&lt;!--&lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot; /&gt;--&gt;</span><br>                <span class="hljs-comment">&lt;!--&lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot; /&gt;--&gt;</span><br>                <span class="hljs-comment">&lt;!--&lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot; /&gt;--&gt;</span><br>            <span class="hljs-comment">&lt;!--&lt;/dataSource&gt;--&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;/environment&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;/environments&gt;--&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  加载映射文件  --&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;mappers&gt;--&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;mapper resource=&quot;com/shubao/mapper/UserMapper.xml&quot; /&gt;--&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;mapper resource=&quot;com/shubao/mapper/OrderMapper.xml&quot; /&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;/mappers&gt;--&gt;</span><br><br>    <span class="hljs-comment">&lt;!--加载映射关系--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--指定接口所在的包--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.shubao.mapper&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://java.sun.com/xml/ns/j2ee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd &quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;2.4&quot;</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">display-name</span>&gt;</span>Archetype Created Web Application<span class="hljs-tag">&lt;/<span class="hljs-name">display-name</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 全局初始化参数 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 配置监听器 --&gt;</span><br>  <span class="hljs-comment">&lt;!-- 自定义监听器 --&gt;</span><br><span class="hljs-comment">&lt;!--  &lt;listener&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--    &lt;listener-class&gt;com.shubao.listener.ContextLoaderListener&lt;/listener-class&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--  &lt;/listener&gt;--&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 导入spring-web的监听器 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 配置普通的servlet --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>userServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.shubao.web.UserServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 配置Spring MVC的前端控制器 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!--配置全局过滤器filter--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>userServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/userServlet<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><p>jdbc.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="hljs-attr">jdbc.driver</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-comment">#jdbc.url=jdbc:mysql://localhost:3306/wollo</span><br><span class="hljs-attr">jdbc.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/wollo?characterEncoding=utf8</span><br><span class="hljs-attr">jdbc.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">jdbc.password</span>=<span class="hljs-string">1106135</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux环境下weblogic的安装与配置</title>
    <link href="/2021/08/11/Linux%E7%8E%AF%E5%A2%83%E4%B8%8Bweblogic%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <url>/2021/08/11/Linux%E7%8E%AF%E5%A2%83%E4%B8%8Bweblogic%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong><strong>版本：</strong></strong></p><blockquote><p>Java：jdk1.8.0_291<br>weblogic：Oracle WebLogic Server 12.2.1.4(fmw_12.2.1.4.0_wls)</p></blockquote><p><strong><strong>下载地址：</strong></strong><br>jdk:</p><blockquote><p><a href="https://www.oracle.com/java/technologies/java-se-glance.htm">https://www.oracle.com/java/technologies/java-se-glance.htm</a></p></blockquote><p>weblogic:</p><blockquote><p><a href="https://www.oracle.com/middleware/technologies/weblogic-server-downloads.htm">https://www.oracle.com/middleware/technologies/weblogic-server-downloads.htm</a></p></blockquote><p>相关资料：</p><blockquote><p>「weblogic」<a href="https://www.aliyundrive.com/s/HQx6SURUaoa">https://www.aliyundrive.com/s/HQx6SURUaoa</a> 提取码: 0x8p<br>点击链接保存，或者复制本段内容，打开「阿里云盘」APP ，无需下载极速在线查看，视频原画倍速播放。</p></blockquote><h1 id="一、安装jdk"><a href="#一、安装jdk" class="headerlink" title="一、安装jdk"></a>一、安装jdk</h1><h2 id="1-上传jdk到任意目录下"><a href="#1-上传jdk到任意目录下" class="headerlink" title="1) 上传jdk到任意目录下"></a>1) 上传jdk到任意目录下</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost wollo]<span class="hljs-comment"># pwd</span><br>/usr/local/wollo<br>[root@localhost wollo]<span class="hljs-comment"># ll</span><br>-rw-r--r--. 1 root root 144935989 7月  17 09:33 jdk-8u291-linux-x64.tar.gz<br>[root@localhost wollo]<span class="hljs-comment"># </span><br></code></pre></td></tr></table></figure><h2 id="2-解压"><a href="#2-解压" class="headerlink" title="2) 解压"></a>2) 解压</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost wollo]<span class="hljs-comment"># tar -xzvf jdk-8u291-linux-x64.tar.gz</span><br></code></pre></td></tr></table></figure><h2 id="3-移动安装目录"><a href="#3-移动安装目录" class="headerlink" title="3) 移动安装目录"></a>3) 移动安装目录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost wollo]<span class="hljs-comment"># mv jdk1.8.0_291 /usr/local/</span><br></code></pre></td></tr></table></figure><h2 id="4-配置环境变量"><a href="#4-配置环境变量" class="headerlink" title="4) 配置环境变量"></a>4) 配置环境变量</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost wollo]<span class="hljs-comment"># vim /etc/profile</span><br><span class="hljs-comment">#export PATH USER LOGNAME MAIL HOSTNAME HISTSIZE HISTCONTROL</span><br><span class="hljs-built_in">export</span> JAVA_HOME=/usr/local/jdk1.8.0_291<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$JAVA_HOME</span>/bin:<span class="hljs-variable">$PATH</span><br><span class="hljs-built_in">export</span> CLASSPATH=.:<span class="hljs-variable">$JAVA_HOME</span>/lib/dt.jar:<span class="hljs-variable">$JAVA_HOME</span>/lib/tools.jar<br>[root@localhost wollo]<span class="hljs-comment"># source /etc/profile</span><br><br></code></pre></td></tr></table></figure><h2 id="5-查看Java版本，验证是否安装成功"><a href="#5-查看Java版本，验证是否安装成功" class="headerlink" title="5) 查看Java版本，验证是否安装成功"></a>5) 查看Java版本，验证是否安装成功</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost wollo]<span class="hljs-comment"># Java -version</span><br></code></pre></td></tr></table></figure><blockquote><p>附：查看jdk<br>1.whereis java<br>2.which java （java执行路径）</p></blockquote><p>附：我安装jdk1.6、jdk1.7后，使用Java -version命令，发现报错了：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs subunit">[root@10 jdk1.6]# java -version<br><span class="hljs-keyword">Error </span>occurred during initialization of VM<br>Unable to load native library: libnsl.so.1: cannot open shared object file: No such file or directory<br></code></pre></td></tr></table></figure><p>解决：<br>执行以下命令：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> libnsl<br></code></pre></td></tr></table></figure><p>参考：<a href="https://blog.csdn.net/star_star_91/article/details/109395530">https://blog.csdn.net/star_star_91/article/details/109395530</a></p><h1 id="二、安装weblogic"><a href="#二、安装weblogic" class="headerlink" title="二、安装weblogic"></a>二、安装weblogic</h1><h2 id="1-创建及配置用户信息"><a href="#1-创建及配置用户信息" class="headerlink" title="1.创建及配置用户信息"></a>1.创建及配置用户信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.创建用户目录<br>[root@192 ~]<span class="hljs-comment"># mkdir -p /home/weblogic</span><br><br>2.创建用户<br>[root@192 ~]<span class="hljs-comment"># groupadd weblogic</span><br><br>3.给目录home最大权限<br>[root@192 ~]<span class="hljs-comment"># chmod 777 /home</span><br><br>4.添加组<br>[root@192 ~]<span class="hljs-comment"># useradd -g weblogic -d /home/weblogic/ weblogic</span><br><br>5.设置密码<br>[root@192 ~]<span class="hljs-comment"># passwd weblogic  </span><br>用户名：weblogic  <br>密码：5E4TmUzv<br><br>6.赋权限<br>[root@192 ~]<span class="hljs-comment"># chown -R weblogic:weblogic /home</span><br><br>7.切换用户<br>[root@192 ~]<span class="hljs-comment"># su weblogic</span><br></code></pre></td></tr></table></figure><h2 id="2-准备"><a href="#2-准备" class="headerlink" title="2.准备"></a>2.准备</h2><h3 id="1）创建oraInventory目录"><a href="#1）创建oraInventory目录" class="headerlink" title="1）创建oraInventory目录"></a>1）创建oraInventory目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[weblogic@dcyscxcbap01 /]<span class="hljs-comment"># mkdir /home/oraInventory</span><br></code></pre></td></tr></table></figure><h3 id="2-创建weblogic安装目录"><a href="#2-创建weblogic安装目录" class="headerlink" title="2) 创建weblogic安装目录"></a>2) 创建weblogic安装目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[weblogic@dcyscxcbap01 /]<span class="hljs-comment"># mkdir /home/weblogic12</span><br></code></pre></td></tr></table></figure><h3 id="3）配置文件目录"><a href="#3）配置文件目录" class="headerlink" title="3）配置文件目录"></a>3）配置文件目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[weblogic@dcyscxcbap01 /]<span class="hljs-comment"># mkdir /home/install</span><br>[weblogic@dcyscxcbap01 /]<span class="hljs-comment"># cd /home/install</span><br></code></pre></td></tr></table></figure><h4 id="a-上传fmw-12-2-1-4-0-wls-jar到install目录"><a href="#a-上传fmw-12-2-1-4-0-wls-jar到install目录" class="headerlink" title="a.  上传fmw_12.2.1.4.0_wls.jar到install目录"></a>a.  上传fmw_12.2.1.4.0_wls.jar到install目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[weblogic@dcyscxcbap01 install]$ ll<br>总用量 846428<br>-rwxr-xr-x. 1 weblogic weblogic 866733871 7月  17 10:13 fmw_12.2.1.4.0_wls.jar<br>[weblogic@dcyscxcbap01 install]$<br></code></pre></td></tr></table></figure><h4 id="b-新建oraInst-loc文件"><a href="#b-新建oraInst-loc文件" class="headerlink" title="b.  新建oraInst.loc文件"></a>b.  新建oraInst.loc文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[weblogic@dcyscxcbap01 install]$ vim oraInst.loc <br>inventory_loc=/home/oraInventory<br>inst_group=weblogic<br></code></pre></td></tr></table></figure><h4 id="c-新建wls12c-resp文件"><a href="#c-新建wls12c-resp文件" class="headerlink" title="c.  新建wls12c.resp文件"></a>c.  新建wls12c.resp文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs bash">[weblogic@dcyscxcbap01 install]$ vim wls12c.resp<br><br>[ENGINE]<br><br><span class="hljs-comment">#DO NOT CHANGE THIS.</span><br>Response File Version=1.0.0.0.0<br><br>[GENERIC]<br><br><span class="hljs-comment">#Set this to true if you wish to skip software updates</span><br>DECLINE_AUTO_UPDATES=<span class="hljs-literal">true</span><br><br><span class="hljs-comment">#My Oracle Support User Name</span><br>MOS_USERNAME=<br><br><span class="hljs-comment">#My Oracle Support Password</span><br>MOS_PASSWORD=&lt;SECURE VALUE&gt;<br><br><span class="hljs-comment">#If the Software updates are already downloaded and available on your local system, then specify the path to the directory where these patches are available and set SPECIFY_DOWNLOAD_LOCATION to true</span><br>AUTO_UPDATES_LOCATION=<br><br><span class="hljs-comment">#Proxy Server Name to connect to My Oracle Support</span><br>SOFTWARE_UPDATES_PROXY_SERVER=<br><br><span class="hljs-comment">#Proxy Server Port</span><br>SOFTWARE_UPDATES_PROXY_PORT=<br><br><span class="hljs-comment">#Proxy Server Username</span><br>SOFTWARE_UPDATES_PROXY_USER=<br><br><span class="hljs-comment">#Proxy Server Password</span><br>SOFTWARE_UPDATES_PROXY_PASSWORD=&lt;SECURE VALUE&gt;<br><br><span class="hljs-comment">#The oracle home location. This can be an existing Oracle Home or a new Oracle Home</span><br>ORACLE_HOME=/home/weblogic12/wls_12c<br><br><span class="hljs-comment">#Set this variable value to the Installation Type selected. e.g. WebLogic Server, Coherence, Complete with Examples.</span><br>INSTALL_TYPE=WebLogic Server<br><br><span class="hljs-comment">#Provide the My Oracle Support Username. If you wish to ignore Oracle Configuration Manager configuration provide empty string for user name.</span><br>MYORACLESUPPORT_USERNAME=<br><br><span class="hljs-comment">#Provide the My Oracle Support Password</span><br>MYORACLESUPPORT_PASSWORD=&lt;SECURE VALUE&gt;<br><br><span class="hljs-comment">#Set this to true if you wish to decline the security updates. Setting this to true and providing empty string for My Oracle Support username will ignore the Oracle Configuration Manager configuration</span><br>DECLINE_SECURITY_UPDATES=<span class="hljs-literal">true</span><br><br><span class="hljs-comment">#Set this to true if My Oracle Support Password is specified</span><br>SECURITY_UPDATES_VIA_MYORACLESUPPORT=<span class="hljs-literal">false</span><br><br><span class="hljs-comment">#Provide the Proxy Host</span><br>PROXY_HOST=<br><br><span class="hljs-comment">#Provide the Proxy Port</span><br>PROXY_PORT=<br><br><span class="hljs-comment">#Provide the Proxy Username</span><br>PROXY_USER=<br><br><span class="hljs-comment">#Provide the Proxy Password</span><br>PROXY_PWD=&lt;SECURE VALUE&gt;<br><br><span class="hljs-comment">#Type String (URL format) Indicates the OCM Repeater URL which should be of the format [scheme[Http/Https]]://[repeater host]:[repeater port]</span><br>COLLECTOR_SUPPORTHUB_URL=<br><br></code></pre></td></tr></table></figure><h2 id="3-安装"><a href="#3-安装" class="headerlink" title="3.安装"></a>3.安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs bash">[weblogic@dcyscxcbap01 install]$ ll<br>总用量 846428<br>-rwxr-xr-x. 1 weblogic weblogic 866733871 7月  17 10:13 fmw_12.2.1.4.0_wls.jar<br>-rwxr-xr-x. 1 weblogic weblogic        62 7月  17 10:15 oraInst.loc<br>-rwxr-xr-x. 1 weblogic weblogic      1928 7月  17 16:24 wls12c.resp<br>[weblogic@dcyscxcbap01 install]$ java -jar fmw_12.2.1.4.0_wls.jar -silent -responseFile /home/install/wls12c.resp -invPtrLoc /home/install/oraInst.loc<br>启动程序日志文件为/tmp/OraInstall2021-07-17_04-38-00PM/launcher2021-07-17_04-38-00PM.<span class="hljs-built_in">log</span>。<br>正在提取安装程序... . . . 完成<br>检查 CPU 速度是否大于 300 MHz。   实际为 2419.200 MHz    通过<br>检查交换空间: 必须大于 512 MB。   实际为 1639 MB    通过<br>检查此平台是否需要 64 位 JVM。   实际为64    通过 (不需要 64 位)<br>检查临时空间: 必须大于 300 MB。   实际为 3437 MB    通过<br>准备从/tmp/OraInstall2021-07-17_04-38-00PM启动 Oracle Universal Installer<br>日志:/tmp/OraInstall2021-07-17_04-38-00PM/install2021-07-17_04-38-00PM.<span class="hljs-built_in">log</span><br>版权所有 (c) 1996, 2019, Oracle 和/或其关联公司。保留所有权利。<br>正在读取响应文件...<br>跳过软件更新<br>开始检查: CertifiedVersions<br>预期的结果: oracle-6, oracle-7, redhat-7, redhat-6, SuSE-11, SuSE-12, SuSE-15之一<br>实际结果: redhat-null<br>检查完成。此次检查的总体结果为: 通过<br>CertifiedVersions 检查: 成功。<br><br><br>开始检查: CheckJDKVersion<br>预期的结果: 1.8.0_191<br>实际结果: 1.8.0_291<br>检查完成。此次检查的总体结果为: 通过<br>CheckJDKVersion 检查: 成功。<br><br><br>已启用此会话的验证。<br>正在验证数据<br>复制文件<br>完成百分比: 10<br>完成百分比: 20<br>完成百分比: 30<br>完成百分比: 40<br>完成百分比: 50<br>完成百分比: 60<br>完成百分比: 70<br>完成百分比: 80<br>完成百分比: 90<br>完成百分比: 100<br><br>Oracle Fusion Middleware 12c WebLogic Server 和 Coherence 12.2.1.4.0 的 安装 已成功完成。<br>日志已成功复制到/home/oraInventory/logs。<br>[weblogic@dcyscxcbap01 install]$ <br></code></pre></td></tr></table></figure><h1 id="三、weblogic域安装与配置："><a href="#三、weblogic域安装与配置：" class="headerlink" title="三、weblogic域安装与配置："></a>三、weblogic域安装与配置：</h1><blockquote><p><a href="https://chris-z-su.github.io/2021/08/03/Linux%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%9A%84weblogic%E5%9F%9F%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/">Linux环境下的weblogic域的创建与配置</a></p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux环境下的weblogic域的创建与配置</title>
    <link href="/2021/08/03/Linux%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%9A%84weblogic%E5%9F%9F%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <url>/2021/08/03/Linux%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%9A%84weblogic%E5%9F%9F%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="weblogic创建新域"><a href="#weblogic创建新域" class="headerlink" title="weblogic创建新域"></a>weblogic创建新域</h2><p><strong><strong>版本：</strong></strong></p><blockquote><p>Java：jdk1.8.0_291<br>weblogic：Oracle WebLogic Server 12.2.1.4(fmw_12.2.1.4.0_wls)</p></blockquote><p><em>说明：这只是weblogic创建域的一种方式，还可以使用py脚本或者其他脚本执行去创建。这是我创建成功的示例。</em></p><p><em>关于weblogic安装参考</em>：<a href="https://chris-z-su.github.io/2021/08/11/Linux%E7%8E%AF%E5%A2%83%E4%B8%8Bweblogic%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/">Linux环境下weblogic的安装与配置</a></p><h2 id="一、查看weblogic环境变量"><a href="#一、查看weblogic环境变量" class="headerlink" title="一、查看weblogic环境变量"></a>一、查看weblogic环境变量</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[weblogic@dcyscxcbap01 bin]$ <span class="hljs-built_in">echo</span> <span class="hljs-variable">$MW_HOME</span><br>/home/weblogic12/wls_12c<br></code></pre></td></tr></table></figure><p>注意：这里如果查看的是空，是可以的，因为我们还没有配置weblogic环境。配置完成后，再查看一次，如果有表示配置成功。<br>一定要确认好，我配置的时候环境上有两个版本的weblogic，导致有的时候查看的不一样。修改还是不起作用，以后再研究研究。</p><p>1.在（~）路径下设置环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">[weblogic@dcyscxcbap01 ~]$ <span class="hljs-built_in">cat</span> ~/.bashrc <br><span class="hljs-comment"># .bashrc</span><br><br><span class="hljs-comment"># Source global definitions</span><br><span class="hljs-keyword">if</span> [ -f /etc/bashrc ]; <span class="hljs-keyword">then</span><br>. /etc/bashrc<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># User specific aliases and functions</span><br>[weblogic@dcyscxcbap01 ~]$ <br></code></pre></td></tr></table></figure><p>2.设置完执行  source ~&#x2F;.bashrc<br>注意：<br>①保存的时候提示：<br>“.bashrc” E212: 无法打开并写入文件<br>解决：需要切换到root用户进行配置:<br><strong>su root</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">[weblogic@localhost ~]$ vim ~/.bashrc<br><span class="hljs-comment"># .bashrc</span><br><br><span class="hljs-comment"># Source global definitions</span><br><span class="hljs-keyword">if</span> [ -f /etc/bashrc ]; <span class="hljs-keyword">then</span><br>. /etc/bashrc<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># User specific aliases and functions</span><br><span class="hljs-built_in">export</span> MW_HOME=<span class="hljs-string">&quot;/home/weblogic12/wls_12c&quot;</span><br><span class="hljs-built_in">export</span> WL_HOME=<span class="hljs-string">&quot;/home/weblogic12/wls_12c/oracle_common&quot;</span><br>[weblogic@localhost ~]$ <span class="hljs-built_in">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure><p>②配置完成后，注意切回weblogic用户：su weblogic<br>查看一下是否配置成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[weblogic@dcyscxcbap01 bin]$ <span class="hljs-built_in">echo</span> <span class="hljs-variable">$MW_HOME</span><br>/home/weblogic12/wls_12c<br></code></pre></td></tr></table></figure><h2 id="二、创建自定义domain的文件夹路径"><a href="#二、创建自定义domain的文件夹路径" class="headerlink" title="二、创建自定义domain的文件夹路径"></a>二、创建自定义domain的文件夹路径</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[weblogic@localhost ~]$ <span class="hljs-built_in">mkdir</span> -p /home/weblogic12/wls_12c/user_projects/domains/base_domain/<br></code></pre></td></tr></table></figure><p>进入weblogic中的common的bin目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[weblogic@dcyscxcbap01 bin]$ <span class="hljs-built_in">pwd</span><br>/home/weblogic12/wls_12c/wlserver/common/bin<br></code></pre></td></tr></table></figure><h2 id="三、运行wlst-sh开始设置域"><a href="#三、运行wlst-sh开始设置域" class="headerlink" title="三、运行wlst.sh开始设置域"></a>三、运行wlst.sh开始设置域</h2><p>下边是设置过程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash">[weblogic@dcyscxcbap01 bin]$ ./wlst.sh <br>WARNING: This is a deprecated script. Please invoke the wlst.sh script under oracle_common/common/bin.<br><br>Initializing WebLogic Scripting Tool (WLST) ...<br><br>Welcome to WebLogic Server Administration Scripting Shell<br><br>Type <span class="hljs-built_in">help</span>() <span class="hljs-keyword">for</span> <span class="hljs-built_in">help</span> on available commands<br><br>wls:/offline&gt; readTemplate(<span class="hljs-string">&#x27;/home/weblogic12/wls_12c/wlserver/common/templates/wls/wls.jar&#x27;</span>)<br>警告: readTemplate 已过时。在 selectTemplate 后请使用 loadTemplates 以取代 readTemplate。<br>wls:/offline/base_domain&gt;<span class="hljs-built_in">cd</span>(<span class="hljs-string">&#x27;Servers/AdminServer&#x27;</span>)<br>wls:/offline/base_domain/Server/AdminServer&gt;<span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;ListenAddress&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br>wls:/offline/base_domain/Server/AdminServer&gt;<span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;ListenPort&#x27;</span>, 7201)<br>wls:/offline/base_domain/Server/AdminServer&gt;<span class="hljs-built_in">cd</span>(<span class="hljs-string">&#x27;../..&#x27;</span>)<br>wls:/offline/base_domain&gt;<span class="hljs-built_in">cd</span>(<span class="hljs-string">&#x27;Security/base_domain/User/weblogic&#x27;</span>)<br>wls:/offline/base_domain/Security/base_domain/User/weblogic&gt;cmo.setPassword(<span class="hljs-string">&#x27;weblogic123&#x27;</span>)<br>wls:/offline/base_domain/Security/base_domain/User/weblogic&gt;setOption(<span class="hljs-string">&#x27;OverwriteDomain&#x27;</span>, <span class="hljs-string">&#x27;true&#x27;</span>)<br>wls:/offline/base_domain/Security/base_domain/User/weblogic&gt;writeDomain(<span class="hljs-string">&#x27;/home/weblogic12/wls_12c/user_projects/domains/base_domain&#x27;</span>)<br>wls:/offline/cpi_domain/Security/cpi_domain/User/weblogic&gt;closeTemplate()<br>wls:/offline&gt;<span class="hljs-built_in">exit</span>()<br><br><br>Exiting WebLogic Scripting Tool.<br>[weblogic@dcyscxcbap01 bin]$ <br><br><br></code></pre></td></tr></table></figure><p>说明：<br>1.只需要输入 wls:…&gt;后边的命令就行了<br>2.set(‘ListenAddress’,’’)<br>这个我默认为空，不设置也可以<br>3.set(‘ListenPort’, 7001)<br>welogic域监听的端口号，修改成自己想要设置的<br>4.cmo.setPassword(‘weblogic123’)<br>设置域的登录密码<br>5.writeDomain(‘&#x2F;home&#x2F;weblogic12&#x2F;wls_12c&#x2F;user_projects&#x2F;domains&#x2F;base_domain’)<br>设置上边新建的目录为新建域的工作目录<br>6.其他的基本是固定</p><h2 id="四、正常设置完后，可以去base-domain目录下查看，有很多文件，应该是设置成功了"><a href="#四、正常设置完后，可以去base-domain目录下查看，有很多文件，应该是设置成功了" class="headerlink" title="四、正常设置完后，可以去base_domain目录下查看，有很多文件，应该是设置成功了"></a>四、正常设置完后，可以去base_domain目录下查看，有很多文件，应该是设置成功了</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[weblogic@dcyscxcbap01 bin]$ <span class="hljs-built_in">cd</span> /home/weblogic/wls_12c/user_projects/domains/base_domain/<br></code></pre></td></tr></table></figure><p><strong>启动</strong><br>方式一：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[weblogic@dcyscxcbap01 base_domain]$ sh startWebLogic.sh <br></code></pre></td></tr></table></figure><p>这样启动后，按ctrl + c , 服务就会停止</p><p>方式二(推荐)：<br>1.将启动日志写入到nohup.out文件中<br>nohup sh startWebLogic.sh &amp;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[weblogic@dcyscxcbap01 base_domain]$ <span class="hljs-built_in">pwd</span><br>/home/weblogic12/wls_12c/user_projects/domains/base_domain<br>[weblogic@dcyscxcbap01 base_domain]$ <span class="hljs-built_in">nohup</span> sh startWebLogic.sh &amp;<br><br><br></code></pre></td></tr></table></figure><p>2.ctrl + c  退出，不会停止服务<br>查看nohup.out文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[weblogic@dcyscxcbap01 base_domain]$ <span class="hljs-built_in">tail</span> -1000f nohup.out<br></code></pre></td></tr></table></figure><h2 id="五、查看服务"><a href="#五、查看服务" class="headerlink" title="五、查看服务"></a>五、查看服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[weblogic@dcyscxcbap01 base_domain]$ ps -ef|grep java<br></code></pre></td></tr></table></figure><p>或者直接根据端口号查找</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[weblogic@dcyscxcbap01 base_domain]$ fuser -n tcp 7201<br>7201/tcp:             1380<br>[weblogic@dcyscxcbap01 base_domain]$<br></code></pre></td></tr></table></figure><h2 id="六、停止服务"><a href="#六、停止服务" class="headerlink" title="六、停止服务"></a>六、停止服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[weblogic@dcyscxcbap01 base_domain]$ <span class="hljs-built_in">kill</span> -9 4975 4976<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[weblogic@dcyscxcbap01 base_domain]$ <span class="hljs-built_in">kill</span> -9 1380<br></code></pre></td></tr></table></figure><h2 id="七、weblogic域管理控制台地址"><a href="#七、weblogic域管理控制台地址" class="headerlink" title="七、weblogic域管理控制台地址"></a>七、weblogic域管理控制台地址</h2><p><a href="http://127.0.0.1:7001/console/">http://127.0.0.1:7001/console/</a><br>输入设置的用户名 weblogic 密码 weblogic123  即可。</p><p>完结！！！有需要再补充吧。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Git命令的基本使用</title>
    <link href="/2020/07/11/Git%E5%91%BD%E4%BB%A4%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <url>/2020/07/11/Git%E5%91%BD%E4%BB%A4%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Git基本操作"><a href="#Git基本操作" class="headerlink" title="Git基本操作"></a>Git基本操作</h1><blockquote><p>Git学习参考：</p><p><a href="https://git-scm.com/book/zh/v2">https://git-scm.com/book/zh/v2</a></p></blockquote><h2 id="一、Git操作本地项目"><a href="#一、Git操作本地项目" class="headerlink" title="一、Git操作本地项目"></a>一、Git操作本地项目</h2><h3 id="1-初始化仓库"><a href="#1-初始化仓库" class="headerlink" title="1. 初始化仓库"></a>1. 初始化仓库</h3><p>先进入项目文件夹，通过命令 git init 把这个目录变成git可以管理的仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git init<br></code></pre></td></tr></table></figure><h3 id="2-查看仓库状态"><a href="#2-查看仓库状态" class="headerlink" title="2. 查看仓库状态"></a>2. 查看仓库状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git status<br></code></pre></td></tr></table></figure><h3 id="3-把更新的文件添加到版本库中"><a href="#3-把更新的文件添加到版本库中" class="headerlink" title="3. 把更新的文件添加到版本库中"></a>3. 把更新的文件添加到版本库中</h3><p>使用命令 git add .添加到暂存区里面去，不要忘记后面的小数点 “.”，意为添加文件夹下的所有文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add .<br></code></pre></td></tr></table></figure><h3 id="4-提交更新"><a href="#4-提交更新" class="headerlink" title="4. 提交更新"></a>4. 提交更新</h3><p>用命令 git commit告诉Git，把文件提交到仓库。引号内为提交说明。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit -m <span class="hljs-string">&#x27;first commit&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="5-查看提交记录"><a href="#5-查看提交记录" class="headerlink" title="5. 查看提交记录"></a>5. 查看提交记录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span><br>git <span class="hljs-built_in">log</span> -p &lt;file&gt;<br>git blame &lt;file&gt;<br></code></pre></td></tr></table></figure><h3 id="6-commit之前查看更新内容，文件差异"><a href="#6-commit之前查看更新内容，文件差异" class="headerlink" title="6. commit之前查看更新内容，文件差异"></a>6. commit之前查看更新内容，文件差异</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git diff<br></code></pre></td></tr></table></figure><h2 id="二、Git分支管理"><a href="#二、Git分支管理" class="headerlink" title="二、Git分支管理"></a>二、Git分支管理</h2><h3 id="1-Git查看分支"><a href="#1-Git查看分支" class="headerlink" title="1. Git查看分支"></a>1. Git查看分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git branch -a<br>* main<br>  master<br>  remotes/origin/main<br></code></pre></td></tr></table></figure><h3 id="2-查看每一个分支的最后一次提交"><a href="#2-查看每一个分支的最后一次提交" class="headerlink" title="2. 查看每一个分支的最后一次提交"></a>2. 查看每一个分支的最后一次提交</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git branch -v<br>  iss53   93b412c fix javascript issue<br>* master  7a98805 Merge branch <span class="hljs-string">&#x27;iss53&#x27;</span><br>  testing 782fd34 add scott to the author list <span class="hljs-keyword">in</span> the readmes<br></code></pre></td></tr></table></figure><h3 id="3-Git创建切换分支"><a href="#3-Git创建切换分支" class="headerlink" title="3. Git创建切换分支"></a>3. Git创建切换分支</h3><p>创建本地分支，并切换到分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 新建与合并</span><br>$ git checkout -b iss53<br>Switched to a new branch <span class="hljs-string">&quot;iss53&quot;</span><br><br><span class="hljs-comment"># 它是下面两条命令的简写：</span><br><span class="hljs-comment"># 创建分支</span><br>$ git branch iss53<br><span class="hljs-comment"># 切换分支</span><br>$ git checkout iss53<br></code></pre></td></tr></table></figure><h3 id="4-删除分支："><a href="#4-删除分支：" class="headerlink" title="4. 删除分支："></a>4. 删除分支：</h3><h4 id="1-查看所有分支"><a href="#1-查看所有分支" class="headerlink" title="(1) 查看所有分支"></a>(1) 查看所有分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git branch -a<br>* main<br>  master<br>  remotes/origin/main<br></code></pre></td></tr></table></figure><h4 id="2-删除本地分支"><a href="#2-删除本地分支" class="headerlink" title="(2) 删除本地分支"></a>(2) 删除本地分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">git branch -D BranchName<br><br>其中-D也可以是--delete，如：<br><br>git branch --delete BranchName<br></code></pre></td></tr></table></figure><h4 id="3-删除本地的远程分支-解除关联"><a href="#3-删除本地的远程分支-解除关联" class="headerlink" title="(3) 删除本地的远程分支(解除关联)"></a>(3) 删除本地的远程分支(解除关联)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 先查看查看远程库信息</span><br>$ git remote -v<br>origin  git@github.com:xxx/xxx.git (fetch)<br>origin  git@github.com:xxx/xxx.git (push)<br><span class="hljs-comment"># 然后，根据名字删除，比如删除origin：</span><br>$ git remote <span class="hljs-built_in">rm</span> origin<br></code></pre></td></tr></table></figure><h4 id="4-远程删除Git服务器上的分支"><a href="#4-远程删除Git服务器上的分支" class="headerlink" title="(4) 远程删除Git服务器上的分支"></a>(4) 远程删除Git服务器上的分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push origin -d BranchName<br><br>其中-d也可以是--delete，如：<br><br>git push origin --delete BranchName<br><br>注意：git命令区分大小写，例如-D和-d在不同的地方虽然都是删除的意思，并且它们的完整写法都是--delete，但简易写法用错大小写会执行失败。<br></code></pre></td></tr></table></figure><h2 id="三、Git操作远程项目"><a href="#三、Git操作远程项目" class="headerlink" title="三、Git操作远程项目"></a>三、Git操作远程项目</h2><h3 id="1-Git关联远程项目"><a href="#1-Git关联远程项目" class="headerlink" title="1. Git关联远程项目"></a>1. Git关联远程项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote add origin 你的远程库地址。<br>如：<br>git remote add origin https://github.com/xxx/xxx.git<br></code></pre></td></tr></table></figure><blockquote><p>注：“origin” 并无特殊含义</p><p>远程仓库名字 “origin” 与分支名字 “master” 一样，在 Git 中并没有任何特别的含义一样。 同时 “master” 是当你运行 <code>git init</code> 时默认的起始分支名字，原因仅仅是它的广泛使用， “origin” 是当你运行 <code>git clone</code> 时默认的远程仓库名字。 如果你运行 <code>git clone -o booyah</code>，那么你默认的远程分支名字将会是 <code>booyah/master</code>。</p></blockquote><h3 id="2-Git获取远程库与本地同步合并"><a href="#2-Git获取远程库与本地同步合并" class="headerlink" title="2. Git获取远程库与本地同步合并"></a>2. Git获取远程库与本地同步合并</h3><p>push之前先pull远程代码，如果远程库不为空必须做这一步，否则后面的提交会失败。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git pull --rebase origin develop<br></code></pre></td></tr></table></figure><p>或者：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git pull origin develop<br></code></pre></td></tr></table></figure><h3 id="3-把本地库的内容推送到远程"><a href="#3-把本地库的内容推送到远程" class="headerlink" title="3. 把本地库的内容推送到远程"></a>3. 把本地库的内容推送到远程</h3><p>使用 git push命令，实际上是把当前分支develop推送到远程。第一次推送内容使用如下命令，执行此命令后会要求输入用户名、密码，验证通过后即开始上传。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push -u origin develop<br></code></pre></td></tr></table></figure><p>以后提交可以使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push origin serverfix<br></code></pre></td></tr></table></figure><blockquote><p>这里有些工作被简化了。 Git 自动将 <code>serverfix</code> 分支名字展开为 <code>refs/heads/serverfix:refs/heads/serverfix</code>， 那意味着，“推送本地的 <code>serverfix</code> 分支来更新远程仓库上的 <code>serverfix</code> 分支。” 你也可以运行 <code>git push origin serverfix:serverfix</code>， 它会做同样的事——也就是说“推送本地的 <code>serverfix</code> 分支，将其作为远程仓库的 <code>serverfix</code> 分支” 可以通过这种格式来推送本地分支到一个命名不相同的远程分支。 如果并不想让远程仓库上的分支叫做 <code>serverfix</code>，可以运行 <code>git push origin serverfix:awesomebranch</code> 来将本地的 <code>serverfix</code> 分支推送到远程仓库上的 <code>awesomebranch</code> 分支。</p></blockquote><h2 id="四、Git-Clone远程代码"><a href="#四、Git-Clone远程代码" class="headerlink" title="四、Git Clone远程代码"></a>四、Git Clone远程代码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/xxx/xxx.git<br></code></pre></td></tr></table></figure><p>clone远程仓库到制定目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> xxx.git <span class="hljs-string">&quot;指定目录&quot;</span><br></code></pre></td></tr></table></figure><h2 id="五、Git合并分支"><a href="#五、Git合并分支" class="headerlink" title="五、Git合并分支"></a>五、Git合并分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看分支</span><br>$ git branch<br>* master<br>  newtest<br><span class="hljs-comment"># 合并某分支到当前分支：git merge &lt;name&gt;</span><br>$ git merge newtest<br><span class="hljs-comment"># 合并完之后就可以删除掉不需要的分支了</span><br>$ git branch -d newtest<br>Deleted branch newtest (was c1501a2).<br><br><span class="hljs-comment"># 关于merge回滚操作参考：</span><br><span class="hljs-comment">#     https://blog.csdn.net/adsl624153/article/details/81155664</span><br><br><span class="hljs-comment"># 执行完merge操作后，没有修改代码</span><br><span class="hljs-comment"># 1、命令</span><br><span class="hljs-comment"># ⑴ 查看merge操作的上一个提交记录的版本号</span><br>git reflog<br><br><span class="hljs-comment"># ⑵ 回滚到merge之前的状态</span><br>git reset --hard 版本号<br></code></pre></td></tr></table></figure><h2 id="六、Git-回滚操作"><a href="#六、Git-回滚操作" class="headerlink" title="六、Git 回滚操作"></a>六、Git 回滚操作</h2><blockquote><p>参考：<a href="https://www.jianshu.com/p/c55958563f5a">https://www.jianshu.com/p/c55958563f5a</a></p></blockquote><p>Git撤销&amp;回滚操作(git reset 和 get revert)<br>Git 的工作流<br>工作区：在 git add xx 之前，在自己当前分支所修改的代码内容！<br>暂存区：已经 git add xxx 进去，且没有执行 git commit xxx 的。<br>本地分支：已经 git commit -m xxx 提交到本地分支的。<br>远程分支：git push origin HEAD:refs&#x2F;for&#x2F;master HEAD 是本地，master是远程分支</p><p>代码回滚<br>在上传代码到远程仓库的时候，不免会出现问题，任何过程都有可能要回滚代码：</p><p>1、在工作区的代码（checkout ~ 修改工作区文件）<br>git checkout – a.txt # 丢弃某个文件，或者<br>git checkout – . # 丢弃全部</p><p>注意：git checkout – . 丢弃全部，也包括：新增的文件会被删除、删除的文件会恢复回来、修改的文件会回去。这几个前提都说的是，回到暂存区之前的样子。对之前保存在暂存区里的代码不会有任何影响。对commit提交到本地分支的代码就更没影响了。当然，如果你之前压根都没有暂存或commit，那就是回到你上次pull下来的样子了。</p><p>2、代码 git add 到缓存区，并未 git commit 提交（reset ~ 修改暂存区文件）<br>git reset HEAD .<br>git reset HEAD a.txt</p><p>注意：这个命令仅改变暂存区，并不改变工作区，这意味着在无任何其他操作的情况下，<br>工作区中的实际文件同该命令运行之前 无任何变化</p><p>3、代码 git commit 到本地分支，但没有 git push 到远程 （git reset –hard ~ commit 之后）<br>git log # 得到你需要回退一次提交的commit id<br>git reset –hard <commit_id> # 回到其中你想要的某个版本<br>git reset –hard HEAD^ # 回到最新的一次提交<br>git reset HEAD^ # 此时代码保留，回到 git add 之前</p><p>4、代码 git push 把修改提交到远程仓库 (git reset || git revert)<br>（1）通过git reset是直接删除指定的commit<br>git log # 得到你需要回退一次提交的commit id<br>git reset –hard <commit_id><br>git push origin HEAD –force # 强制提交一次，之前错误的提交就从远程仓库删除</p><p>(2) 通过git revert是用一次新的commit来回滚之前的commit<br>git log # 得到你需要回退一次提交的commit id<br>git revert <commit_id> # 撤销指定的版本，撤销也会作为一次提交进行保存</p><p>（3） git revert 和 git reset的区别<br>(a). git revert是用一次新的commit来回滚之前的commit，此次提交之前的commit都会被保留( 会有 两次 commit id)；<br>(b). git reset是回到某次提交，提交及之前的commit都会被保留，但是此commit id之后的修改都会被删除 ( 只有一次 commit id)</p><p>作者：<em>画圆</em><br>链接：<a href="https://www.jianshu.com/p/c55958563f5a">https://www.jianshu.com/p/c55958563f5a</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><h2 id="错误解决："><a href="#错误解决：" class="headerlink" title="错误解决："></a>错误解决：</h2><h3 id="1、执行git命令时出现fatal-‘origin’-does-not-appear-to-be-a-git-repository错误"><a href="#1、执行git命令时出现fatal-‘origin’-does-not-appear-to-be-a-git-repository错误" class="headerlink" title="1、执行git命令时出现fatal: ‘origin’ does not appear to be a git repository错误"></a>1、执行git命令时出现fatal: ‘origin’ does not appear to be a git repository错误</h3><p>在执行git pull origin master时出现：<br>　　fatal: ‘origin’ does not appear to be a git repository<br>　　fatal: Could not read from remote repository.<br>　　Please make sure you have the correct access rights and the repository exists</p><p>解决方案：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir">git remote add origin git<span class="hljs-variable">@github</span><span class="hljs-symbol">:bx_reader/bx-reader-api</span>.git<br> <br>将关联远程仓库为origin<br></code></pre></td></tr></table></figure><h3 id="2、Reinitialized-existing-Git-repository"><a href="#2、Reinitialized-existing-Git-repository" class="headerlink" title="2、Reinitialized existing Git repository"></a>2、Reinitialized existing Git repository</h3><p>“git init” 的时候出现：Reinitialized existing Git repository<br>解决方法：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">可以使用 rm -rf <span class="hljs-string">.git</span>，删除<span class="hljs-string">.git</span>，然后在 git init 即可<br></code></pre></td></tr></table></figure><h3 id="3、refusing-to-merge-unrelated-histories"><a href="#3、refusing-to-merge-unrelated-histories" class="headerlink" title="3、refusing to merge unrelated histories"></a>3、refusing to merge unrelated histories</h3><p>“git pull origin master ” 的时候出现：refusing to merge unrelated histories</p><p>解决方法：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">可以在 “git pull origin <span class="hljs-literal">master</span>” 后添加 “--allow-unrelated-histories”<br>即整个命令行为：<br>    git pull origin <span class="hljs-keyword">master</span> <span class="hljs-title">--allow-unrelated-histories</span><br></code></pre></td></tr></table></figure><p>如果你是git pull或者git push报fatal: refusing to merge unrelated histories<br>同理：<br>git pull origin master –allow-unrelated-histories<br>等等，就是这样完美的解决咯！</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
